
import React from 'react';

export interface PreAgentAnalysis {
  type: 'task_creation' | 'meeting_point' | 'normal_query';
  confidence: number;
  extractedContent?: string;
  reasoning: string;
}

export class PreAgent {
  
  // Fonction principale d'analyse
  static analyzeRequest(message: string): PreAgentAnalysis {
    const normalizedMessage = this.normalizeText(message);
    
    console.log('[PRE-AGENT] üîç Analyse de la demande:', message);
    console.log('[PRE-AGENT] üìù Message normalis√©:', normalizedMessage);
    
    // 1. Analyser pour cr√©ation de t√¢che
    const taskAnalysis = this.analyzeTaskCreation(normalizedMessage, message);
    if (taskAnalysis.confidence > 0.8) {
      console.log('[PRE-AGENT] ‚úÖ T√ÇCHE d√©tect√©e avec confiance:', taskAnalysis.confidence);
      return taskAnalysis;
    }
    
    // 2. Analyser pour point de r√©union
    const meetingAnalysis = this.analyzeMeetingPoint(normalizedMessage, message);
    if (meetingAnalysis.confidence > 0.8) {
      console.log('[PRE-AGENT] ‚úÖ POINT R√âUNION d√©tect√© avec confiance:', meetingAnalysis.confidence);
      return meetingAnalysis;
    }
    
    // 3. Si ambigu√Øt√©, choisir le plus probable
    if (taskAnalysis.confidence > meetingAnalysis.confidence && taskAnalysis.confidence > 0.6) {
      console.log('[PRE-AGENT] ‚öñÔ∏è T√ÇCHE choisie par probabilit√©:', taskAnalysis.confidence);
      return taskAnalysis;
    }
    
    if (meetingAnalysis.confidence > 0.6) {
      console.log('[PRE-AGENT] ‚öñÔ∏è POINT R√âUNION choisi par probabilit√©:', meetingAnalysis.confidence);
      return meetingAnalysis;
    }
    
    // 4. Requ√™te normale
    console.log('[PRE-AGENT] üí¨ Requ√™te normale d√©tect√©e');
    return {
      type: 'normal_query',
      confidence: 1.0,
      reasoning: 'Aucun pattern de cr√©ation de t√¢che ou de point de r√©union d√©tect√©'
    };
  }
  
  // Analyse sp√©cifique pour cr√©ation de t√¢che
  private static analyzeTaskCreation(normalizedMessage: string, originalMessage: string): PreAgentAnalysis {
    let confidence = 0;
    let reasoning = '';
    
    // Patterns tr√®s sp√©cifiques pour t√¢ches
    const strongTaskPatterns = [
      /(?:peux tu|pourrais tu|pourrait tu|tu peux|peut tu)\s+(?:cree|creer|faire|ajouter|cr√©e|cr√©er|mettre|donner|assigner|demander|dire)\s+(?:une|un)?\s*(?:tache|task|action|travail)/i,
      /(?:nouvelle|nouveau)\s+(?:tache|task|action|travail)/i,
      /(?:cree|cr√©er|creer|faire|ajouter)\s+(?:une|un)?\s*(?:tache|task|action|travail)/i
    ];
    
    // Patterns avec assignation de personne
    const personAssignmentPatterns = [
      /(?:demander|dire|confier|assigner|donner|prevenir|rappeler|informer)\s+(?:a|√†)\s+(?:emilie|david|leila|hortensia|parmice|sybil)/i,
      /(?:emilie|david|leila|hortensia|parmice|sybil)\s+(?:doit|devrait|peut|pourrait|va|dois)\s+(?:faire|acheter|organiser|preparer|mettre|donner|creer|cr√©er)/i
    ];
    
    // Patterns d'action sp√©cifique
    const actionPatterns = [
      /(?:acheter|achat|commander|commande|organiser|preparer|faire|creer|cr√©er|planifier)/i,
      /(?:formation|cours|apprentissage).*(?:pour|√†|avec)\s+(?:emilie|david|leila|hortensia|parmice|sybil)/i
    ];
    
    // V√©rification des patterns forts
    const hasStrongPattern = strongTaskPatterns.some(pattern => pattern.test(originalMessage));
    if (hasStrongPattern) {
      confidence += 0.9;
      reasoning += 'Pattern fort de cr√©ation de t√¢che d√©tect√©. ';
    }
    
    // V√©rification assignation de personne
    const hasPersonAssignment = personAssignmentPatterns.some(pattern => pattern.test(originalMessage));
    if (hasPersonAssignment) {
      confidence += 0.8;
      reasoning += 'Assignation √† une personne sp√©cifique d√©tect√©e. ';
    }
    
    // V√©rification d'actions sp√©cifiques
    const hasActionPattern = actionPatterns.some(pattern => pattern.test(originalMessage));
    if (hasActionPattern) {
      confidence += 0.6;
      reasoning += 'Action sp√©cifique d√©tect√©e. ';
    }
    
    // Mots-cl√©s de t√¢che
    const taskKeywords = ['tache', 'task', 'travail', 'mission', 'action', 'activite', 'todo'];
    const hasTaskKeywords = taskKeywords.some(keyword => normalizedMessage.includes(keyword));
    if (hasTaskKeywords) {
      confidence += 0.4;
      reasoning += 'Mots-cl√©s de t√¢che pr√©sents. ';
    }
    
    // Verbes d'action
    const actionVerbs = ['creer', 'cr√©er', 'faire', 'organiser', 'planifier', 'acheter', 'commander', 'assigner', 'demander'];
    const hasActionVerbs = actionVerbs.some(verb => normalizedMessage.includes(verb));
    if (hasActionVerbs) {
      confidence += 0.3;
      reasoning += 'Verbes d\'action pr√©sents. ';
    }
    
    // Limitation de confiance
    confidence = Math.min(confidence, 1.0);
    
    return {
      type: 'task_creation',
      confidence,
      extractedContent: originalMessage,
      reasoning: reasoning.trim() || 'Analyse de cr√©ation de t√¢che'
    };
  }
  
  // Analyse sp√©cifique pour point de r√©union
  private static analyzeMeetingPoint(normalizedMessage: string, originalMessage: string): PreAgentAnalysis {
    let confidence = 0;
    let reasoning = '';
    
    // Patterns tr√®s sp√©cifiques pour r√©unions
    const strongMeetingPatterns = [
      /(?:peux tu|pourrais tu|tu peux|peut tu)\s+(?:ajouter|mettre|noter|inscrire).*(?:point|sujet|ordre|agenda|reunion)/i,
      /(?:ajouter|mettre|noter|inscrire|rajouter)\s+(?:un|une)?\s*(?:point|sujet).*(?:reunion|ordre|agenda)/i,
      /(?:nouveau|nouvelle)\s+(?:point|sujet).*(?:reunion|ordre|agenda)/i
    ];
    
    // Patterns contextuels r√©union
    const meetingContextPatterns = [
      /(?:ordre\s+du\s+jour|agenda)/i,
      /(?:prochaine|suivante)\s+reunion/i,
      /(?:reunion|meeting).*(?:point|sujet|ordre)/i,
      /(?:point|sujet).*(?:reunion|meeting|prochaine)/i
    ];
    
    // V√©rification des patterns forts
    const hasStrongPattern = strongMeetingPatterns.some(pattern => pattern.test(originalMessage));
    if (hasStrongPattern) {
      confidence += 0.9;
      reasoning += 'Pattern fort de point de r√©union d√©tect√©. ';
    }
    
    // V√©rification du contexte r√©union
    const hasMeetingContext = meetingContextPatterns.some(pattern => pattern.test(originalMessage));
    if (hasMeetingContext) {
      confidence += 0.8;
      reasoning += 'Contexte de r√©union d√©tect√©. ';
    }
    
    // Mots-cl√©s sp√©cifiques r√©union
    const meetingKeywords = ['reunion', 'meeting', 'point', 'ordre', 'agenda', 'sujet'];
    const meetingKeywordCount = meetingKeywords.filter(keyword => normalizedMessage.includes(keyword)).length;
    if (meetingKeywordCount >= 2) {
      confidence += 0.6;
      reasoning += `${meetingKeywordCount} mots-cl√©s de r√©union pr√©sents. `;
    } else if (meetingKeywordCount === 1) {
      confidence += 0.3;
      reasoning += 'Mot-cl√© de r√©union pr√©sent. ';
    }
    
    // Verbes contextuels r√©union
    const meetingVerbs = ['ajouter', 'noter', 'inscrire', 'mettre', 'rajouter', 'discuter', 'aborder'];
    const hasMeetingVerbs = meetingVerbs.some(verb => normalizedMessage.includes(verb));
    if (hasMeetingVerbs) {
      confidence += 0.4;
      reasoning += 'Verbes contextuels de r√©union pr√©sents. ';
    }
    
    // Limitation de confiance
    confidence = Math.min(confidence, 1.0);
    
    return {
      type: 'meeting_point',
      confidence,
      extractedContent: originalMessage,
      reasoning: reasoning.trim() || 'Analyse de point de r√©union'
    };
  }
  
  // Normalisation du texte
  private static normalizeText(text: string): string {
    return text
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Supprime les accents
      .replace(/[^a-z0-9\s]/g, ' ') // Remplace la ponctuation par des espaces
      .replace(/\s+/g, ' ') // Remplace les espaces multiples par un seul
      .trim();
  }
}

export default PreAgent;
