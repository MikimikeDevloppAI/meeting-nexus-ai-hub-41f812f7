
import React from 'react';

export interface PreAgentAnalysis {
  type: 'task_creation' | 'meeting_point' | 'normal_query';
  confidence: number;
  extractedContent?: string;
  reasoning: string;
}

export class PreAgent {
  
  // Fonction principale d'analyse - BEAUCOUP PLUS STRICTE
  static analyzeRequest(message: string): PreAgentAnalysis {
    const normalizedMessage = this.normalizeText(message);
    
    console.log('[PRE-AGENT] üîç Analyse STRICTE de la demande:', message);
    console.log('[PRE-AGENT] üìù Message normalis√©:', normalizedMessage);
    
    // 1. Analyser pour cr√©ation de t√¢che - SEUIL TR√àS √âLEV√â
    const taskAnalysis = this.analyzeTaskCreation(normalizedMessage, message);
    if (taskAnalysis.confidence > 0.95) {
      console.log('[PRE-AGENT] ‚úÖ T√ÇCHE d√©tect√©e avec confiance TR√àS √âLEV√âE:', taskAnalysis.confidence);
      return taskAnalysis;
    }
    
    // 2. Analyser pour point de r√©union - SEUIL TR√àS √âLEV√â
    const meetingAnalysis = this.analyzeMeetingPoint(normalizedMessage, message);
    if (meetingAnalysis.confidence > 0.95) {
      console.log('[PRE-AGENT] ‚úÖ POINT R√âUNION d√©tect√© avec confiance TR√àS √âLEV√âE:', meetingAnalysis.confidence);
      return meetingAnalysis;
    }
    
    // 3. Si pas assez explicite, traiter comme requ√™te normale
    console.log('[PRE-AGENT] üí¨ Requ√™te normale - pas assez explicite pour action');
    return {
      type: 'normal_query',
      confidence: 1.0,
      reasoning: 'Demande pas assez explicite pour cr√©er une action automatique'
    };
  }
  
  // Analyse ULTRA-STRICTE pour cr√©ation de t√¢che
  private static analyzeTaskCreation(normalizedMessage: string, originalMessage: string): PreAgentAnalysis {
    let confidence = 0;
    let reasoning = '';
    
    // SEULS les patterns TR√àS EXPLICITES sont accept√©s
    const veryExplicitTaskPatterns = [
      // Formulations tr√®s directes et explicites uniquement
      /(?:peux tu|pourrais tu|tu peux|peut tu)\s+(?:cree|creer|cr√©er)\s+(?:une|un)?\s*(?:tache|task|travail)/i,
      /(?:ajoute|ajouter|cr√©e|cr√©er|faire)\s+(?:une|un)?\s*(?:nouvelle)?\s*(?:tache|task)\s+(?:pour|√†)/i,
      /(?:nouvelle|nouveau)\s+(?:tache|task)\s+(?:pour|√†|concernant)/i,
      /(?:cree|cr√©er|creer)\s+(?:moi|nous)?\s*(?:une|un)?\s*(?:tache|task)/i
    ];
    
    // Patterns d'assignation TR√àS EXPLICITES
    const explicitAssignmentPatterns = [
      /(?:peux tu|pourrais tu)\s+(?:demander|dire|confier)\s+(?:a|√†)\s+(?:emilie|david|leila|hortensia)\s+(?:de|d')\s+(?:faire|creer|cr√©er|organiser)/i,
      /(?:cree|cr√©er|creer)\s+(?:une|un)?\s*(?:tache|task)\s+(?:pour|√†)\s+(?:emilie|david|leila|hortensia)/i
    ];
    
    // V√©rification des patterns TR√àS explicites seulement
    const hasVeryExplicitPattern = veryExplicitTaskPatterns.some(pattern => pattern.test(originalMessage));
    if (hasVeryExplicitPattern) {
      confidence = 1.0;
      reasoning = 'Pattern TR√àS explicite de cr√©ation de t√¢che d√©tect√©. ';
    }
    
    // V√©rification assignation TR√àS explicite
    const hasExplicitAssignment = explicitAssignmentPatterns.some(pattern => pattern.test(originalMessage));
    if (hasExplicitAssignment) {
      confidence = Math.max(confidence, 0.98);
      reasoning += 'Assignation TR√àS explicite √† une personne d√©tect√©e. ';
    }
    
    // SUPPRESSION des d√©tections g√©n√©riques - seules les demandes TR√àS explicites passent
    
    return {
      type: 'task_creation',
      confidence,
      extractedContent: originalMessage,
      reasoning: reasoning.trim() || 'Analyse de cr√©ation de t√¢che - pas assez explicite'
    };
  }
  
  // Analyse ULTRA-STRICTE pour point de r√©union
  private static analyzeMeetingPoint(normalizedMessage: string, originalMessage: string): PreAgentAnalysis {
    let confidence = 0;
    let reasoning = '';
    
    // SEULS les patterns TR√àS EXPLICITES pour r√©unions
    const veryExplicitMeetingPatterns = [
      /(?:peux tu|pourrais tu|tu peux)\s+(?:ajouter|mettre|noter)\s+(?:un|une)?\s*(?:point|sujet)\s+(?:a|√†|dans)\s*(?:l')?(?:ordre|agenda|reunion)/i,
      /(?:ajoute|ajouter|mettre)\s+(?:un|une)?\s*(?:point|sujet)\s+(?:a|√†|dans)\s*(?:l')?(?:ordre|agenda|reunion)/i,
      /(?:nouveau|nouvelle)\s+(?:point|sujet)\s+(?:pour|dans)\s*(?:l')?(?:ordre|agenda|reunion)/i,
      /(?:point|sujet)\s+(?:pour|dans)\s+(?:la|le)?\s*(?:prochaine|prochain)?\s*(?:reunion|meeting|ordre)/i
    ];
    
    // V√©rification des patterns TR√àS explicites seulement
    const hasVeryExplicitPattern = veryExplicitMeetingPatterns.some(pattern => pattern.test(originalMessage));
    if (hasVeryExplicitPattern) {
      confidence = 1.0;
      reasoning = 'Pattern TR√àS explicite de point de r√©union d√©tect√©. ';
    }
    
    // SUPPRESSION de toute d√©tection g√©n√©rique
    
    return {
      type: 'meeting_point',
      confidence,
      extractedContent: originalMessage,
      reasoning: reasoning.trim() || 'Analyse de point de r√©union - pas assez explicite'
    };
  }
  
  // Normalisation du texte (gard√©e identique)
  private static normalizeText(text: string): string {
    return text
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Supprime les accents
      .replace(/[^a-z0-9\s]/g, ' ') // Remplace la ponctuation par des espaces
      .replace(/\s+/g, ' ') // Remplace les espaces multiples par un seul
      .trim();
  }
}

export default PreAgent;
