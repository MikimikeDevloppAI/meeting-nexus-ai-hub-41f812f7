#!/usr/bin/env python3
"""
Script Selenium pour automatiser la saisie de donn√©es IOL sur le site ESCRS IOL Calculator.
Lit un fichier JSON export√© depuis l'application React et remplit automatiquement le formulaire.
"""

import json
import time
import os
import sys
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options


def setup_driver(headless=False, debug=False):
    """Configure et retourne le driver Chrome avec les options appropri√©es."""
    options = Options()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument("--window-size=1920,1080")
    
    if headless:
        options.add_argument('--headless')
    
    driver = webdriver.Chrome(options=options)
    return driver


def load_iol_data(json_file_path):
    """Charge les donn√©es IOL depuis le fichier JSON export√©."""
    try:
        with open(json_file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            print(f"‚úÖ Donn√©es IOL charg√©es depuis {json_file_path}")
            return data
    except FileNotFoundError:
        print(f"‚ùå Fichier {json_file_path} non trouv√©")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå Erreur de lecture JSON dans {json_file_path}")
        return None


def extract_first_value(value_string):
    """Extrait la premi√®re valeur num√©rique d'une string (ex: '45.17 / 7.47 @ 178' -> '45.17')."""
    if not value_string or value_string == '-':
        return ""
    
    # Divise par des espaces ou par '/'
    parts = value_string.replace('/', ' ').split()
    for part in parts:
        try:
            # V√©rifie si c'est un nombre valide
            float(part)
            return part
        except ValueError:
            continue
    return ""


def select_gender(driver, wait, gender_value="Female"):
    """S√©lectionne le genre dans le dropdown."""
    try:
        print(f"‚è≥ Localisation du dropdown genre...")
        dropdown_container = wait.until(EC.element_to_be_clickable((
            By.XPATH, "//div[contains(@class, 'mud-select')]"
        )))

        print(f"üñ±Ô∏è Ouverture du dropdown pour s√©lectionner '{gender_value}'...")
        ActionChains(driver).move_to_element(dropdown_container).click().perform()

        print("‚è≥ Attente de l'ouverture du dropdown...")
        dropdown_popup = wait.until(EC.presence_of_element_located((
            By.XPATH, "//div[contains(@class, 'mud-popover-open')]"
        )))
        time.sleep(0.5)

        print(f"üîç Recherche de l'option genre: '{gender_value}'...")
        gender_option = dropdown_popup.find_element(
            By.XPATH, f".//div[contains(@class,'mud-list-item')][.//p[normalize-space(text())='{gender_value}']]"
        )

        print(f"‚úÖ Clic sur l'option genre: {gender_value}")
        gender_option.click()
        print(f"‚úÖ Genre '{gender_value}' s√©lectionn√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå √âchec de s√©lection du genre '{gender_value}': {e}")
        return False


def fill_input_fields(driver, wait, field_mapping):
    """Remplit les champs input bas√©s sur le mapping fourni."""
    filled_labels = set()
    inputs = driver.find_elements(By.XPATH, "//input")
    
    for el in inputs:
        try:
            input_id = el.get_attribute("id")
            if input_id:
                label_elements = driver.find_elements(By.XPATH, f"//label[@for='{input_id}']")
                if label_elements:
                    label_text = label_elements[0].text.strip()
                    if label_text in field_mapping and label_text not in filled_labels:
                        value = field_mapping[label_text]
                        if value:  # Ne remplit que si la valeur n'est pas vide
                            el.clear()
                            el.send_keys(str(value))
                            filled_labels.add(label_text)
                            print(f"‚úÖ Rempli '{label_text}' avec '{value}'")
                        else:
                            print(f"‚ö†Ô∏è Champ '{label_text}' laiss√© vide (pas de donn√©es)")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du remplissage d'un champ: {e}")


def main():
    """Fonction principale du script."""
    print("üöÄ D√©marrage de l'automatisation IOL Calculator")
    
    # Configuration
    JSON_FILE = "exported_iol_data.json"
    HEADLESS = False  # Changez √† True pour mode sans interface
    DEBUG = True
    
    # V√©rification de l'existence du fichier JSON
    if not os.path.exists(JSON_FILE):
        print(f"‚ùå Fichier {JSON_FILE} non trouv√© dans le r√©pertoire courant")
        print("   Assurez-vous d'avoir export√© les donn√©es depuis l'application IOL Calculator")
        return
    
    # Chargement des donn√©es
    data = load_iol_data(JSON_FILE)
    if not data:
        print("‚ùå Impossible de charger les donn√©es IOL")
        return
    
    # Configuration du driver
    driver = setup_driver(headless=HEADLESS, debug=DEBUG)
    wait = WebDriverWait(driver, 10)
    
    try:
        print("üåê Ouverture du site ESCRS IOL Calculator...")
        driver.get("https://iolcalculator.escrs.org/")

        print("‚úÖ Acceptation des conditions...")
        agree_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[.//span[text()='I Agree']]")))
        agree_button.click()
        time.sleep(1)

        # S√©lection du genre
        gender = data.get('gender', 'Female')
        select_gender(driver, wait, gender)
        time.sleep(1)

        # Pr√©paration des donn√©es pour les champs du haut
        top_fields = {
            "Surgeon": data.get('surgeon', ''),
            "Patient Initials": data.get('patientInitials', ''),
            "Id": data.get('patientId', ''),
            "Age": data.get('age', ''),
        }

        print("‚úèÔ∏è Remplissage des champs du haut...")
        fill_input_fields(driver, wait, top_fields)

        # Pr√©paration des donn√©es IOL pour l'≈ìil gauche (Left Eye)
        # Note: Le site utilise "Left Eye" pour les donn√©es mais nous utilisons rightEye des donn√©es IOL
        iol_data = data.get('iolData', {})
        right_eye = iol_data.get('rightEye', {})
        
        # Mapping des champs IOL
        iol_fields = {
            "AL": extract_first_value(right_eye.get('AL', '')),
            "ACD": extract_first_value(right_eye.get('ACD', '')),
            "LT": extract_first_value(right_eye.get('LT', '')),
            "CCT": extract_first_value(right_eye.get('CCT', '')),
            "CD (WTW)": extract_first_value(right_eye.get('WTW', '')),
            "K1": extract_first_value(right_eye.get('K1', '')),
            "K2": extract_first_value(right_eye.get('K2', '')),
        }

        print("‚úèÔ∏è Remplissage des champs IOL...")
        print(f"üìä Donn√©es √† saisir: {iol_fields}")
        fill_input_fields(driver, wait, iol_fields)

        # Sortir du dernier champ pour d√©clencher les calculs
        print("üñ±Ô∏è Clic ailleurs pour d√©clencher blur sur le dernier champ...")
        body = driver.find_element(By.TAG_NAME, "body")
        body.click()

        # Attente avant calcul
        print("‚è≥ Attente de 2 secondes avant de cliquer sur 'Calculate'...")
        time.sleep(2)

        # Tentative de clic sur Calculate
        try:
            calc_button = driver.find_element(By.XPATH, "//button[.//span[contains(text(),'Calculate')]]")
            driver.execute_script("arguments[0].click();", calc_button)
            print("üßÆ Clic sur 'Calculate' effectu√©")
        except Exception as e:
            print(f"‚ùå √âchec du clic sur 'Calculate': {e}")

        print("‚è≥ Attente de 10 secondes pour le chargement du r√©sultat...")
        time.sleep(10)

        # Capture d'√©cran
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = f"iol_result_{timestamp}.png"
        driver.save_screenshot(screenshot_path)
        print(f"üì∏ Capture d'√©cran sauvegard√©e: {screenshot_path}")

        print("‚úÖ Automatisation termin√©e avec succ√®s!")

    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        # Capture d'√©cran en cas d'erreur
        error_screenshot = f"error_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        try:
            driver.save_screenshot(error_screenshot)
            print(f"üì∏ Capture d'√©cran d'erreur: {error_screenshot}")
        except:
            pass

    finally:
        if not DEBUG:
            driver.quit()
        else:
            print("üîç Mode debug activ√© - le navigateur reste ouvert")
            input("Appuyez sur Entr√©e pour fermer le navigateur...")
            driver.quit()


if __name__ == "__main__":
    main()