// test-task-recommendation-agent.js
const fetch = require('node-fetch');
require('dotenv').config();

const FUNCTION_URL = process.env.SUPABASE_FUNCTION_TASK_RECOMMENDATION_AGENT_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;

if (!FUNCTION_URL) {
  console.error('‚ùå Erreur: Variable d\'environnement SUPABASE_FUNCTION_TASK_RECOMMENDATION_AGENT_URL non d√©finie.');
  process.exit(1);
}

if (!SUPABASE_ANON_KEY) {
  console.error('‚ùå Erreur: Variable d\'environnement SUPABASE_ANON_KEY non d√©finie.');
  process.exit(1);
}

async function testTaskRecommendationAgent() {
  console.log('üöÄ D√âBUT DU TEST MANUEL - Task Recommendation Agent');
  console.log('=' .repeat(60));
  
  try {
    // Payload de test avec toutes les t√¢ches r√©elles
    const testPayload = {
      batchPrompt: `Tu es un assistant IA sp√©cialis√© dans la g√©n√©ration de recommandations TR√àS D√âTAILL√âES pour des t√¢ches issues de r√©unions du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve.

Ton objectif est d'analyser la t√¢che et de :
1. Proposer un **plan d'ex√©cution clair** si la t√¢che est complexe ou n√©cessite plusieurs √©tapes.
2. **Signaler les √©l√©ments importants √† consid√©rer** (contraintes r√©glementaires, risques, coordination n√©cessaire, points d'attention).
3. **Sugg√©rer des prestataires, fournisseurs ou outils** qui peuvent faciliter l'ex√©cution.
4. Si pertinent, **challenger les d√©cisions prises** ou proposer une alternative plus efficace ou moins risqu√©e.
5. Ne faire **aucune recommandation** si la t√¢che est simple ou √©vidente (dans ce cas, r√©pondre uniquement : "Aucune recommandation.").
6. Un email pr√©-r√©dig√© COMPLET qui doit comprendre √† qui doit √™tre fait la communication et adapter le ton si l'email doit √™tre envoy√© en interne ou en externe.

Crit√®res de qualit√© :
- Sois **concis, structur√© et actionnable**.
- Fournis uniquement des recommandations qui **ajoutent une vraie valeur**.
- N'invente pas de contacts si tu n'en as pas.
- √âvite les banalit√©s ou les √©vidences.

CONTEXTE DE LA R√âUNION :
- Titre: R√©union hebdomadaire du cabinet Dr Tabibian
- Date: 2025-06-17
- Participants: √âmilie, Le√Øla, Parmis

TRANSCRIPT DE LA R√âUNION :
R√©union hebdomadaire concernant l'organisation du cabinet, la gestion des stocks de mat√©riel m√©dical, et la coordination des rendez-vous patients. Discussion sur les nouvelles proc√©dures administratives et les am√©liorations √† apporter au service client.

T√ÇCHES √Ä ANALYSER (10 t√¢ches) :
0. [ID: 3eedc900-7f3b-4257-a7c4-e975dc550a40] Effectuer le suivi des stocks de mat√©riel m√©dical
   - Assign√© √†: √âmilie

1. [ID: 59bfd784-9e47-4820-bf2c-5d282b118165] Organiser la formation du personnel sur les nouvelles proc√©dures
   - Assign√© √†: Le√Øla

2. [ID: dcd2c427-85a0-42dc-ab70-3f0626ace471] Mettre √† jour le syst√®me de prise de rendez-vous
   - Assign√© √†: Parmis

3. [ID: 020dcf06-c7c9-46ef-858e-25282d7c2b55] R√©viser les protocoles de nettoyage et d√©sinfection
   - Assign√© √†: √âmilie

4. [ID: 4bb2c6c2-adf1-4633-ab7e-7779be92c6d9] Coordonner avec les fournisseurs pour les commandes urgentes
   - Assign√© √†: Le√Øla

5. [ID: eb1e518e-0e00-44bf-8fb4-3e57451c6f9f] Optimiser l'accueil et l'orientation des patients
   - Assign√© √†: Parmis

6. [ID: ba0bda6e-1b30-4ae3-92ec-592bfe380e26] Planifier la maintenance pr√©ventive des √©quipements
   - Assign√© √†: √âmilie

7. [ID: bebd1289-ad9b-4fc1-8cdc-216d08468855] Analyser la satisfaction patient et proposer des am√©liorations
   - Assign√© √†: Le√Øla

8. [ID: d380d446-dba2-4f35-8d5f-028f5b8f67ef] G√©rer les relations avec les laboratoires partenaires
   - Assign√© √†: Parmis

9. [ID: a1c9d7f8-63e2-44d2-90d3-d6b2b445f835] Mettre en place un syst√®me de rappel automatique pour les patients
   - Assign√© √†: √âmilie

IMPORTANT : 
- Traite TOUTES les t√¢ches (indices 0 √† 9)
- Sois EXTR√äMEMENT D√âTAILL√â dans chaque recommandation
- D√©veloppe tous les aspects pertinents en profondeur

R√©ponds UNIQUEMENT en JSON avec cette structure EXACTE :
{
  "recommendations": [
    {
      "taskIndex": 0,
      "taskId": "uuid-de-la-tache",
      "hasRecommendation": true,
      "recommendation": "Recommandation ici...",
      "emailDraft": "Email pr√©-r√©dig√© COMPLET et D√âTAILL√â (optionnel mais fortement recommand√©)"
    },
    {
      "taskIndex": 1,
      "taskId": "uuid-de-la-tache",
      "hasRecommendation": true,
      "recommendation": "Recommandation D√âTAILL√âE pour la t√¢che 2...",
      "emailDraft": null
    }
  ]
}

ASSURE-TOI d'inclure TOUTES les 10 t√¢ches dans ta r√©ponse avec des recommandations TR√àS D√âTAILL√âES.`,
      
      tasks: [
        {
          index: 0,
          id: "3eedc900-7f3b-4257-a7c4-e975dc550a40",
          description: "Effectuer le suivi des stocks de mat√©riel m√©dical",
          assigned_to: "√âmilie"
        },
        {
          index: 1,
          id: "59bfd784-9e47-4820-bf2c-5d282b118165", 
          description: "Organiser la formation du personnel sur les nouvelles proc√©dures",
          assigned_to: "Le√Øla"
        },
        {
          index: 2,
          id: "dcd2c427-85a0-42dc-ab70-3f0626ace471",
          description: "Mettre √† jour le syst√®me de prise de rendez-vous", 
          assigned_to: "Parmis"
        },
        {
          index: 3,
          id: "020dcf06-c7c9-46ef-858e-25282d7c2b55",
          description: "R√©viser les protocoles de nettoyage et d√©sinfection",
          assigned_to: "√âmilie"
        },
        {
          index: 4,
          id: "4bb2c6c2-adf1-4633-ab7e-7779be92c6d9",
          description: "Coordonner avec les fournisseurs pour les commandes urgentes",
          assigned_to: "Le√Øla"
        },
        {
          index: 5,
          id: "eb1e518e-0e00-44bf-8fb4-3e57451c6f9f",
          description: "Optimiser l'accueil et l'orientation des patients",
          assigned_to: "Parmis"
        },
        {
          index: 6,
          id: "ba0bda6e-1b30-4ae3-92ec-592bfe380e26",
          description: "Planifier la maintenance pr√©ventive des √©quipements",
          assigned_to: "√âmilie"
        },
        {
          index: 7,
          id: "bebd1289-ad9b-4fc1-8cdc-216d08468855",
          description: "Analyser la satisfaction patient et proposer des am√©liorations",
          assigned_to: "Le√Øla"
        },
        {
          index: 8,
          id: "d380d446-dba2-4f35-8d5f-028f5b8f67ef",
          description: "G√©rer les relations avec les laboratoires partenaires",
          assigned_to: "Parmis"
        },
        {
          index: 9,
          id: "a1c9d7f8-63e2-44d2-90d3-d6b2b445f835",
          description: "Mettre en place un syst√®me de rappel automatique pour les patients",
          assigned_to: "√âmilie"
        }
      ],
      transcript: "R√©union hebdomadaire concernant l'organisation du cabinet, la gestion des stocks de mat√©riel m√©dical, et la coordination des rendez-vous patients. Discussion sur les nouvelles proc√©dures administratives et les am√©liorations √† apporter au service client.",
      meetingContext: {
        title: "R√©union hebdomadaire du cabinet Dr Tabibian",
        date: "2025-06-17T12:00:00.000Z",
        participants: "√âmilie, Le√Øla, Parmis"
      }
    };

    console.log('üì§ Envoi de la requ√™te √† task-recommendation-agent...');
    console.log(`üìä Nombre de t√¢ches: ${testPayload.tasks.length}`);
    console.log(`üìù Taille du prompt: ${testPayload.batchPrompt.length} caract√®res`);
    console.log();

    const startTime = Date.now();
    
    const response = await fetch(FUNCTION_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      },
      body: JSON.stringify(testPayload)
    });

    const duration = Date.now() - startTime;
    console.log(`‚è±Ô∏è Dur√©e de la requ√™te: ${duration}ms`);
    console.log(`üì° Status HTTP: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur HTTP:', response.status, response.statusText);
      console.error('‚ùå D√©tails:', errorText);
      return;
    }

    const result = await response.json();
    console.log('\nüì• R√âPONSE RE√áUE:');
    console.log('=' .repeat(50));
    
    if (result.error) {
      console.error('‚ùå Erreur dans la r√©ponse:', result.error);
      return;
    }

    if (result.success && result.recommendation) {
      console.log('‚úÖ R√©ponse re√ßue avec succ√®s');
      
      const recommendations = result.recommendation.recommendations;
      if (recommendations && Array.isArray(recommendations)) {
        console.log(`üìä Nombre de recommandations re√ßues: ${recommendations.length}`);
        console.log();
        
        // Analyser chaque recommandation
        for (let i = 0; i < recommendations.length; i++) {
          const rec = recommendations[i];
          console.log(`üìã RECOMMANDATION ${i + 1}/10:`);
          console.log(`   Task ID: ${rec.taskId}`);
          console.log(`   Task Index: ${rec.taskIndex}`);
          console.log(`   Has Recommendation: ${rec.hasRecommendation}`);
          
          if (rec.recommendation) {
            const recLength = rec.recommendation.length;
            console.log(`   Recommandation (${recLength} chars): ${rec.recommendation.substring(0, 100)}...`);
          }
          
          if (rec.emailDraft) {
            const emailLength = rec.emailDraft.length;
            console.log(`   Email Draft (${emailLength} chars): ${rec.emailDraft.substring(0, 100)}...`);
          }
          console.log();
        }
        
        // V√©rifications de qualit√©
        console.log('üîç V√âRIFICATIONS DE QUALIT√â:');
        console.log('=' .repeat(50));
        
        const allTasksProcessed = recommendations.length === 10;
        console.log(`‚úÖ Toutes les t√¢ches trait√©es: ${allTasksProcessed ? 'OUI' : 'NON'}`);
        
        const allHaveRecommendations = recommendations.every(r => r.hasRecommendation);
        console.log(`‚úÖ Toutes ont des recommandations: ${allHaveRecommendations ? 'OUI' : 'NON'}`);
        
        const avgRecommendationLength = recommendations
          .map(r => r.recommendation?.length || 0)
          .reduce((a, b) => a + b, 0) / recommendations.length;
        console.log(`üìè Longueur moyenne recommandations: ${Math.round(avgRecommendationLength)} chars`);
        
        const emailDraftsCount = recommendations.filter(r => r.emailDraft).length;
        console.log(`üìß Nombre d'emails pr√©-r√©dig√©s: ${emailDraftsCount}/10`);
        
        // Afficher une recommandation compl√®te en exemple
        if (recommendations.length > 0) {
          console.log('\nüìÑ EXEMPLE DE RECOMMANDATION COMPL√àTE:');
          console.log('=' .repeat(50));
          const firstRec = recommendations[0];
          console.log('T√¢che:', testPayload.tasks[0].description);
          console.log('Recommandation:');
          console.log(firstRec.recommendation);
          if (firstRec.emailDraft) {
            console.log('\nEmail pr√©-r√©dig√©:');
            console.log(firstRec.emailDraft);
          }
        }

      } else {
        console.error('‚ùå Format de r√©ponse inattendu - pas de tableau de recommandations');
        console.log('Structure re√ßue:', JSON.stringify(result, null, 2));
      }
    } else {
      console.error('‚ùå R√©ponse sans succ√®s ou recommandation');
      console.log('R√©ponse compl√®te:', JSON.stringify(result, null, 2));
    }

  } catch (error) {
    console.error('‚ùå ERREUR DURANT LE TEST:', error);
    console.error('Stack trace:', error.stack);
  }
  
  console.log('\nüèÅ FIN DU TEST MANUEL');
  console.log('=' .repeat(60));
}

// Ex√©cution du test
testTaskRecommendationAgent();
