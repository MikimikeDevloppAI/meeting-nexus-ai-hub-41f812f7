import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Max-Age': '86400',
};

// Import services from local files
async function createSupabaseClient() {
  const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
  return createClient(supabaseUrl, supabaseServiceKey);
}

async function callOpenAI(prompt: string, openAIKey: string, temperature: number = 0.3, model: string = 'gpt-4.1-2025-04-14', maxRetries: number = 3, maxTokens?: number) {
  console.log('üîÑ Making OpenAI API call...')
  console.log('ü§ñ Using model:', model)
  console.log('üìè Prompt length:', prompt.length, 'characters')
  console.log('üîÅ Max retries:', maxRetries)
  
  // D√©finir max_tokens selon le mod√®le si non sp√©cifi√©
  const defaultMaxTokens = maxTokens || (model.includes('gpt-4.1') ? 16384 : 4096);
  console.log('üéØ Max tokens:', defaultMaxTokens)
  
  let lastError: Error | null = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üì° Attempt ${attempt}/${maxRetries} - Making request to OpenAI...`);
      
      const isNewModel = /gpt-5.*|gpt-4\.1.*|o4.*|o3.*/.test(model);
      const payload: any = {
        model,
        messages: [{ role: 'user', content: prompt }],
      };
      
      // Only add temperature for older models
      if (!isNewModel && temperature !== null && temperature !== undefined) {
        payload.temperature = temperature;
        console.log('üå°Ô∏è Adding temperature:', temperature, 'to older model');
      } else if (isNewModel) {
        console.log('üå°Ô∏è Skipping temperature for newer model:', model);
      }
      
      if (isNewModel) {
        // Newer models require 'max_completion_tokens'
        payload.max_completion_tokens = defaultMaxTokens;
      } else {
        payload.max_tokens = defaultMaxTokens;
      }

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      console.log(`üì° OpenAI response status (attempt ${attempt}):`, response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå OpenAI API error response (attempt ${attempt}):`, errorText);
        
        // Si c'est une erreur 4xx (client error), ne pas retry
        if (response.status >= 400 && response.status < 500) {
          throw new Error(`OpenAI API client error: ${response.status} - ${errorText}`);
        }
        
        // Pour les erreurs 5xx (server error), continuer √† retry
        throw new Error(`OpenAI API server error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      const result = data.choices[0]?.message?.content;
      
      if (!result) {
        throw new Error('OpenAI API returned empty response');
      }
      
      console.log('‚úÖ OpenAI API call successful');
      console.log('üìè Response length:', result.length, 'characters');
      
      return result;
      
    } catch (error) {
      lastError = error as Error;
      console.error(`‚ùå OpenAI API call failed (attempt ${attempt}/${maxRetries}):`, error);
      
      // Si c'est une erreur client (4xx), ne pas retry
      if (error.message.includes('client error')) {
        throw error;
      }
      
      // Si c'est le dernier essai, throw l'erreur
      if (attempt === maxRetries) {
        console.error(`‚ùå All ${maxRetries} attempts failed. Final error:`, error);
        throw error;
      }
      
      // Attendre avant le prochain essai (backoff exponentiel)
      const waitTime = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s...
      console.log(`‚è≥ Waiting ${waitTime}ms before retry ${attempt + 1}...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }
  
  // Ne devrait jamais arriver, mais au cas o√π
  throw lastError || new Error('Unknown error during OpenAI API calls');
}

async function processTasksWithRecommendations(
  cleanedTranscript: string, 
  meetingData: any,
  users: any[]
) {
  if (!cleanedTranscript || cleanedTranscript.trim().length === 0) {
    console.log('‚ö° [UNIFIED-TODO-SERVICE] Aucun transcript √† traiter');
    return { processed: 0, successful: 0, failed: 0, fullyCompleted: true };
  }

  console.log(`‚ö° [UNIFIED-TODO-SERVICE] D√âBUT g√©n√©ration UNIFI√âE todos + recommandations avec GPT-4.1`);
  console.log(`üë• [UNIFIED-TODO-SERVICE] Users fournis pour assignation:`, users?.map(p => ({ id: p.id, name: p.name, email: p.email })));
  
  const supabaseClient = await createSupabaseClient();
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openaiApiKey) {
    throw new Error('OpenAI API key not configured');
  }

  try {
    const userNames = users?.map(p => p.name).join(', ') || '';

    // R√©cup√©rer TOUS les todos existants (non termin√©s) pour √©viter les doublons
    console.log('üìã [UNIFIED-TODO-SERVICE] R√©cup√©ration de tous les todos existants...');
    const { data: allUsers, error: usersError } = await supabaseClient
      .from('users')
      .select('*')
      .order('name');

    if (usersError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error fetching all users:', usersError);
      throw usersError;
    }

    const { data: existingTodos, error: todosError } = await supabaseClient
      .from('todos')
      .select(`
        id,
        description,
        status,
        created_at,
        todo_users(
          user_id,
          users(name)
        )
      `)
      .neq('status', 'completed')
      .order('created_at', { ascending: false });

    if (todosError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error fetching existing todos:', todosError);
    }

    const existingTodosContext = existingTodos?.map(todo => ({
      id: todo.id,
      description: todo.description,
      status: todo.status,
      assignedUsers: todo.todo_users?.map(tu => tu.users?.name).filter(Boolean) || []
    })) || [];

    console.log(`üìã [UNIFIED-TODO-SERVICE] ${existingTodosContext.length} todos existants trouv√©s pour √©viter doublons`);

    const allUserNames = allUsers?.map(u => u.name).join(', ') || '';
    const meetingUserNames = users?.map(p => p.name).join(', ') || '';

    // Prompt unifi√© avec descriptions plus concises et contexte des todos existants
    const unifiedPrompt = `Bas√© sur ce transcript de r√©union, identifie et REGROUPE INTELLIGEMMENT toutes les t√¢ches, actions et suivis par SUJETS COH√âRENTS pour √©viter les doublons. Privil√©gie le regroupement pour minimiser le nombre de t√¢ches.

TOUS LES UTILISATEURS SYST√àME : ${allUserNames}
PARTICIPANTS √Ä CETTE R√âUNION : ${meetingUserNames}

**TODOS EXISTANTS √Ä CONSID√âRER (√©viter doublons) :**
${existingTodosContext.length > 0 ? existingTodosContext.map(todo => 
  `- ID: ${todo.id} | ${todo.description} (${todo.status}) | Assign√©: ${todo.assignedUsers.join(', ') || 'Non assign√©'}`
).join('\n') : 'Aucun todo existant'}

**ACTIONS POSSIBLES:**
- "action": "create" - Cr√©er une nouvelle t√¢che
- "action": "update" - Mettre √† jour une t√¢che existante (fournir existing_todo_id)
- "action": "link" - Lier cette r√©union √† une t√¢che existante (fournir existing_todo_id)
- "action": "skip" - Ne rien faire (t√¢che d√©j√† suffisamment couverte)

**R√àGLES DE REGROUPEMENT OBLIGATOIRES:**
- Regroupe toutes les actions li√©es au M√äME SUJET/FOURNISSEUR/OUTIL en UNE SEULE t√¢che
- Une t√¢che = un sujet principal avec un contexte CONCIS et ACTIONNABLE
- √âvite absolument les doublons (ex: "contacter X" et "appeler X" = 1 seule t√¢che)
- Regroupe les actions s√©quentielles (ex: "demander devis" + "comparer prix" + "n√©gocier" = 1 t√¢che compl√®te)
- Privil√©gie les macro-t√¢ches sur les micro-actions
- V√âRIFIE d'abord si une t√¢che similaire existe d√©j√† avant de cr√©er

**R√àGLES DE DESCRIPTION CONCISE:**
- description concise mais qui donne le contexte n√©cessaire pour la compr√©hension
- Utilise un verbe d'action clair (Contacter, Organiser, V√©rifier, Finaliser, etc.)
- Format: "Action + Objet + Contexte "

**R√àGLES D'ASSIGNATION √âTENDUES:**
- Tu peux assigner √† N'IMPORTE QUEL utilisateur du syst√®me (liste compl√®te ci-dessus)
- PRIVIL√âGIE les participants √† cette r√©union : ${meetingUserNames}
- Variantes accept√©es pour correspondance :
  ‚Ä¢ Le√Øla / leila / Leila
  ‚Ä¢ √âmilie / emilie / Emilie  
  ‚Ä¢ David / david / David Tabibian / Tabibian
  ‚Ä¢ Parmice / parmice / Parmis
  ‚Ä¢ Sybil / sybil
- Si une personne dit "je vais faire X" ‚Üí assigne √† cette personne
- Si plusieurs personnes impliqu√©es ‚Üí assigne √† la personne principale
- Si aucune assignation claire, laisse "assigned_to" √† null

**R√àGLES POUR LES RECOMMANDATIONS IA:**
Pour chaque t√¢che, g√©n√®re:
1. **Recommandation d√©taill√©e** qui propose un plan d'ex√©cution, signale les points d'attention, sugg√®re des prestataires/outils, ou challenge les d√©cisions si pertinent.
2. **Email pr√©-r√©dig√© COMPLET** si communication interne est n√©cessaire: direct et concis et si une communication externe est n√©cessaire professionnel avec tout le contexte et tr√®s d√©taill√©s.
3. Si la t√¢che est simple/√©vidente, marque hasRecommendation: false avec "Aucune recommandation n√©cessaire."

Crit√®res qualit√© pour les recommandations:
- Concis, structur√©, actionnable
- Valeur ajout√©e r√©elle pour le cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve
- Pas d'invention de contacts
- √âviter banalit√©s

CONTEXTE R√âUNION:
- Titre: ${meetingData.title || 'R√©union'}
- Date: ${meetingData.created_at || new Date().toISOString()}
- Utilisateurs PR√âSENTS: ${userNames}

Transcript :
${cleanedTranscript}

IMPORTANT: Retourne UNIQUEMENT un JSON valide avec cette structure exacte :
{
  "tasks": [
    {
      "action": "create|update|link|skip",
      "existing_todo_id": "UUID existant si action update/link",
      "description": "Action concise et claire avec contexte ",
      "assigned_to": ["Nom exact de l'utilisateur tel qu'il appara√Æt dans la liste"] ou null,
      "due_date": "YYYY-MM-DD ou YYYY-MM-DDTHH:MM:SSZ si √©ch√©ance mentionn√©e, sinon null",
      "hasRecommendation": true/false,
      "recommendation": "Recommandation d√©taill√©e ou 'Aucune recommandation n√©cessaire.'",
      "emailDraft": "Email COMPLET (optionnel)" ou null
    }
  ]
}

**R√àGLES POUR LES DATES D'√âCH√âANCE:**
- Si une date ou d√©lai est mentionn√© dans la discussion ("dans 2 semaines", "avant le 15", "d'ici vendredi", "urgent"), calcule la date d'√©ch√©ance correspondante
- Utilise le format ISO standard : YYYY-MM-DDTHH:MM:SSZ pour les dates avec heure, ou YYYY-MM-DD pour les dates simples
- Date de r√©f√©rence : ${new Date().toISOString().split('T')[0]} (aujourd'hui)
- Si aucune √©ch√©ance n'est mentionn√©e, laisse due_date √† null
- Exemples de calculs :
  * "dans 2 semaines" ‚Üí ajouter 14 jours √† aujourd'hui
  * "avant vendredi" ‚Üí calculer le prochain vendredi
  * "fin du mois" ‚Üí dernier jour du mois actuel
  * "urgent" ‚Üí dans 2-3 jours selon le contexte`;

    console.log(`üöÄ [UNIFIED-TODO-SERVICE] Traitement UNIFI√â avec GPT-4.1`);
    
    const callStartTime = Date.now();
    console.log('üöÄ [DEBUG] Trying GPT-4o model for better stability...');
    const unifiedResponse = await callOpenAI(unifiedPrompt, openaiApiKey, 0.3, 'gpt-4o', 3, 4096);
    const callDuration = Date.now() - callStartTime;
    
    console.log(`‚è±Ô∏è [UNIFIED-TODO-SERVICE] Appel unifi√© termin√© (${callDuration}ms)`);

    // Parser la r√©ponse
    let tasksWithRecommendations = [];
    try {
      console.log('üìÑ [UNIFIED-TODO-SERVICE] Raw response length:', unifiedResponse?.length || 0);
      
      // Nettoyer la r√©ponse avant de parser
      const cleanedResponse = unifiedResponse.trim()
        .replace(/^```json\s*/i, '')
        .replace(/^```\s*/i, '')
        .replace(/\s*```\s*$/i, '');
      
      const parsedData = JSON.parse(cleanedResponse);
      tasksWithRecommendations = parsedData.tasks || [];
      console.log(`üìã [UNIFIED-TODO-SERVICE] Parsed ${tasksWithRecommendations.length} tasks avec recommandations`);
    } catch (parseError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error parsing JSON:', parseError);
      console.log('üìÑ [UNIFIED-TODO-SERVICE] Raw response:', unifiedResponse);
      throw new Error('Failed to parse unified response');
    }

    // Sauvegarder les t√¢ches ET les recommandations simultan√©ment
    let totalSuccessful = 0;
    let totalFailed = 0;
    let savedTasks = [];

    console.log(`üíæ [UNIFIED-TODO-SERVICE] Sauvegarde de ${tasksWithRecommendations.length} t√¢ches avec recommandations`);

    for (let i = 0; i < tasksWithRecommendations.length; i++) {
      const taskData = tasksWithRecommendations[i];
      try {
        console.log(`üíæ [UNIFIED-TODO-SERVICE] Sauvegarde t√¢che ${i+1}/${tasksWithRecommendations.length}: ${taskData.description}`);
        
        // 1. G√©rer selon l'action demand√©e
        const savedTask = await saveTaskUnified(supabaseClient, taskData, meetingData.id, users, allUsers);
        
        if (savedTask) {
          savedTasks.push(savedTask);
          
          // 2. Cr√©er la recommandation imm√©diatement apr√®s
          if (taskData.hasRecommendation !== false && taskData.recommendation) {
            const { error: recError } = await supabaseClient
              .from('todo_ai_recommendations')
              .insert({
                todo_id: savedTask.id,
                recommendation_text: taskData.recommendation,
                email_draft: taskData.emailDraft || null
              });
            
            if (recError) {
              console.error(`‚ùå [UNIFIED-TODO-SERVICE] Erreur sauvegarde recommandation pour t√¢che ${savedTask.id}:`, recError);
            } else {
              console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Recommandation sauvegard√©e pour t√¢che ${savedTask.id}`);
            }
          }
          
          // 3. Marquer comme trait√©
          await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', savedTask.id);
          
          totalSuccessful++;
          console.log(`‚úÖ [UNIFIED-TODO-SERVICE] T√¢che ${i+1} sauvegard√©e avec succ√®s avec ID: ${savedTask.id}`);
        }
        
      } catch (error) {
        console.error(`‚ùå [UNIFIED-TODO-SERVICE] Erreur sauvegarde t√¢che ${i+1}:`, error);
        totalFailed++;
      }
    }
    
    console.log(`üèÅ [UNIFIED-TODO-SERVICE] Traitement unifi√© termin√©: ${totalSuccessful} succ√®s, ${totalFailed} √©checs sur ${tasksWithRecommendations.length} t√¢ches`);
    
    return {
      processed: tasksWithRecommendations.length,
      successful: totalSuccessful,
      failed: totalFailed,
      fullyCompleted: true,
      savedTasks: savedTasks,
      unified: true,
      model: 'gpt-4.1-2025-04-14'
    };
    
  } catch (error) {
    console.error('‚ùå [UNIFIED-TODO-SERVICE] Erreur g√©n√©rale:', error);
    return { 
      processed: 0, 
      successful: 0, 
      failed: 0,
      fullyCompleted: false,
      error: error.message,
      unified: true
    };
  }
}

// Fonction pour sauvegarder une t√¢che selon l'action demand√©e
async function saveTaskUnified(supabaseClient: any, task: any, meetingId: string, meetingUsers: any[], allUsers: any[]) {
  console.log('üíæ Processing unified task action:', task.action, '|', task.description);
  console.log('üë• Participants de la r√©union:', meetingUsers?.map(p => ({ id: p.id, name: p.name })));
  console.log('üë• Tous les utilisateurs syst√®me:', allUsers?.map(u => ({ id: u.id, name: u.name })));
  
  try {
    // Skip action - ne rien faire
    if (task.action === 'skip') {
      console.log('‚è≠Ô∏è [UNIFIED-TODO-SERVICE] Action SKIP - pas de sauvegarde');
      return null;
    }

    // Fonction pour nettoyer les descriptions
    const makeDescriptionConcise = (description: string): string => {
      if (!description) return '';
      let cleaned = description.trim();
      const sentences = cleaned.split(/[.!?]+/).filter(s => s.trim().length > 0);
      let result = sentences.join('. ').trim();
      if (result && !result.endsWith('.')) {
        result += '.';
      }
      return result;
    };

    // Fonction pour trouver l'utilisateur dans TOUS les utilisateurs du syst√®me
    const findBestUserMatch = (searchName: string, allUsers: any[]): any | null => {
      if (!searchName || !allUsers?.length) return null;

      console.log(`üîç [UNIFIED-TODO-SERVICE] Recherche "${searchName}" parmi TOUS les utilisateurs syst√®me`);

      const normalizeUserName = (name: string): string => {
        return name
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .trim();
      };

      const getNameVariants = (searchName: string): string[] => {
        const normalized = normalizeUserName(searchName);
        
        const nameMapping: Record<string, string[]> = {
          'leila': ['le√Øla', 'leila'],
          'emilie': ['√©milie', 'emilie'],
          'david': ['david', 'david tabibian', 'tabibian'],
          'parmice': ['parmice', 'parmis'],
          'sybil': ['sybil'],
          'tabibian': ['tabibian', 'dr tabibian', 'docteur tabibian', 'david tabibian']
        };
        
        for (const [key, variants] of Object.entries(nameMapping)) {
          if (variants.some(variant => normalizeUserName(variant) === normalized)) {
            return variants;
          }
        }
        
        return [searchName];
      };

      const variants = getNameVariants(searchName);
      console.log(`üîÑ [UNIFIED-TODO-SERVICE] Variantes test√©es:`, variants);
      
      for (const variant of variants) {
        const normalizedVariant = normalizeUserName(variant);
        
        for (const user of allUsers) {
          const normalizedUserName = normalizeUserName(user.name);
          const normalizedEmail = normalizeUserName(user.email?.split('@')[0] || '');
          
          if (normalizedUserName === normalizedVariant || 
              normalizedEmail === normalizedVariant ||
              normalizedUserName.includes(normalizedVariant) ||
              normalizedVariant.includes(normalizedUserName)) {
            console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Correspondance trouv√©e: ${user.name}`);
            return user;
          }
        }
      }
      
      const firstName = normalizeUserName(searchName.split(' ')[0]);
      for (const user of allUsers) {
        const userFirstName = normalizeUserName(user.name.split(' ')[0]);
        if (userFirstName === firstName) {
          console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Correspondance par pr√©nom: ${user.name}`);
          return user;
        }
      }
      
      console.log(`‚ö†Ô∏è [UNIFIED-TODO-SERVICE] Aucune correspondance trouv√©e pour "${searchName}"`);
      return null;
    };

    let savedTask;

    // Traiter selon l'action
    if (task.action === 'create') {
      console.log('üÜï [UNIFIED-TODO-SERVICE] CREATE nouvelle t√¢che');
      
      const conciseDescription = makeDescriptionConcise(task.description);
      console.log('üìù Description concise:', conciseDescription);

      // Cr√©er la nouvelle t√¢che sans meeting_id
      const { data: newTask, error } = await supabaseClient
        .from('todos')
        .insert([{
          description: conciseDescription,
          status: 'confirmed',
          due_date: task.due_date || null
        }])
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creating new task:', error);
        throw error;
      }

      savedTask = newTask;
      console.log('‚úÖ Nouvelle t√¢che cr√©√©e avec ID:', savedTask.id);

      // Cr√©er le lien avec la r√©union
      const { error: linkError } = await supabaseClient
        .from('todo_meetings')
        .insert([{
          todo_id: savedTask.id,
          meeting_id: meetingId
        }]);

      if (linkError) {
        console.error('‚ùå Error linking task to meeting:', linkError);
      } else {
        console.log('‚úÖ T√¢che li√©e √† la r√©union:', meetingId);
      }

    } else if (task.action === 'update' && task.existing_todo_id) {
      console.log('üîÑ [UNIFIED-TODO-SERVICE] UPDATE t√¢che existante:', task.existing_todo_id);
      
      const conciseDescription = makeDescriptionConcise(task.description);
      
      // Mettre √† jour la t√¢che existante
      const { data: updatedTask, error } = await supabaseClient
        .from('todos')
        .update({
          description: conciseDescription,
          due_date: task.due_date || null
        })
        .eq('id', task.existing_todo_id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error updating existing task:', error);
        throw error;
      }

      savedTask = updatedTask;
      console.log('‚úÖ T√¢che mise √† jour:', savedTask.id);

      // Cr√©er le lien avec cette r√©union (si pas d√©j√† existant)
      const { error: linkError } = await supabaseClient
        .from('todo_meetings')
        .insert([{
          todo_id: savedTask.id,
          meeting_id: meetingId
        }])
        .select();

      if (linkError && !linkError.message?.includes('duplicate')) {
        console.error('‚ùå Error linking updated task to meeting:', linkError);
      } else {
        console.log('‚úÖ T√¢che mise √† jour li√©e √† la r√©union:', meetingId);
      }

    } else if (task.action === 'link' && task.existing_todo_id) {
      console.log('üîó [UNIFIED-TODO-SERVICE] LINK t√¢che existante √† cette r√©union:', task.existing_todo_id);
      
      // R√©cup√©rer la t√¢che existante
      const { data: existingTask, error } = await supabaseClient
        .from('todos')
        .select('*')
        .eq('id', task.existing_todo_id)
        .single();

      if (error || !existingTask) {
        console.error('‚ùå Error fetching existing task:', error);
        throw new Error('Task not found');
      }

      savedTask = existingTask;
      console.log('‚úÖ T√¢che existante r√©cup√©r√©e:', savedTask.id);

      // Cr√©er le lien avec cette r√©union
      const { error: linkError } = await supabaseClient
        .from('todo_meetings')
        .insert([{
          todo_id: savedTask.id,
          meeting_id: meetingId
        }]);

      if (linkError && !linkError.message?.includes('duplicate')) {
        console.error('‚ùå Error linking existing task to meeting:', linkError);
      } else {
        console.log('‚úÖ T√¢che existante li√©e √† la r√©union:', meetingId);
      }

    } else {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Action non reconnue ou missing existing_todo_id:', task.action);
      throw new Error('Invalid action or missing existing_todo_id');
    }

    // Traiter les assignations avec TOUS les utilisateurs du syst√®me
    if (task.assigned_to && Array.isArray(task.assigned_to) && task.assigned_to.length > 0) {
      console.log('üë• [UNIFIED-TODO-SERVICE] Assignation demand√©e pour:', task.assigned_to);
      
      for (const userName of task.assigned_to) {
        if (!userName || typeof userName !== 'string') continue;
        
        // Chercher parmi TOUS les utilisateurs du syst√®me
        const user = findBestUserMatch(userName.toString(), allUsers || []);
        
        if (user) {
          // V√©rifier si l'assignation existe d√©j√†
          const { data: existingAssignment } = await supabaseClient
            .from('todo_users')
            .select('id')
            .eq('todo_id', savedTask.id)
            .eq('user_id', user.id)
            .single();

          if (!existingAssignment) {
            const { error: assignError } = await supabaseClient
              .from('todo_users')
              .insert([{
                todo_id: savedTask.id,
                user_id: user.id
              }]);
            
            if (assignError) {
              console.error('‚ùå [UNIFIED-TODO-SERVICE] Error assigning user:', assignError);
            } else {
              console.log('‚úÖ [UNIFIED-TODO-SERVICE] User assign√©:', user.name, 'to task:', savedTask.id);
            }
          } else {
            console.log('‚ÑπÔ∏è [UNIFIED-TODO-SERVICE] User d√©j√† assign√©:', user.name);
          }
        } else {
          console.warn(`‚ö†Ô∏è [UNIFIED-TODO-SERVICE] User "${userName}" non trouv√© dans le syst√®me`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è [UNIFIED-TODO-SERVICE] Pas de users √† assigner pour cette t√¢che');
    }

    return savedTask;
  } catch (error) {
    console.error('‚ùå [UNIFIED-TODO-SERVICE] Error in saveTaskUnified:', error);
    throw error;
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { meetingId } = await req.json();
    
    if (!meetingId) {
      return new Response(
        JSON.stringify({ error: 'Meeting ID is required' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const openAIKey = Deno.env.get('OPENAI_API_KEY')!;

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    console.log('üîç [DEBUG] Fetching meeting data for:', meetingId);

    // Fetch meeting data
    const { data: meetingData, error: meetingError } = await supabase
      .from('meetings')
      .select('*')
      .eq('id', meetingId)
      .single();

    if (meetingError || !meetingData) {
      console.error('‚ùå [DEBUG] Meeting not found:', meetingError);
      return new Response(
        JSON.stringify({ error: 'Meeting not found' }), 
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (!meetingData.transcript) {
      console.error('‚ùå [DEBUG] No transcript found for meeting');
      return new Response(
        JSON.stringify({ error: 'No transcript found for this meeting' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('‚úÖ [DEBUG] Meeting data fetched:', meetingData.title);

    // Fetch participants
    const { data: participants, error: participantsError } = await supabase
      .from('meeting_users')
      .select(`
        user_id,
        users!inner (
          id,
          name,
          email
        )
      `)
      .eq('meeting_id', meetingId);

    if (participantsError) {
      console.error('‚ùå [DEBUG] Error fetching participants:', participantsError);
      return new Response(
        JSON.stringify({ error: 'Failed to fetch participants' }), 
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const allUsers = participants?.map(p => p.users).filter(Boolean) || [];
    console.log('üë• [DEBUG] Participants fetched:', allUsers.length);

    // Debug process todos with new unified logic
    console.log('üöÄ [DEBUG] Using new unified todo processing logic...');
    const result = await processTasksWithRecommendations(
      meetingData.transcript,
      meetingData,
      allUsers
    );

    return new Response(
      JSON.stringify({ 
        success: true, 
        meetingTitle: meetingData.title,
        participantsCount: allUsers.length,
        result 
      }), 
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('‚ùå [DEBUG] Fatal error:', error);
    return new Response(
      JSON.stringify({ error: error.message }), 
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});