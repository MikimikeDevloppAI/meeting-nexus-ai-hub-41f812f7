
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { meetingId, userMessage, conversationHistory } = await req.json();
    
    console.log('[MEETING-ASSISTANT] ü§ñ Traitement demande:', userMessage);
    console.log('[MEETING-ASSISTANT] üÜî Meeting ID:', meetingId);
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      console.error('[MEETING-ASSISTANT] ‚ùå OpenAI API key non configur√©e');
      throw new Error('OpenAI API key not configured');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // R√©cup√©rer le contexte complet de la r√©union
    console.log('[MEETING-ASSISTANT] üìã R√©cup√©ration contexte r√©union...');
    
    const { data: meeting, error: meetingError } = await supabase
      .from('meetings')
      .select('*')
      .eq('id', meetingId)
      .single();

    if (meetingError) {
      console.error('[MEETING-ASSISTANT] ‚ùå Erreur r√©cup√©ration r√©union:', meetingError);
      throw meetingError;
    }

    console.log('[MEETING-ASSISTANT] ‚úÖ R√©union trouv√©e:', meeting.title);

    const { data: todos, error: todosError } = await supabase
      .from('todos')
      .select(`
        *,
        participants(name),
        todo_participants(
          participant_id,
          participants(id, name, email)
        ),
        todo_ai_recommendations(*),
        todo_comments(*)
      `)
      .eq('meeting_id', meetingId)
      .eq('status', 'confirmed');

    if (todosError) {
      console.error('[MEETING-ASSISTANT] ‚ùå Erreur r√©cup√©ration todos:', todosError);
      throw todosError;
    }

    console.log('[MEETING-ASSISTANT] ‚úÖ Todos trouv√©es:', todos.length);

    const { data: participants, error: participantsError } = await supabase
      .from('meeting_participants')
      .select('participants(*)')
      .eq('meeting_id', meetingId);

    if (participantsError) {
      console.error('[MEETING-ASSISTANT] ‚ùå Erreur r√©cup√©ration participants:', participantsError);
      throw participantsError;
    }

    console.log('[MEETING-ASSISTANT] ‚úÖ Participants trouv√©s:', participants.length);

    // Construire le contexte pour l'IA
    const meetingContext = {
      title: meeting.title,
      date: meeting.created_at,
      summary: meeting.summary || 'Pas de r√©sum√© disponible',
      transcript: meeting.transcript || 'Pas de transcript disponible',
      participants: participants.map(p => p.participants.name).join(', '),
      todos: todos.map(todo => ({
        id: todo.id,
        description: todo.description,
        assignedTo: todo.todo_participants?.map(tp => tp.participants.name).join(', ') || 'Non assign√©',
        recommendation: todo.todo_ai_recommendations?.[0]?.recommendation_text || 'Aucune',
        emailDraft: todo.todo_ai_recommendations?.[0]?.email_draft || null,
        comments: todo.todo_comments?.map(c => c.comment).join('\n') || 'Aucun commentaire'
      }))
    };

    console.log('[MEETING-ASSISTANT] üß† Pr√©paration prompt pour GPT-4...');

    const systemPrompt = `Tu es l'assistant IA du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve, sp√©cialis√© dans la gestion des r√©unions. Tu dois fournir des r√©ponses TR√àS D√âTAILL√âES et COMPL√àTES.

INSTRUCTIONS IMPORTANTES :
- Sois EXTR√äMEMENT D√âTAILL√â dans tes r√©ponses et analyses
- D√©veloppe tous les aspects pertinents de la demande
- Fournis des explications approfondies et structur√©es
- Propose des actions concr√®tes avec des justifications d√©taill√©es
- Structure tes r√©ponses de mani√®re claire et exhaustive
- N'h√©site pas √† donner des informations contextuelles suppl√©mentaires
- Sois pr√©cis et professionnel tout en √©tant exhaustif

CONTEXTE R√âUNION ACTUELLE :
Titre: ${meetingContext.title}
Date: ${new Date(meetingContext.date).toLocaleDateString('fr-FR')}
Participants: ${meetingContext.participants}

R√âSUM√â ACTUEL :
${meetingContext.summary}

T√ÇCHES ACTUELLES (${meetingContext.todos.length}) :
${meetingContext.todos.map((todo, i) => `
${i+1}. [ID: ${todo.id}] ${todo.description}
   - Assign√© √†: ${todo.assignedTo}
   - Recommandation: ${todo.recommendation}
   ${todo.emailDraft ? '   - Email pr√©-r√©dig√©: Disponible' : ''}
   - Commentaires: ${todo.comments}
`).join('')}

TRANSCRIPT (extrait) :
${meetingContext.transcript.substring(0, 2000)}...

HISTORIQUE CONVERSATION :
${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

CAPACIT√âS :
- Modifier/cr√©er/supprimer des t√¢ches
- Modifier/cr√©er des recommandations IA
- Modifier le r√©sum√© de r√©union
- R√©assigner des t√¢ches √† d'autres participants
- Cr√©er des emails pr√©-r√©dig√©s
- Analyser le contexte complet pour des suggestions pertinentes

INSTRUCTIONS IMPORTANTES :
1. Comprends la demande de l'utilisateur dans le contexte de cette r√©union avec une analyse D√âTAILL√âE
2. Propose des actions concr√®tes (cr√©er, modifier, supprimer) avec des justifications COMPL√àTES
3. Justifie tes propositions avec le contexte disponible de mani√®re EXHAUSTIVE
4. Sois pr√©cis sur les IDs des t√¢ches √† modifier
5. Adapte ton ton professionnel au contexte m√©dical
6. TOUJOURS fournir un retour TR√àS D√âTAILL√â sur les actions que tu vas effectuer
7. Explique clairement et EN D√âTAIL ce qui va √™tre modifi√©/cr√©√©/supprim√©
8. D√©veloppe tous les aspects pertinents de ta r√©ponse

IMPORTANT: Tu dois TOUJOURS r√©pondre de mani√®re conversationnelle TR√àS D√âTAILL√âE ET proposer des actions concr√®tes.
- Ne dis jamais "Je ne peux pas" - propose plut√¥t des alternatives D√âTAILL√âES
- Sois proactif dans tes suggestions EXHAUSTIVES
- Fournis des explications TR√àS claires et COMPL√àTES sur ce que tu vas faire

R√©ponds UNIQUEMENT en JSON avec cette structure exacte :
{
  "response": "ta r√©ponse conversationnelle TR√àS D√âTAILL√âE √† l'utilisateur, expliquant de mani√®re EXHAUSTIVE ce que tu vas faire et pourquoi",
  "actions": [
    {
      "type": "create_todo | update_todo | delete_todo | update_summary | create_recommendation | update_recommendation",
      "data": {},
      "explanation": "explication TR√àS D√âTAILL√âE de cette action sp√©cifique"
    }
  ],
  "needsConfirmation": false,
  "confirmationMessage": ""
}`;

    const messages = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory,
      { role: 'user', content: userMessage }
    ];

    console.log('[MEETING-ASSISTANT] üß† Appel OpenAI API...');
    console.log('[MEETING-ASSISTANT] üìä Messages √† envoyer:', messages.length);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages,
        temperature: 0.7,
        max_tokens: 16384,
      }),
    });

    console.log('[MEETING-ASSISTANT] üì° Statut r√©ponse OpenAI:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[MEETING-ASSISTANT] ‚ùå Erreur OpenAI API:', errorText);
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const aiData = await response.json();
    console.log('[MEETING-ASSISTANT] ‚úÖ R√©ponse OpenAI re√ßue');
    console.log('[MEETING-ASSISTANT] üìã Choix disponibles:', aiData.choices?.length || 0);

    let aiResponse;
    try {
      const aiContent = aiData.choices[0].message.content;
      console.log('[MEETING-ASSISTANT] üìù Contenu brut (premiers 300 chars):', aiContent.substring(0, 300) + '...');
      
      // Extraire le JSON de la r√©ponse
      const jsonMatch = aiContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        aiResponse = JSON.parse(jsonMatch[0]);
        console.log('[MEETING-ASSISTANT] ‚úÖ JSON pars√© avec succ√®s');
        
        // Validation de la r√©ponse
        if (!aiResponse.response) {
          console.error('[MEETING-ASSISTANT] ‚ùå R√©ponse manquante dans la structure JSON');
          throw new Error('R√©ponse manquante dans la structure JSON');
        }
        
        if (!Array.isArray(aiResponse.actions)) {
          console.log('[MEETING-ASSISTANT] ‚ö†Ô∏è Actions non d√©finies, initialisation tableau vide');
          aiResponse.actions = [];
        }
        
        console.log('[MEETING-ASSISTANT] üìä Actions d√©tect√©es:', aiResponse.actions.length);
        
      } else {
        console.error('[MEETING-ASSISTANT] ‚ùå Aucun JSON trouv√© dans la r√©ponse');
        console.log('[MEETING-ASSISTANT] üìÑ Contenu complet:', aiContent);
        // Fallback: traiter comme r√©ponse conversationnelle simple
        aiResponse = {
          response: aiContent.trim() || "Je comprends votre demande, mais j'ai rencontr√© un probl√®me technique. Pouvez-vous la reformuler plus pr√©cis√©ment ?",
          actions: [],
          needsConfirmation: false
        };
      }
    } catch (parseError) {
      console.error('[MEETING-ASSISTANT] ‚ùå Erreur parsing JSON:', parseError);
      console.log('[MEETING-ASSISTANT] üìÑ Contenu qui a caus√© l\'erreur:', aiData.choices[0]?.message?.content || 'Aucun contenu');
      aiResponse = {
        response: "Je comprends votre demande, mais j'ai rencontr√© un probl√®me technique lors du traitement. Pouvez-vous reformuler votre demande de mani√®re plus pr√©cise ? Par exemple : 'Ajoute une t√¢che pour...' ou 'Modifie le r√©sum√© pour inclure...'",
        actions: [],
        needsConfirmation: false
      };
    }

    console.log('[MEETING-ASSISTANT] ‚úÖ R√©ponse finale pr√©par√©e:', {
      hasResponse: !!aiResponse.response,
      responseLength: aiResponse.response?.length || 0,
      actionsCount: aiResponse.actions?.length || 0,
      needsConfirmation: aiResponse.needsConfirmation,
    });

    const finalResponse = {
      response: aiResponse.response,
      actions: aiResponse.actions || [],
      needsConfirmation: aiResponse.needsConfirmation || false,
      confirmationMessage: aiResponse.confirmationMessage || "",
      meetingContext: {
        todosCount: meetingContext.todos.length,
        hasTranscript: !!meetingContext.transcript,
        hasSummary: !!meetingContext.summary
      }
    };

    console.log('[MEETING-ASSISTANT] üöÄ Envoi r√©ponse finale');

    return new Response(JSON.stringify(finalResponse), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[MEETING-ASSISTANT] ‚ùå ERREUR GLOBALE:', error);
    console.error('[MEETING-ASSISTANT] üìç Stack trace:', error.stack);
    
    const errorResponse = { 
      error: error.message,
      response: "Une erreur s'est produite lors du traitement de votre demande. D√©tails de l'erreur: " + error.message + ". Veuillez r√©essayer dans quelques instants.",
      actions: []
    };
    
    console.log('[MEETING-ASSISTANT] üì§ Envoi r√©ponse d\'erreur:', errorResponse);
    
    return new Response(JSON.stringify(errorResponse), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
