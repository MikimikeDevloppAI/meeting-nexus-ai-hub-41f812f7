
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { meetingId, userMessage, conversationHistory, coordinatorContext } = await req.json();
    
    console.log('[RECOMMENDATIONS-AGENT] üí° Traitement recommandations pour:', userMessage);
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // R√©cup√©rer les t√¢ches avec leurs recommandations
    const { data: todos, error: todosError } = await supabase
      .from('todos')
      .select(`
        *,
        todo_participants(
          participant_id,
          participants(id, name, email)
        ),
        todo_ai_recommendations(*)
      `)
      .eq('meeting_id', meetingId)
      .eq('status', 'confirmed');

    if (todosError) {
      throw todosError;
    }

    console.log('[RECOMMENDATIONS-AGENT] ‚úÖ T√¢ches avec recommandations:', todos.length);

    const systemPrompt = `Tu es un agent sp√©cialis√© dans la cr√©ation et gestion des recommandations IA pour les t√¢ches de r√©unions.

T√ÇCHES AVEC RECOMMANDATIONS :
${todos.map((todo, i) => `
${i+1}. [ID: ${todo.id}] ${todo.description}
   - Assign√© √†: ${todo.todo_participants?.map(tp => tp.participants.name).join(', ') || 'Non assign√©'}
   - Recommandation actuelle: ${todo.todo_ai_recommendations?.[0]?.recommendation_text || 'Aucune'}
   - Email pr√©-r√©dig√©: ${todo.todo_ai_recommendations?.[0]?.email_draft ? 'Oui' : 'Non'}
`).join('')}

DEMANDE UTILISATEUR : "${userMessage}"

CAPACIT√âS :
- Cr√©er des recommandations pour les t√¢ches
- Modifier des recommandations existantes
- G√©n√©rer des emails pr√©-r√©dig√©s
- Sugg√©rer des am√©liorations pour les t√¢ches

INSTRUCTIONS :
1. Analyse la demande concernant les recommandations
2. Identifie les t√¢ches concern√©es
3. Cr√©e des recommandations pertinentes et actionables
4. G√©n√®re des emails professionnels si demand√©
5. Sois sp√©cifique et pratique dans tes recommandations

R√©ponds UNIQUEMENT en JSON avec cette structure :
{
  "actions": [
    {
      "type": "create_recommendation | update_recommendation",
      "data": {
        "todo_id": "uuid",
        "recommendation": "texte de la recommandation",
        "email_draft": "email pr√©-r√©dig√© (optionnel)"
      },
      "explanation": "explication d√©taill√©e"
    }
  ],
  "summary": "r√©sum√© des actions effectu√©es"
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userMessage }
        ],
        temperature: 0.7,
        max_tokens: 1500,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const aiData = await response.json();
    let aiResponse;

    try {
      const content = aiData.choices[0].message.content;
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        aiResponse = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No JSON found in response');
      }
    } catch (parseError) {
      console.error('[RECOMMENDATIONS-AGENT] ‚ùå Erreur parsing:', parseError);
      aiResponse = {
        actions: [],
        summary: "Impossible de traiter la demande concernant les recommandations."
      };
    }

    // Ex√©cuter les actions
    const executedActions = [];
    
    for (const action of aiResponse.actions || []) {
      try {
        switch (action.type) {
          case 'create_recommendation':
            const { error: createError } = await supabase
              .from('todo_ai_recommendations')
              .insert({
                todo_id: action.data.todo_id,
                recommendation_text: action.data.recommendation,
                email_draft: action.data.email_draft || null
              });
            
            if (createError) throw createError;
            
            executedActions.push({
              ...action,
              success: true,
              result: "Recommandation cr√©√©e"
            });
            break;
            
          case 'update_recommendation':
            const { error: updateError } = await supabase
              .from('todo_ai_recommendations')
              .update({
                recommendation_text: action.data.recommendation,
                email_draft: action.data.email_draft || null,
                updated_at: new Date().toISOString()
              })
              .eq('todo_id', action.data.todo_id);
            
            if (updateError) throw updateError;
            
            executedActions.push({
              ...action,
              success: true,
              result: "Recommandation mise √† jour"
            });
            break;
        }
      } catch (error) {
        console.error(`[RECOMMENDATIONS-AGENT] ‚ùå Erreur action ${action.type}:`, error);
        executedActions.push({
          ...action,
          success: false,
          error: error.message
        });
      }
    }

    console.log('[RECOMMENDATIONS-AGENT] ‚úÖ Actions termin√©es:', executedActions.length);

    return new Response(JSON.stringify({
      actions: executedActions,
      summary: aiResponse.summary,
      success: true
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[RECOMMENDATIONS-AGENT] ‚ùå ERREUR:', error);
    
    return new Response(JSON.stringify({
      error: error.message,
      actions: [],
      summary: "Erreur lors du traitement des recommandations",
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
