
export async function generateEnrichmentQuestions(
  todoDescription: string,
  userContext: string,
  openAIKey: string
): Promise<string[]> {
  console.log('ü§ñ G√©n√©ration des questions avec ChatGPT optimis√©');
  
  const prompt = `Tu es un assistant sp√©cialis√© pour un cabinet d'ophtalmologie √† Gen√®ve.

T√ÇCHE : "${todoDescription}"
CONTEXTE : "${userContext}"

G√©n√®re exactement 5 questions d'enrichissement SP√âCIFIQUES ET PRATIQUES pour optimiser une recherche commerciale.

Ces questions doivent √™tre :

1. **COMMERCIALES** - Focus sur fournisseurs, prix, conditions de vente
2. **G√âOGRAPHIQUES** - Pr√©f√©rence locale (Gen√®ve) vs internationale
3. **BUDG√âTAIRES** - Contraintes financi√®res et options de paiement
4. **TECHNIQUES** - Sp√©cifications requises pour un cabinet m√©dical
5. **TEMPORELLES** - Urgence, d√©lais, planning

EXEMPLES DE BONNES QUESTIONS :
- Quel est votre budget maximum pour cette acquisition ?
- Pr√©f√©rez-vous un fournisseur local genevois ou acceptez-vous l'international ?
- Avez-vous des contraintes d'installation ou d'espace sp√©cifiques ?
- Dans quel d√©lai cette solution doit-elle √™tre op√©rationnelle ?
- Souhaitez-vous inclure la maintenance ou la g√©rer s√©par√©ment ?

R√âPONSE : Uniquement les 5 questions, une par ligne, sans num√©rotation.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        { role: 'user', content: prompt }
      ],
      temperature: 0.3,
      max_tokens: 800,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Erreur ChatGPT g√©n√©ration questions:', response.status, errorText);
    throw new Error(`Erreur ChatGPT API: ${response.status}`);
  }

  const data = await response.json();
  const questionsText = data.choices?.[0]?.message?.content || '';
  const questions = questionsText.split('\n').filter(q => q.trim().length > 0).slice(0, 5);

  console.log('‚úÖ Questions g√©n√©r√©es par ChatGPT:', questions.length);
  return questions;
}

export async function rewriteUserContext(
  todoDescription: string,
  userContext: string,
  enrichmentAnswers: any[],
  openAIKey: string
): Promise<string> {
  console.log('ü§ñ R√©√©criture du contexte avec ChatGPT optimis√©');
  
  const enrichmentText = enrichmentAnswers.length > 0 
    ? '\n\nINFORMATIONS COMPL√âMENTAIRES:\n' + 
      enrichmentAnswers.map((answer: any, index: number) => 
        `‚Ä¢ ${answer.question}\n  ‚Üí ${answer.answer}`
      ).join('\n\n')
    : '';

  const prompt = `Tu optimises des contextes pour des recherches commerciales B2B.

T√ÇCHE ORIGINALE : "${todoDescription}"
CONTEXTE INITIAL : "${userContext}"${enrichmentText}

**MISSION :** R√©√©crire ce contexte pour maximiser l'efficacit√© d'une recherche Perplexity cibl√©e sur :

üéØ **FOURNISSEURS & DISTRIBUTEURS**
üéØ **INFORMATIONS COMMERCIALES** (prix, conditions, d√©lais)
üéØ **SOLUTIONS LOCALES** (Gen√®ve/Suisse prioritaire)
üéØ **SP√âCIFICATIONS TECHNIQUES**

**STRUCTURE OPTIMIS√âE :**

**CONTEXTE :** Cabinet d'ophtalmologie Dr Tabibian, Gen√®ve, Suisse

**BESOIN SP√âCIFIQUE :** [Reformuler clairement la demande]

**CRIT√àRES DE RECHERCHE :**
- Fournisseurs prioritaires : Gen√®ve ‚Üí Suisse ‚Üí Europe
- Budget : [indiquer si mentionn√©, sinon "√† d√©finir"]
- D√©lais : [indiquer si mentionn√©, sinon "flexible"]
- Contraintes techniques : [sp√©cifier pour usage m√©dical]

**MOTS-CL√âS COMMERCIAUX :** [Ajouter synonymes et termes techniques]

**R√âSULTATS ATTENDUS :** Coordonn√©es fournisseurs, tarifs, conditions, alternatives

√âcris un contexte enrichi et structur√© en fran√ßais, optimis√© pour une recherche commerciale efficace.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        { role: 'user', content: prompt }
      ],
      temperature: 0.2,
      max_tokens: 1500,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Erreur ChatGPT r√©√©criture contexte:', response.status, errorText);
    throw new Error(`Erreur ChatGPT API: ${response.status}`);
  }

  const data = await response.json();
  const rewrittenContext = data.choices?.[0]?.message?.content || userContext;

  console.log('‚úÖ Contexte r√©√©crit par ChatGPT:', rewrittenContext.length, 'caract√®res');
  return rewrittenContext;
}
