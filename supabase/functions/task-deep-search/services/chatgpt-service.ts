
export async function generateEnrichmentQuestions(
  todoDescription: string,
  userContext: string,
  openAIKey: string
): Promise<string[]> {
  console.log('ü§ñ G√©n√©ration des questions avec ChatGPT 4.1');
  
  const prompt = `Tu es un assistant sp√©cialis√© pour le cabinet d'ophtalmologie du Dr Tabibian √† Gen√®ve.

Une t√¢che a √©t√© cr√©√©e : "${todoDescription}"
L'utilisateur souhaite approfondir avec ce contexte : "${userContext}"

G√©n√®re exactement 4 questions d'enrichissement PRATIQUES ET FACILES √Ä R√âPONDRE qui permettront d'affiner la recherche. Ces questions doivent √™tre :

1. **SIMPLES et DIRECTES** - L'utilisateur ne doit pas faire de recherches pour r√©pondre
2. **PRATIQUES** - Focalis√©es sur les aspects op√©rationnels et budg√©taires
3. **SP√âCIFIQUES au contexte m√©dical/administratif** d'un cabinet d'ophtalmologie √† Gen√®ve
4. **ORIENT√âES ACTION** - Pour aider √† prendre des d√©cisions concr√®tes

Exemples de questions pertinentes :
- Quel est le budget approximatif disponible pour cette t√¢che ?
- Dans quel d√©lai cette t√¢che doit-elle √™tre r√©alis√©e ?
- Quelle est la priorit√© de cette t√¢che (urgente, importante, normale) ?
- Combien de temps pouvez-vous y consacrer par semaine ?
- Avez-vous des contraintes particuli√®res √† respecter ?
- Quel niveau de complexit√© acceptez-vous (simple, interm√©diaire, avanc√©) ?

Adapte ces exemples au contexte sp√©cifique de la t√¢che demand√©e.

Format ta r√©ponse UNIQUEMENT avec les 4 questions, une par ligne, sans num√©rotation ni formatage sp√©cial.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4.1-2025-04-14',
      messages: [
        { role: 'user', content: prompt }
      ],
      temperature: 0.3,
      max_tokens: 800,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Erreur ChatGPT g√©n√©ration questions:', response.status, errorText);
    throw new Error(`Erreur ChatGPT API: ${response.status}`);
  }

  const data = await response.json();
  const questionsText = data.choices?.[0]?.message?.content || '';
  const questions = questionsText.split('\n').filter(q => q.trim().length > 0).slice(0, 4);

  console.log('‚úÖ Questions g√©n√©r√©es par ChatGPT:', questions.length);
  return questions;
}

export async function rewriteUserContext(
  todoDescription: string,
  userContext: string,
  enrichmentAnswers: any[],
  openAIKey: string
): Promise<string> {
  console.log('ü§ñ R√©√©criture du contexte avec ChatGPT 4.1');
  
  const enrichmentText = enrichmentAnswers.length > 0 
    ? '\n\nR√âPONSES AUX QUESTIONS D\'ENRICHISSEMENT:\n' + 
      enrichmentAnswers.map((answer: any, index: number) => 
        `${index + 1}. ${answer.question}\nR√©ponse: ${answer.answer}`
      ).join('\n\n')
    : '';

  const prompt = `Tu es un assistant sp√©cialis√© pour le cabinet d'ophtalmologie du Dr Tabibian √† Gen√®ve.

Une t√¢che a √©t√© cr√©√©e : "${todoDescription}"
Contexte utilisateur original : "${userContext}"${enrichmentText}

Ton r√¥le est de r√©√©crire et structurer ce contexte pour optimiser la recherche qui va suivre avec Perplexity Sonar Pro.

R√©√©cris le contexte en :
1. **CLARIFIANT** les objectifs et enjeux de la t√¢che
2. **STRUCTURANT** l'information de mani√®re logique
3. **AJOUTANT** le contexte sp√©cifique du cabinet d'ophtalmologie genevois
4. **PR√âCISANT** les contraintes et attentes
5. **ORIENTANT** vers une recherche actionnable

Le contexte r√©√©crit doit permettre √† Sonar Pro de comprendre parfaitement :
- Quel est le probl√®me √† r√©soudre
- Dans quel contexte (cabinet m√©dical, Gen√®ve, Suisse)
- Quelles sont les contraintes pratiques
- Quel type de r√©ponse est attendu

√âcris un contexte enrichi et structur√© en fran√ßais, adapt√© pour une recherche efficace.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4.1-2025-04-14',
      messages: [
        { role: 'user', content: prompt }
      ],
      temperature: 0.2,
      max_tokens: 1500,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Erreur ChatGPT r√©√©criture contexte:', response.status, errorText);
    throw new Error(`Erreur ChatGPT API: ${response.status}`);
  }

  const data = await response.json();
  const rewrittenContext = data.choices?.[0]?.message?.content || userContext;

  console.log('‚úÖ Contexte r√©√©crit par ChatGPT:', rewrittenContext.length, 'caract√®res');
  return rewrittenContext;
}
