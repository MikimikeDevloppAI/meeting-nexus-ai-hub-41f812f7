
export async function generateEnrichmentQuestions(
  todoDescription: string,
  userContext: string,
  openAIKey: string
): Promise<string[]> {
  console.log('ü§ñ G√©n√©ration des questions d\'enrichissement polyvalentes');
  
  const prompt = `Tu es un assistant intelligent sp√©cialis√© dans l'optimisation de recherches web.

T√ÇCHE : "${todoDescription}"
CONTEXTE : "${userContext}"

G√©n√®re exactement 5 questions d'enrichissement SP√âCIFIQUES ET PRATIQUES pour optimiser une recherche web intelligente.

Adapte les questions selon le TYPE DE DEMANDE :

üéØ **PLAN D'ACTION** - Questions sur objectifs, √©tapes, ressources, d√©lais, contraintes
üîç **RECHERCHE SP√âCIALIS√âE** - Questions sur scope, crit√®res, sources, profondeur d'analyse
üõí **RECHERCHE COMMERCIALE** - Questions sur budget, fournisseurs, localisation, sp√©cifications
üìä **ANALYSE COMPARATIVE** - Questions sur crit√®res de comparaison, priorit√©s, alternatives
üí° **CONSEIL/RECOMMANDATION** - Questions sur contraintes, pr√©f√©rences, contexte d'usage

EXEMPLES DE BONNES QUESTIONS SELON LE TYPE :

**Plan d'action :**
- Quel est l'objectif principal √† atteindre et dans quel d√©lai ?
- Quelles sont vos ressources disponibles (budget, √©quipe, outils) ?
- Quelles contraintes ou limitations faut-il prendre en compte ?

**Recherche sp√©cialis√©e :**
- Quel niveau de d√©tail technique souhaitez-vous ?
- Y a-t-il des sources ou r√©f√©rences sp√©cifiques √† privil√©gier ?
- Dans quel contexte ces informations seront-elles utilis√©es ?

**Recherche commerciale :**
- Quel est votre budget maximum pour cette acquisition ?
- Pr√©f√©rez-vous des fournisseurs locaux ou acceptez-vous l'international ?
- Avez-vous des contraintes d'installation ou techniques sp√©cifiques ?

**Analyse comparative :**
- Quels sont vos crit√®res de choix prioritaires ?
- Y a-t-il des solutions que vous avez d√©j√† √©valu√©es ?
- Quels sont les facteurs d√©cisifs pour votre d√©cision ?

**Conseil/Recommandation :**
- Quel est votre niveau d'exp√©rience dans ce domaine ?
- Quelles sont vos pr√©f√©rences ou priorit√©s principales ?
- Y a-t-il des contraintes sp√©cifiques √† respecter ?

R√âPONSE : Uniquement les 5 questions, une par ligne, sans num√©rotation.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        { role: 'user', content: prompt }
      ],
      temperature: 0.4,
      max_tokens: 800,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Erreur ChatGPT g√©n√©ration questions:', response.status, errorText);
    throw new Error(`Erreur ChatGPT API: ${response.status}`);
  }

  const data = await response.json();
  const questionsText = data.choices?.[0]?.message?.content || '';
  const questions = questionsText.split('\n').filter(q => q.trim().length > 0).slice(0, 5);

  console.log('‚úÖ Questions g√©n√©r√©es par ChatGPT:', questions.length);
  return questions;
}

export async function rewriteUserContext(
  todoDescription: string,
  userContext: string,
  enrichmentAnswers: any[],
  openAIKey: string
): Promise<string> {
  console.log('ü§ñ R√©√©criture du contexte pour recherche web polyvalente');
  
  const enrichmentText = enrichmentAnswers.length > 0 
    ? '\n\nINFORMATIONS COMPL√âMENTAIRES:\n' + 
      enrichmentAnswers.map((answer: any, index: number) => 
        `‚Ä¢ ${answer.question}\n  ‚Üí ${answer.answer}`
      ).join('\n\n')
    : '';

  const prompt = `Tu optimises des contextes pour des recherches web intelligentes et polyvalentes.

T√ÇCHE ORIGINALE : "${todoDescription}"
CONTEXTE INITIAL : "${userContext}"${enrichmentText}

**MISSION :** R√©√©crire ce contexte pour maximiser l'efficacit√© d'une recherche web Jina AI cibl√©e.

**OBJECTIFS DE RECHERCHE WEB POSSIBLES :**

üéØ **PLAN D'ACTION** - M√©thodologies, √©tapes, ressources, timeline
üîç **RECHERCHE SP√âCIALIS√âE** - Informations techniques, analyses, √©tudes
üõí **SOLUTIONS COMMERCIALES** - Fournisseurs, produits, services, prix
üìä **ANALYSES COMPARATIVES** - Alternatives, benchmarks, √©valuations
üí° **RECOMMANDATIONS** - Meilleures pratiques, conseils d'experts
üìã **GUIDES PRATIQUES** - Tutoriels, proc√©dures, check-lists

**STRUCTURE OPTIMIS√âE POUR RECHERCHE WEB :**

**OBJECTIF PRINCIPAL :** [Reformuler clairement la demande]

**TYPE DE RECHERCHE :** [Plan d'action / Recherche sp√©cialis√©e / Solutions commerciales / etc.]

**CONTEXTE D'USAGE :** [Situation, environnement, contraintes]

**CRIT√àRES SP√âCIFIQUES :**
- Priorit√© g√©ographique : [si applicable]
- Budget/Ressources : [si mentionn√©]
- D√©lais/Timeline : [si mentionn√©]  
- Contraintes techniques : [si applicable]
- Niveau de d√©tail souhait√© : [selon le type]

**MOTS-CL√âS DE RECHERCHE :** [Termes principaux + synonymes techniques]

**R√âSULTATS ATTENDUS :** [Type d'informations, format, niveau de d√©tail]

√âcris un contexte enrichi et structur√© en fran√ßais, optimis√© pour une recherche web intelligente et polyvalente.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        { role: 'user', content: prompt }
      ],
      temperature: 0.3,
      max_tokens: 1500,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Erreur ChatGPT r√©√©criture contexte:', response.status, errorText);
    throw new Error(`Erreur ChatGPT API: ${response.status}`);
  }

  const data = await response.json();
  const rewrittenContext = data.choices?.[0]?.message?.content || userContext;

  console.log('‚úÖ Contexte r√©√©crit par ChatGPT:', rewrittenContext.length, 'caract√®res');
  return rewrittenContext;
}
