export async function generateEnrichmentQuestions(
  todoDescription: string,
  userContext: string,
  openAIKey: string
): Promise<string[]> {
  console.log('ü§ñ G√©n√©ration des questions d\'enrichissement pour le cabinet ophtalmologique');
  
  const prompt = `Tu es un assistant intelligent au service du cabinet ophtalmologique du Dr Tabibian √† Gen√®ve. Ton r√¥le est d'aider √† formuler 5 questions simples et claires pour mieux cadrer une recherche approfondie que l'utilisateur souhaite lancer. Ces questions doivent :

√ätre faciles √† comprendre et rapides √† r√©pondre

Aider √† mieux cibler la recherche en √©vitant des r√©sultats trop larges

√ätre adapt√©es √† un contexte administratif, logistique ou organisationnel

Se concentrer sur des √©l√©ments comme le budget, les d√©lais, les crit√®res de s√©lection, les besoins sp√©cifiques ou la r√©gion g√©ographique

Voici la t√¢che √† effectuer : ${todoDescription}
Voici les √©l√©ments de contexte ajout√©s par l'utilisateur : ${userContext}

G√©n√®re maintenant 5 questions claires et pertinentes √† poser √† l'utilisateur pour mieux cibler la recherche.

R√âPONSE : Uniquement les 5 questions, une par ligne, sans num√©rotation.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        { role: 'user', content: prompt }
      ],
      temperature: 0.4,
      max_tokens: 800,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Erreur ChatGPT g√©n√©ration questions:', response.status, errorText);
    throw new Error(`Erreur ChatGPT API: ${response.status}`);
  }

  const data = await response.json();
  const questionsText = data.choices?.[0]?.message?.content || '';
  const questions = questionsText.split('\n').filter(q => q.trim().length > 0).slice(0, 5);

  console.log('‚úÖ Questions g√©n√©r√©es par ChatGPT pour le cabinet ophtalmologique:', questions.length);
  return questions;
}

export async function rewriteUserContext(
  todoDescription: string,
  userContext: string,
  enrichmentAnswers: any[],
  openAIKey: string
): Promise<string> {
  console.log('ü§ñ R√©√©criture du contexte pour recherche web polyvalente');
  
  const enrichmentText = enrichmentAnswers.length > 0 
    ? '\n\nINFORMATIONS COMPL√âMENTAIRES:\n' + 
      enrichmentAnswers.map((answer: any, index: number) => 
        `‚Ä¢ ${answer.question}\n  ‚Üí ${answer.answer}`
      ).join('\n\n')
    : '';

  const prompt = `Tu optimises des contextes pour des recherches web intelligentes et polyvalentes.

T√ÇCHE ORIGINALE : "${todoDescription}"
CONTEXTE INITIAL : "${userContext}"${enrichmentText}

**MISSION :** R√©√©crire ce contexte pour maximiser l'efficacit√© d'une recherche web Jina AI cibl√©e.

**OBJECTIFS DE RECHERCHE WEB POSSIBLES :**

üéØ **PLAN D'ACTION** - M√©thodologies, √©tapes, ressources, timeline
üîç **RECHERCHE SP√âCIALIS√âE** - Informations techniques, analyses, √©tudes
üõí **SOLUTIONS COMMERCIALES** - Fournisseurs, produits, services, prix
üìä **ANALYSES COMPARATIVES** - Alternatives, benchmarks, √©valuations
üí° **RECOMMANDATIONS** - Meilleures pratiques, conseils d'experts
üìã **GUIDES PRATIQUES** - Tutoriels, proc√©dures, check-lists

**STRUCTURE OPTIMIS√âE POUR RECHERCHE WEB :**

**OBJECTIF PRINCIPAL :** [Reformuler clairement la demande]

**TYPE DE RECHERCHE :** [Plan d'action / Recherche sp√©cialis√©e / Solutions commerciales / etc.]

**CONTEXTE D'USAGE :** [Situation, environnement, contraintes]

**CRIT√àRES SP√âCIFIQUES :**
- Priorit√© g√©ographique : [si applicable]
- Budget/Ressources : [si mentionn√©]
- D√©lais/Timeline : [si mentionn√©]  
- Contraintes techniques : [si applicable]
- Niveau de d√©tail souhait√© : [selon le type]

**MOTS-CL√âS DE RECHERCHE :** [Termes principaux + synonymes techniques]

**R√âSULTATS ATTENDUS :** [Type d'informations, format, niveau de d√©tail]

√âcris un contexte enrichi et structur√© en fran√ßais, optimis√© pour une recherche web intelligente et polyvalente.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${openAIKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        { role: 'user', content: prompt }
      ],
      temperature: 0.3,
      max_tokens: 1500,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Erreur ChatGPT r√©√©criture contexte:', response.status, errorText);
    throw new Error(`Erreur ChatGPT API: ${response.status}`);
  }

  const data = await response.json();
  const rewrittenContext = data.choices?.[0]?.message?.content || userContext;

  console.log('‚úÖ Contexte r√©√©crit par ChatGPT:', rewrittenContext.length, 'caract√®res');
  return rewrittenContext;
}
