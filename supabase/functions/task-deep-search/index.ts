
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { todoId, userContext, todoDescription, enrichmentAnswers } = await req.json()
    
    if (!todoId || !userContext || !todoDescription) {
      return new Response(
        JSON.stringify({ error: 'Missing required parameters' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // V√©rifier que la cl√© API Perplexity est disponible
    const perplexityApiKey = Deno.env.get('PERPLEXITY_API_KEY');
    if (!perplexityApiKey) {
      console.error('‚ùå Missing PERPLEXITY_API_KEY environment variable');
      return new Response(
        JSON.stringify({ error: 'Configuration manquante: cl√© API Perplexity non trouv√©e' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Phase 1: G√©n√©rer des questions d'enrichissement (obligatoire maintenant)
    if (!enrichmentAnswers) {
      console.log('üîç Phase 1: G√©n√©ration des questions d\'enrichissement (obligatoire)');
      
      const questionsPrompt = `Tu es un assistant sp√©cialis√© pour le cabinet d'ophtalmologie du Dr Tabibian √† Gen√®ve.

Une t√¢che a √©t√© cr√©√©e suite √† une r√©union : "${todoDescription}"
L'utilisateur souhaite approfondir avec ce contexte : "${userContext}"

G√©n√®re des questions d'enrichissement PRATIQUES ET FACILES √Ä R√âPONDRE si n√©cessaire qui permettront d'affiner la recherche.Maximum 5 questions. Ces questions doivent √™tre :

1. **SIMPLES et DIRECTES** - L'utilisateur ne doit pas faire de recherches pour r√©pondre
2. **PRATIQUES** - Focalis√©es sur les aspects op√©rationnels (budget, d√©lai, priorit√©, contraintes)
3. **SP√âCIFIQUES au contexte m√©dical/administratif** d'un cabinet d'ophtalmologie √† Gen√®ve
4. **ORIENT√âES ACTION** - Pour aider √† prendre des d√©cisions concr√®tes

Exemples de bonnes questions :
- Quel est le budget approximatif disponible pour cette action ?
- Dans quel d√©lai cette t√¢che doit-elle √™tre r√©alis√©e ?
- Y a-t-il des contraintes particuli√®res √† respecter (r√©glementaires, logistiques, etc.) ?
- Quelle est la priorit√© de cette t√¢che par rapport aux autres projets du cabinet ?
- Qui sera responsable de la mise en ≈ìuvre de cette solution ?

Adapte ces exemples au contexte sp√©cifique de la t√¢che demand√©e.

Format ta r√©ponse UNIQUEMENT avec les 4 questions, une par ligne, sans num√©rotation ni formatage sp√©cial.`;

      const questionsResponse = await fetch('https://api.perplexity.ai/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${perplexityApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'sonar-pro',
          messages: [
            {
              role: 'user',
              content: questionsPrompt
            }
          ],
          temperature: 0.2,
          max_tokens: 600,
          top_p: 0.9,
          return_images: false,
          return_related_questions: false,
          search_recency_filter: 'month'
        })
      });

      if (!questionsResponse.ok) {
        console.error('‚ùå Erreur g√©n√©ration questions:', questionsResponse.status);
        return new Response(
          JSON.stringify({ error: 'Erreur lors de la g√©n√©ration des questions' }),
          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      const questionsData = await questionsResponse.json();
      const questionsText = questionsData.choices?.[0]?.message?.content || '';
      const questions = questionsText.split('\n').filter(q => q.trim().length > 0).slice(0, 4);

      console.log('‚úÖ Questions g√©n√©r√©es:', questions.length);
      
      return new Response(
        JSON.stringify({ 
          success: true, 
          phase: 'questions',
          questions: questions
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200 
        }
      );
    }

    // Phase 2: Recherche finale avec contexte enrichi
    console.log('üîç Phase 2: Recherche finale avec Sonar Pro');
    
    let enrichedContext = userContext;
    if (enrichmentAnswers && enrichmentAnswers.length > 0) {
      enrichedContext += '\n\nR√âPONSES AUX QUESTIONS D\'ENRICHISSEMENT:\n';
      enrichedContext += enrichmentAnswers.map((answer: any, index: number) => 
        `${index + 1}. ${answer.question}\nR√©ponse: ${answer.answer}`
      ).join('\n\n');
    }

    // Prompt optimis√© pour Sonar Pro
    const searchQuery = `Tu es un assistant intelligent sp√©cialis√© dans les recherches approfondies pour le cabinet d'ophtalmologie du Dr Tabibian, situ√© √† Gen√®ve.

Tu aides principalement le personnel administratif √† accomplir des t√¢ches non m√©dicales. Une nouvelle t√¢che a √©t√© g√©n√©r√©e suite √† une r√©union :

**T√¢che :** ${todoDescription}
**Contexte d√©taill√© :** ${enrichedContext}

INSTRUCTIONS IMPORTANTES POUR LA R√âPONSE :
- Structure ta r√©ponse de mani√®re tr√®s claire avec des titres, sous-titres et bullet points
- √âvite absolument les r√©p√©titions d'informations
- Organise le contenu en sections logiques avec des paragraphes distincts
- Utilise des listes √† puces pour les √©l√©ments multiples (avantages, inconv√©nients, √©tapes, etc.)
- Pr√©sente les comparaisons sous forme de tableaux quand c'est appropri√©
- Num√©rote les √©tapes d'action de mani√®re claire
- S√©pare visuellement les diff√©rentes sections de ta r√©ponse

Effectue une recherche approfondie, orient√©e vers l'action, et fournis :

## 1. INFORMATIONS PRATIQUES
‚Ä¢ Des informations fiables et directement exploitables
‚Ä¢ Des d√©tails sp√©cifiques au contexte genevois/suisse si pertinent

## 2. ANALYSE COMPARATIVE (si applicable)
‚Ä¢ Tableau comparatif des options disponibles
‚Ä¢ Avantages et inconv√©nients clairement list√©s
‚Ä¢ Informations sur les prix, d√©lais, qualit√©

## 3. PLAN D'ACTION STRUCTUR√â
‚Ä¢ √âtapes num√©rot√©es et chronologiques
‚Ä¢ Responsabilit√©s et √©ch√©ances sugg√©r√©es
‚Ä¢ Points de contr√¥le et validations n√©cessaires

## 4. RECOMMANDATIONS SP√âCIFIQUES
‚Ä¢ Adapt√©es au fonctionnement d'un cabinet m√©dical √† Gen√®ve
‚Ä¢ Prise en compte de la r√©glementation locale
‚Ä¢ Suggestions de prestataires locaux fiables

Format ta r√©ponse de mani√®re professionnelle, a√©r√©e et facilement scannable pour une lecture rapide et efficace.`;

    console.log('üöÄ Envoi de la recherche finale avec Sonar Pro');

    // Appel √† l'API Perplexity avec le mod√®le sonar-pro
    const perplexityResponse = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${perplexityApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'sonar-pro',
        messages: [
          {
            role: 'user',
            content: searchQuery
          }
        ],
        temperature: 0.2,
        max_tokens: 4000,
        top_p: 0.9,
        return_images: false,
        return_related_questions: false,
        search_recency_filter: 'month'
      })
    });

    console.log('üì° Sonar Pro API response status:', perplexityResponse.status);

    if (!perplexityResponse.ok) {
      const errorText = await perplexityResponse.text();
      console.error('‚ùå Sonar Pro API error:', perplexityResponse.status, perplexityResponse.statusText);
      console.error('‚ùå Error details:', errorText);
      
      return new Response(
        JSON.stringify({ 
          error: `Erreur API Perplexity: ${perplexityResponse.status} ${perplexityResponse.statusText}`,
          details: errorText
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    const perplexityData = await perplexityResponse.json()
    console.log('üìä Sonar Pro response structure:', Object.keys(perplexityData));
    
    const searchResult = perplexityData.choices?.[0]?.message?.content || 'Aucun r√©sultat trouv√©'
    
    // Extraire les sources/citations de la r√©ponse Perplexity
    const sources = perplexityData.citations || perplexityData.sources || []
    
    console.log('‚úÖ Recherche Sonar Pro termin√©e avec succ√®s')
    console.log('üìö Sources trouv√©es:', sources.length)
    console.log('üìù R√©sultat longueur:', searchResult.length, 'caract√®res');

    // Sauvegarder dans Supabase
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const authHeader = req.headers.get('Authorization')
    if (authHeader) {
      const token = authHeader.replace('Bearer ', '')
      const { data: { user } } = await supabaseClient.auth.getUser(token)
      
      if (user) {
        const { error: insertError } = await supabaseClient
          .from('task_deep_searches')
          .insert({
            todo_id: todoId,
            user_context: enrichedContext,
            search_query: searchQuery,
            search_result: searchResult,
            sources: sources,
            created_by: user.id
          })

        if (insertError) {
          console.error('‚ùå Error saving search result:', insertError)
        } else {
          console.log('üíæ Search result saved successfully')
        }
      }
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        phase: 'result',
        result: searchResult,
        sources: sources,
        query: searchQuery
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )

  } catch (error) {
    console.error('‚ùå Deep search error:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Erreur lors de la recherche deep search',
        details: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})
