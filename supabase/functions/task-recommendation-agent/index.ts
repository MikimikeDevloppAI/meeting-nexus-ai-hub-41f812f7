
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { task, transcript, meetingContext, participants } = await req.json();
    console.log('[TASK-AGENT] üéØ Analyse intelligente:', task.description.substring(0, 50));

    const openaiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Prompt modifi√© pour garantir la g√©n√©ration syst√©matique de recommandations
    const prompt = `Tu es un assistant IA sp√©cialis√© pour un cabinet d'ophtalmologie √† Gen√®ve dirig√© par le Dr Tabibian.

T√ÇCHE √Ä ANALYSER: "${task.description}"

CONTEXTE R√âUNION:
- Titre: ${meetingContext.title}
- Date: ${meetingContext.date}
- Participants: ${meetingContext.participants}

PARTICIPANTS DISPONIBLES: ${participants.map(p => p.name).join(', ')}

üîç **OBLIGATION : Tu DOIS syst√©matiquement g√©n√©rer une recommandation utile pour CHAQUE t√¢che, sans exception.**

**Pour chaque t√¢che, tu dois OBLIGATOIREMENT :**
1. Donner des **tips pratiques ou des alertes** sur ce √† quoi il faut faire attention (technique, administratif, juridique, logistique‚Ä¶).
2. Proposer des **options ou choix concrets**, avec leurs avantages/inconv√©nients (ex. : deux types de fontaines √† eau, ou trois options de bureaux ergonomiques).
3. Sugg√©rer des **outils num√©riques, prestataires ou int√©grations utiles** (ex. : plugin Outlook, service de r√©servation, site pour commander‚Ä¶).
4. Alerter sur les **risques ou oublis fr√©quents** li√©s √† cette t√¢che, m√™me s'ils ne sont pas explicitement mentionn√©s.
5. √ätre **bref, structur√© et pertinent**, en apportant toujours une valeur ajout√©e.

üìß **EMAILS PR√â-R√âDIG√âS** (g√©n√©ration syst√©matique si pertinent) :

**EMAILS INTERNES** (√©quipe cabinet) :
- Contexte minimal, droit au but
- Ton familier mais professionnel
- Instructions claires et directes
- Format court et actionnable

**EMAILS EXTERNES** (fournisseurs, partenaires, patients) :
- Contexte complet et pr√©cis
- Ton formel et professionnel
- Pr√©sentation du cabinet et du contexte
- Demandes d√©taill√©es et structur√©es
- Formules de politesse appropri√©es

CONTEXTE CABINET : Cabinet d'ophtalmologie Dr Tabibian, Gen√®ve, √©quipements sp√©cialis√©s (OCT, campim√®tre, lampe √† fente), fournisseurs courants (Zeiss, Heidelberg, Topcon, Haag-Streit), normes suisses (LAMal, Swissmedic).

R√àGLES STRICTES :
- Tu DOIS TOUJOURS g√©n√©rer une recommandation, m√™me pour les t√¢ches qui semblent simples
- Chaque recommandation doit apporter une valeur ajout√©e concr√®te
- Si la t√¢che semble √©vidente, trouve des angles d'optimisation, de pr√©vention ou d'am√©lioration
- G√©n√®re un email pr√©-r√©dig√© d√®s que cela peut faciliter la communication
- JAMAIS de r√©ponse vide ou sans recommandation

TRANSCRIPT DE LA R√âUNION (pour contexte suppl√©mentaire si n√©cessaire) :
"${transcript}"

RETOURNE UNIQUEMENT ce JSON :
{
  "hasRecommendation": true,
  "recommendation": "conseils pratiques d√©taill√©s OBLIGATOIRES",
  "estimatedCost": "estimation OU null",
  "contacts": [{"name": "string", "phone": "string", "email": "string", "website": "string", "address": "string"}],
  "needsEmail": boolean,
  "emailDraft": "email format√© selon type (interne/externe) OU null",
  "valueAddedReason": "pourquoi cette recommandation apporte de la valeur OBLIGATOIRE"
}`;

    console.log('[TASK-AGENT] üß† Appel OpenAI avec prompt renforc√©...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o', // Chang√© de gpt-4o-mini √† gpt-4o
        messages: [
          {
            role: 'system',
            content: `Tu es un expert en gestion de cabinet m√©dical sp√©cialis√© en ophtalmologie. 

OBJECTIF PRINCIPAL : G√©n√©rer OBLIGATOIREMENT des recommandations utiles et actionables pour CHAQUE t√¢che, sans exception.

CRIT√àRES STRICTS POUR RECOMMANDATIONS :
- TOUJOURS apporter une valeur ajout√©e mesurable
- Conseils PRATIQUES et ACTIONABLES
- Expertise sp√©cialis√©e ophtalmologie/Suisse
- Insights professionnels bas√©s sur l'exp√©rience
- JAMAIS de r√©ponse vide ou g√©n√©rique

R√àGLE ABSOLUE : Chaque t√¢che doit recevoir une recommandation personnalis√©e, m√™me si elle semble simple.

Pour emails internes, utilise ce format direct :

Objet: [Sujet clair]

Bonjour [Nom/√âquipe],

[Message direct avec points clairs]

- Point 1
- Point 2
- Action attendue avec d√©lai

Merci.

Dr. Tabibian

Pour emails externes, utilise ce format professionnel :

Objet: [Sujet d√©taill√©]

Madame, Monsieur,

Je vous contacte au nom du Cabinet d'Ophtalmologie Dr Tabibian √† Gen√®ve concernant [contexte d√©taill√©].

[Description pr√©cise de la demande avec contexte]

Dans l'attente de votre retour, je vous prie d'agr√©er mes salutations distingu√©es.

Dr. Tabibian
Cabinet d'Ophtalmologie - Gen√®ve
[coordonn√©es si pertinent]`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.5, // Chang√© de 0.5 √† 0.5 (d√©j√† correct)
        max_tokens: 2000,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content?.trim();

    console.log('[TASK-AGENT] ‚úÖ R√©ponse OpenAI re√ßue');

    // Parsing JSON robuste avec validation renforc√©e
    let recommendation;
    try {
      // Nettoyer le contenu
      let cleanContent = content;
      
      // Retirer les blocs markdown
      cleanContent = cleanContent.replace(/```json\s*/g, '').replace(/```\s*/g, '');
      
      // Chercher le JSON
      const jsonMatch = cleanContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        cleanContent = jsonMatch[0];
      }
      
      recommendation = JSON.parse(cleanContent);
      
      // Validation stricte et for√ßage de g√©n√©ration
      if (!recommendation.hasRecommendation || !recommendation.recommendation || recommendation.recommendation.trim().length < 10) {
        console.log('[TASK-AGENT] ‚ö†Ô∏è For√ßage OBLIGATOIRE de g√©n√©ration de recommandation');
        recommendation.hasRecommendation = true;
        
        // G√©n√©rer une recommandation basique mais utile selon le type de t√¢che
        const taskLower = task.description.toLowerCase();
        let fallbackRecommendation = "";
        
        if (taskLower.includes('acheter') || taskLower.includes('commander') || taskLower.includes('√©quipement')) {
          fallbackRecommendation = "üí° **Points d'attention pour cet achat :**\n\n‚Ä¢ V√©rifier la compatibilit√© avec les √©quipements existants\n‚Ä¢ Comparer au moins 3 devis de fournisseurs\n‚Ä¢ Pr√©voir les co√ªts de maintenance et formation\n‚Ä¢ V√©rifier les d√©lais de livraison et garanties\n‚Ä¢ S'assurer de la conformit√© aux normes suisses";
        } else if (taskLower.includes('contacter') || taskLower.includes('appeler') || taskLower.includes('email')) {
          fallbackRecommendation = "üìû **Optimisation de la communication :**\n\n‚Ä¢ Pr√©parer les points cl√©s √† aborder avant l'appel\n‚Ä¢ Documenter les √©changes dans le CRM\n‚Ä¢ Pr√©voir un suivi avec d√©lai d√©fini\n‚Ä¢ Avoir les r√©f√©rences du cabinet √† port√©e de main\n‚Ä¢ Confirmer par email les accords verbaux";
        } else if (taskLower.includes('organiser') || taskLower.includes('planifier') || taskLower.includes('r√©union')) {
          fallbackRecommendation = "üìÖ **Bonnes pratiques d'organisation :**\n\n‚Ä¢ D√©finir un agenda pr√©cis avec cr√©neaux horaires\n‚Ä¢ Envoyer les invitations 48h √† l'avance minimum\n‚Ä¢ Pr√©parer les documents n√©cessaires en amont\n‚Ä¢ Pr√©voir une salle adapt√©e au nombre de participants\n‚Ä¢ Planifier un r√©capitulatif post-r√©union";
        } else {
          fallbackRecommendation = `üéØ **Recommandations pour optimiser cette t√¢che :**\n\n‚Ä¢ D√©finir des √©tapes claires et un planning\n‚Ä¢ Identifier les ressources n√©cessaires\n‚Ä¢ Pr√©voir des points de contr√¥le interm√©diaires\n‚Ä¢ Documenter le processus pour les fois suivantes\n‚Ä¢ √âvaluer les risques potentiels et solutions de contournement`;
        }
        
        recommendation.recommendation = fallbackRecommendation;
        recommendation.valueAddedReason = "Structuration et optimisation syst√©matique de la t√¢che pour √©viter les oublis et am√©liorer l'efficacit√©.";
      }

      // Forcer hasRecommendation √† true
      recommendation.hasRecommendation = true;

      // V√©rifier que valueAddedReason existe
      if (!recommendation.valueAddedReason || recommendation.valueAddedReason.trim().length < 5) {
        recommendation.valueAddedReason = "Optimisation et s√©curisation du processus avec expertise m√©tier sp√©cialis√©e.";
      }

      // Nettoyer et formater l'email si pr√©sent
      if (recommendation.needsEmail && recommendation.emailDraft) {
        let emailContent = recommendation.emailDraft;
        
        // Remplacer les \\n par de vrais retours √† la ligne
        emailContent = emailContent.replace(/\\n/g, '\n');
        
        // S'assurer qu'il y a des retours √† la ligne entre les sections
        emailContent = emailContent.replace(/([.!?])\s*([A-Z][a-z])/g, '$1\n\n$2');
        
        // Nettoyer les espaces multiples
        emailContent = emailContent.replace(/\n\s*\n\s*\n/g, '\n\n');
        
        recommendation.emailDraft = emailContent.trim();
      }
      
    } catch (parseError) {
      console.error('[TASK-AGENT] ‚ùå Erreur parsing, g√©n√©ration recommandation de secours:', parseError);
      
      // Recommandation de secours OBLIGATOIRE
      recommendation = {
        hasRecommendation: true,
        recommendation: `üîß **Recommandations g√©n√©rales pour : "${task.description}"**\n\n‚Ä¢ Documenter les √©tapes cl√©s de r√©alisation\n‚Ä¢ Identifier les intervenants et responsabilit√©s\n‚Ä¢ D√©finir un d√©lai r√©aliste avec marge de s√©curit√©\n‚Ä¢ Pr√©voir un point de validation interm√©diaire\n‚Ä¢ Capitaliser sur cette exp√©rience pour les prochaines fois`,
        estimatedCost: null,
        contacts: [],
        needsEmail: false,
        emailDraft: null,
        valueAddedReason: "Approche m√©thodique et professionnelle pour assurer le succ√®s de la t√¢che et √©viter les √©cueils courants."
      };
    }

    // Log pour debugging
    console.log('[TASK-AGENT] ‚úÖ Recommandation GARANTIE g√©n√©r√©e:', {
      hasRec: recommendation.hasRecommendation,
      recLength: recommendation.recommendation?.length || 0,
      needsEmail: recommendation.needsEmail,
      valueAdded: recommendation.valueAddedReason ? 'Oui' : 'Non'
    });

    return new Response(JSON.stringify({
      success: true,
      recommendation
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[TASK-AGENT] ‚ùå Erreur:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      recommendation: {
        hasRecommendation: true,
        recommendation: "üö® **Erreur lors de l'analyse - Recommandations de base :**\n\n‚Ä¢ V√©rifier que tous les √©l√©ments n√©cessaires sont disponibles\n‚Ä¢ Planifier la t√¢che avec des √©tapes interm√©diaires\n‚Ä¢ Pr√©voir un suivi r√©gulier de l'avancement\n‚Ä¢ Documenter les actions entreprises\n‚Ä¢ Solliciter de l'aide si n√©cessaire",
        estimatedCost: null,
        contacts: [],
        needsEmail: false,
        emailDraft: null,
        valueAddedReason: "Approche structur√©e minimale pour assurer un suivi professionnel m√™me en cas de probl√®me technique."
      }
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
