
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { task, transcript, meetingContext, participants } = await req.json();
    
    console.log('[TASK-RECOMMENDATION] üìã Analyse contextuelle:', task.description.substring(0, 100) + '...');
    console.log('[TASK-RECOMMENDATION] üë• Participants:', participants?.map(p => p.name).join(', ') || 'Aucun');
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    console.log('[TASK-RECOMMENDATION] üß† Analyse enrichie avec recherche internet et templates email');

    // R√©cup√©rer le contexte des t√¢ches existantes
    console.log('[TASK-RECOMMENDATION] üóÑÔ∏è R√©cup√©ration contexte + t√¢ches existantes');
    
    const { data: existingTodos } = await supabase
      .from('todos')
      .select('id, description, status')
      .in('status', ['pending', 'confirmed'])
      .limit(50);

    console.log('[DATABASE] R√©cup√©ration du contexte incluant t√¢ches existantes');
    console.log('[DATABASE]', existingTodos?.length || 0, 't√¢ches existantes trouv√©es');

    const contextData = {
      existingTodos: existingTodos || []
    };

    console.log('[TASK-RECOMMENDATION] ‚úÖ Contexte r√©cup√©r√©:', { existingTodos: contextData.existingTodos.length });

    // Recherche internet enrichie (pas seulement pour fournisseurs)
    console.log('[TASK-RECOMMENDATION] üåê Recherche internet enrichie');
    
    let internetContext = { hasContent: false, content: '', providers: [], enrichmentType: 'general' };
    try {
      // Analyser si la t√¢che n√©cessite des informations externes
      const taskLower = task.description.toLowerCase();
      const needsInternet = taskLower.includes('contacter') || 
                           taskLower.includes('rechercher') ||
                           taskLower.includes('prestataire') || 
                           taskLower.includes('entreprise') || 
                           taskLower.includes('fournisseur') ||
                           taskLower.includes('r√©gie') ||
                           taskLower.includes('installation') ||
                           taskLower.includes('mat√©riel') ||
                           taskLower.includes('service') ||
                           taskLower.includes('devis') ||
                           taskLower.includes('distributeur') ||
                           taskLower.includes('fontaine') ||
                           taskLower.includes('messagerie') ||
                           taskLower.includes('sonnette') ||
                           taskLower.includes('information') ||
                           taskLower.includes('tarif') ||
                           taskLower.includes('prix') ||
                           taskLower.includes('coordonn√©es') ||
                           taskLower.includes('site web') ||
                           taskLower.includes('email') ||
                           taskLower.includes('t√©l√©phone');

      if (needsInternet) {
        const perplexityKey = Deno.env.get('PERPLEXITY_API_KEY');
        if (perplexityKey) {
          const enrichmentType = taskLower.includes('prestataire') || taskLower.includes('fournisseur') ? 'providers' : 'general';
          
          let searchQuery;
          if (enrichmentType === 'providers') {
            searchQuery = `${task.description} entreprises prestataires fournisseurs Gen√®ve Suisse avec coordonn√©es contacts adresses sites web t√©l√©phones emails`;
          } else {
            searchQuery = `${task.description} informations pratiques Gen√®ve Suisse coordonn√©es contacts proc√©dures tarifs`;
          }
          
          const perplexityResponse = await fetch('https://api.perplexity.ai/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${perplexityKey}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              model: 'llama-3.1-sonar-large-128k-online',
              messages: [
                {
                  role: 'system',
                  content: enrichmentType === 'providers' 
                    ? 'Tu es un assistant sp√©cialis√© dans la recherche de prestataires et fournisseurs en Suisse. Fournis des informations d√©taill√©es avec noms d\'entreprises, adresses compl√®tes, num√©ros de t√©l√©phone, emails et sites web quand disponibles. Formate les informations de mani√®re structur√©e.'
                    : 'Tu es un assistant sp√©cialis√© pour aider avec des informations pratiques en Suisse. Fournis des informations utiles, contacts, proc√©dures, tarifs et coordonn√©es quand disponibles. Sois pr√©cis et concis.'
                },
                {
                  role: 'user',
                  content: searchQuery
                }
              ],
              max_tokens: 1000,
              temperature: 0.2,
            }),
          });

          if (perplexityResponse.ok) {
            const perplexityData = await perplexityResponse.json();
            const content = perplexityData.choices[0]?.message?.content || '';
            
            // Extraire les noms d'entreprises du contenu
            const providerRegex = /([A-Z√Ä-√ø][a-z√†-√ø\s&-]+(?:SA|SARL|AG|GmbH|S√†rl)?)/g;
            const providers = [...new Set(content.match(providerRegex) || [])].slice(0, 5);
            
            internetContext = {
              hasContent: true,
              content: content,
              providers: providers,
              enrichmentType: enrichmentType
            };
          }
        }
      }
    } catch (error) {
      console.error('[TASK-RECOMMENDATION] Erreur recherche internet:', error);
    }

    console.log('[TASK-RECOMMENDATION] ‚úÖ Internet:', { 
      hasContent: internetContext.hasContent, 
      contentLength: internetContext.content.length,
      providersFound: internetContext.providers.length,
      enrichmentType: internetContext.enrichmentType
    });

    // Synth√®se avec recommandations IA avanc√©es et templates email
    console.log('[TASK-RECOMMENDATION] ‚ö° Synth√®se contextuelle avec extraction contacts et emails');

    const systemPrompt = `Tu es un assistant IA sp√©cialis√© pour un cabinet d'ophtalmologie √† Gen√®ve, Suisse.

MISSION : Analyser cette t√¢che et fournir des recommandations utiles avec contacts de fournisseurs et templates d'email SEULEMENT si tu peux ajouter une valeur significative.

CONTEXTE DISPONIBLE :
- T√¢che: ${task.description}
- Transcript: ${transcript ? 'Disponible' : 'Non disponible'}
- Contexte r√©union: ${meetingContext?.title || 'Cabinet ophtalmologie'}
- Participants: ${participants?.map(p => p.name).join(', ') || 'Non sp√©cifi√©s'}
- T√¢ches existantes: ${contextData.existingTodos.length} t√¢ches en cours

${internetContext.hasContent ? `INFORMATIONS ENRICHIES TROUV√âES:
${internetContext.content}

${internetContext.enrichmentType === 'providers' ? `ENTREPRISES IDENTIFI√âES: ${internetContext.providers.join(', ')}` : 'INFORMATIONS PRATIQUES ENRICHIES'}` : ''}

R√àGLES DE RECOMMANDATION :
1. Si la t√¢che est simple et ne n√©cessite pas de conseils ‚Üí r√©ponds avec hasRecommendation: false
2. Pour les t√¢ches complexes, fournis des recommandations pratiques d√©taill√©es
3. Pour les contacts externes, extrais et structure les informations de contact trouv√©es
4. Inclus toujours les coordonn√©es compl√®tes : nom, adresse, t√©l√©phone, email, site web
5. Pour tous les prix, utilise les CHF (francs suisses)
6. **EMAILS PR√â-R√âDIG√âS** : Si la t√¢che implique "contacter", "envoyer email", "demander informations", "demander devis" ‚Üí cr√©e un brouillon professionnel
7. Assure-toi que les contacts sont r√©els et v√©rifiables

D√âTECTION EMAIL OBLIGATOIRE :
- Analyser si la t√¢che n√©cessite l'envoi d'un email (mots-cl√©s : contacter, email, envoyer, demander, informer)
- Si OUI ‚Üí needsExternalEmail: true + emailDraft complet
- Template email professionnel avec objet, salutation, corps, signature

EXTRACTION DE CONTACTS :
- Extrais les noms d'entreprises, adresses, t√©l√©phones, emails, sites web
- Formate les adresses compl√®tement (rue, code postal, ville)
- V√©rifie que les sites web sont au format correct (avec http/https)
- N'invente JAMAIS de coordonn√©es, utilise seulement celles trouv√©es

R√âPONSE REQUISE (JSON uniquement) :
{
  "hasRecommendation": boolean,
  "recommendation": "texte de recommandation d√©taill√© avec conseils pratiques ou null",
  "needsExternalEmail": boolean,
  "emailDraft": "brouillon email complet avec objet et corps si n√©cessaire ou null",
  "contacts": [
    {
      "name": "Nom exact de l'entreprise",
      "address": "Adresse compl√®te si disponible",
      "phone": "Num√©ro de t√©l√©phone au format suisse si disponible",
      "email": "Email de contact si disponible", 
      "website": "Site web complet avec https:// si disponible"
    }
  ],
  "contextAnalysis": "analyse du contexte utilis√© incluant internet",
  "duplicateTask": "avertissement si t√¢che similaire existe ou null",
  "estimatedCost": "estimation des co√ªts en CHF si pertinent ou null"
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: `Analyse cette t√¢che avec le contexte enrichi et g√©n√®re email si n√©cessaire : "${task.description}"` }
        ],
        temperature: 0.7,
        max_tokens: 1500,
      }),
    });

    const aiData = await response.json();
    let recommendation;

    try {
      const aiContent = aiData.choices[0].message.content;
      // Nettoyer la r√©ponse et extraire le JSON
      const jsonMatch = aiContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        recommendation = JSON.parse(jsonMatch[0]);
        
        // Valider et nettoyer les contacts
        if (recommendation.contacts) {
          recommendation.contacts = recommendation.contacts.filter(contact => 
            contact.name && contact.name.length > 2
          ).map(contact => ({
            ...contact,
            website: contact.website && !contact.website.startsWith('http') 
              ? `https://${contact.website}` 
              : contact.website
          }));
        }

        // Valider la g√©n√©ration d'email
        if (recommendation.needsExternalEmail && !recommendation.emailDraft) {
          console.log('[TASK-RECOMMENDATION] ‚ö†Ô∏è Email demand√© mais pas g√©n√©r√©, correction...');
          recommendation.needsExternalEmail = false;
        }
      } else {
        recommendation = { hasRecommendation: false, needsExternalEmail: false };
      }
    } catch (parseError) {
      console.error('[TASK-RECOMMENDATION] Erreur parsing JSON:', parseError);
      recommendation = { hasRecommendation: false, needsExternalEmail: false };
    }

    console.log('[TASK-RECOMMENDATION] ‚úÖ Recommandation g√©n√©r√©e:', {
      hasRecommendation: recommendation.hasRecommendation,
      hasEmail: recommendation.needsExternalEmail,
      contacts: recommendation.contacts?.length || 0,
      internetUsed: internetContext.hasContent
    });

    return new Response(JSON.stringify({ 
      recommendation,
      contextUsed: {
        existingTodos: contextData.existingTodos.length,
        internetSearch: internetContext.hasContent,
        providersFound: internetContext.providers.length,
        enrichmentType: internetContext.enrichmentType
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[TASK-RECOMMENDATION] ‚ùå ERREUR:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      recommendation: { hasRecommendation: false, needsExternalEmail: false }
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
