
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.4';

// Simple inline agent implementations for this function
interface QueryAnalysis {
  requiresDatabase: boolean;
  requiresEmbeddings: boolean;
  requiresInternet: boolean;
  queryType: string;
  searchTerms: string[];
  synonyms: string[];
  priority: string;
}

interface DatabaseContext {
  meetings: any[];
  documents: any[];
  todos: any[];
  relevantIds: any;
}

interface EmbeddingContext {
  chunks: any[];
  hasRelevantContext: boolean;
}

interface InternetContext {
  content: string;
  hasContent: boolean;
  enrichmentType: string;
}

// Simple coordinator agent
class CoordinatorAgent {
  private openaiApiKey: string;

  constructor(openaiApiKey: string) {
    this.openaiApiKey = openaiApiKey;
  }

  async analyzeQuery(query: string, history: any[]): Promise<QueryAnalysis> {
    return {
      requiresDatabase: true,
      requiresEmbeddings: true,
      requiresInternet: true,
      queryType: 'task',
      searchTerms: query.split(' '),
      synonyms: [],
      priority: 'embeddings'
    };
  }
}

// Enhanced database agent with existing tasks context
class DatabaseAgent {
  private supabase: any;

  constructor(supabase: any) {
    this.supabase = supabase;
  }

  async searchContext(analysis: QueryAnalysis): Promise<DatabaseContext> {
    console.log('[DATABASE] R√©cup√©ration du contexte incluant t√¢ches existantes');
    
    // R√©cup√©rer les t√¢ches en cours pour √©viter les doublons
    const { data: existingTodos } = await this.supabase
      .from('todos')
      .select('id, description, status, created_at')
      .in('status', ['pending', 'confirmed'])
      .order('created_at', { ascending: false })
      .limit(50);

    console.log(`[DATABASE] ${existingTodos?.length || 0} t√¢ches existantes trouv√©es`);

    return {
      meetings: [],
      documents: [],
      todos: existingTodos || [],
      relevantIds: { meetingIds: [], documentIds: [], todoIds: [] }
    };
  }
}

// Simple embeddings agent
class EmbeddingsAgent {
  private openaiApiKey: string;
  private supabase: any;

  constructor(openaiApiKey: string, supabase: any) {
    this.openaiApiKey = openaiApiKey;
    this.supabase = supabase;
  }

  async searchEmbeddings(query: string, analysis: QueryAnalysis, relevantIds: any): Promise<EmbeddingContext> {
    return {
      chunks: [],
      hasRelevantContext: false
    };
  }
}

// Enhanced internet agent with strict contact validation
class InternetAgent {
  private perplexityApiKey: string;

  constructor(perplexityApiKey: string) {
    this.perplexityApiKey = perplexityApiKey;
  }

  async searchInternet(query: string, analysis: QueryAnalysis, hasLocalContext: boolean): Promise<InternetContext> {
    if (!this.perplexityApiKey) {
      return { content: '', hasContent: false, enrichmentType: 'supplement' };
    }

    try {
      // Enhanced search focusing on context and company information
      const enhancedQuery = this.buildContextualQuery(query);
      
      const response = await fetch('https://api.perplexity.ai/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.perplexityApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'llama-3.1-sonar-large-128k-online',
          messages: [
            {
              role: 'system',
              content: this.getStrictContactSystemPrompt()
            },
            {
              role: 'user',
              content: enhancedQuery
            }
          ],
          temperature: 0.1,
          max_tokens: 1500,
          search_recency_filter: 'month'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const content = data.choices[0]?.message?.content || '';
        return {
          content,
          hasContent: !!content,
          enrichmentType: 'supplement'
        };
      }
    } catch (error) {
      console.error('[INTERNET] Search error:', error);
    }

    return { content: '', hasContent: false, enrichmentType: 'supplement' };
  }

  private buildContextualQuery(query: string): string {
    const lowerQuery = query.toLowerCase();
    
    // D√©tection des entreprises/soci√©t√©s mentionn√©es
    const companyKeywords = ['soci√©t√©', 'entreprise', 'cabinet', 'firme', 'sa ', 'sarl', 'sas', 'ag ', 'gmbh', 'ltd', 'inc', 'corp'];
    const hasCompanyMention = companyKeywords.some(keyword => lowerQuery.includes(keyword));
    
    if (hasCompanyMention) {
      return `RECHERCHE ENTREPRISE AVEC COORDONN√âES STRICTES pour cabinet m√©dical ophtalmologie Gen√®ve:

T√ÇCHE: ${query}

INSTRUCTIONS CRITIQUES:
1. IDENTIFIER l'entreprise/soci√©t√© mentionn√©e dans la t√¢che
2. COORDONN√âES: Inclure UNIQUEMENT si trouv√©es sur sources officielles v√©rifiables:
   - Site web: URL compl√®te format [nom](https://url)
   - T√©l√©phone: Format international +41... ou +33... SEULEMENT si sur site officiel
   - Email: contact@ ou info@ SEULEMENT si v√©rifi√©s sur site
3. CONTEXTE M√âDICAL: Cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve
4. NE JAMAIS inventer ou supposer des coordonn√©es manquantes
5. Si aucune coordonn√©e trouv√©e: Ne pas en mentionner

INTERDICTION ABSOLUE: Inventer t√©l√©phones, emails ou sites web`;
    }
    
    return `RECOMMANDATION CONTEXTUELLE pour cabinet ophtalmologie Gen√®ve:

T√ÇCHE: ${query}

FOCUS:
- Comprendre le contexte sp√©cifique de la t√¢che
- Fournir recommandations pertinentes au domaine m√©dical
- Cabinet Dr Tabibian sp√©cialis√© ophtalmologie
- Solutions pratiques adapt√©es √† Gen√®ve/Suisse

Si entreprise externe mentionn√©e: coordonn√©es SEULEMENT si trouv√©es`;
  }

  private getStrictContactSystemPrompt(): string {
    return `Expert en recommandations pour cabinet m√©dical ophtalmologie avec validation stricte des coordonn√©es.

R√àGLES ABSOLUES COORDONN√âES:
1. SITES WEB: URLs compl√®tes format [nom](https://url) SEULEMENT si trouv√©s
2. T√âL√âPHONES: Format +41/+33... SEULEMENT si v√©rifi√©s sur sites officiels
3. EMAILS: contact@/info@ SEULEMENT si trouv√©s sur sites officiels
4. INTERDICTION TOTALE: Inventer coordonn√©es inexistantes
5. SI PAS TROUV√â: Ne pas mentionner l'information

CONTEXTE: Cabinet ophtalmologie Dr Tabibian Gen√®ve - Recommandations pertinentes uniquement.

OBJECTIF: Informations fiables et contextuelles pour professionnels m√©dicaux.`;
  }
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { task, transcript, meetingContext, participants } = await req.json();
    
    console.log(`[TASK-RECOMMENDATION] üìã Analyse contextuelle: ${task.description.substring(0, 100)}...`);
    console.log(`[TASK-RECOMMENDATION] üë• Participants: ${participants.map((p: any) => p.name).join(', ')}`);
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    const perplexityApiKey = Deno.env.get('PERPLEXITY_API_KEY');
    
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Initialisation des agents avec contexte am√©lior√©
    const coordinator = new CoordinatorAgent(openaiApiKey);
    const databaseAgent = new DatabaseAgent(supabase);
    const embeddingsAgent = new EmbeddingsAgent(openaiApiKey, supabase);

    // üß† PHASE 1: ANALYSE avec contexte des t√¢ches existantes
    console.log('[TASK-RECOMMENDATION] üß† Analyse avec contexte t√¢ches existantes');
    
    const taskQuery = `Recommandation contextuelle: ${task.description}`;
    const analysis = await coordinator.analyzeQuery(taskQuery, []);
    
    analysis.requiresEmbeddings = true;
    analysis.requiresInternet = true;
    analysis.priority = 'context';

    // üóÑÔ∏è PHASE 2: RECHERCHE avec t√¢ches existantes
    console.log('[TASK-RECOMMENDATION] üóÑÔ∏è R√©cup√©ration contexte + t√¢ches existantes');
    const databaseContext = await databaseAgent.searchContext(analysis);
    
    console.log('[TASK-RECOMMENDATION] ‚úÖ Contexte r√©cup√©r√©:', {
      existingTodos: databaseContext.todos.length
    });

    // üåê PHASE 3: Recherche internet contextuelle avec coordonn√©es strictes
    console.log('[TASK-RECOMMENDATION] üåê Recherche internet contextuelle');
    const internetAgent = new InternetAgent(perplexityApiKey);
    const internetContext = await internetAgent.searchInternet(
      task.description, 
      analysis, 
      false
    );

    console.log('[TASK-RECOMMENDATION] ‚úÖ Internet:', {
      hasContent: internetContext.hasContent,
      contentLength: internetContext.content.length
    });

    // ‚ö° PHASE 4: Synth√®se contextuelle avec validation coordonn√©es
    console.log('[TASK-RECOMMENDATION] ‚ö° Synth√®se contextuelle avanc√©e');
    
    // Extraction du contexte autour de la t√¢che dans le transcript
    const taskContext = this.extractTaskContext(task.description, transcript);
    
    const contextualPrompt = `Tu es l'assistant IA expert OphtaCare pour cabinet Dr Tabibian √† Gen√®ve, sp√©cialis√© dans les recommandations pr√©cises avec compr√©hension contextuelle.

**CONTEXTE CABINET:**
- Cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve, Suisse
- Participants r√©union: ${participants.map((p: any) => p.name).join(', ')}
- Utilisation: Outil professionnel pour gestion cabinet m√©dical

**T√ÇCHE √Ä ANALYSER:**
${task.description}

**CONTEXTE D√âTAILL√â DE LA T√ÇCHE DANS LA R√âUNION:**
${taskContext}

**T√ÇCHES EXISTANTES √Ä √âVITER (${databaseContext.todos.length}):**
${databaseContext.todos.slice(0, 10).map((todo: any) => `- ${todo.description}`).join('\n')}

**INFORMATIONS INTERNET CONTEXTUELLES:**
${internetContext.content ? internetContext.content.substring(0, 1500) : 'Informations contextuelles limit√©es'}

**INSTRUCTIONS CRITIQUES CONTEXTUELLES:**

1. **COMPR√âHENSION CONTEXTUELLE OBLIGATOIRE**:
   - Analyser le CONTEXTE pr√©cis dans lequel la t√¢che a √©t√© mentionn√©e
   - Comprendre le POURQUOI et les ENJEUX de cette t√¢che
   - Adapter les recommandations au contexte m√©dical/ophtalmologique

2. **√âVITER DOUBLONS**:
   - V√©rifier si une t√¢che similaire existe d√©j√†
   - Si similaire trouv√©e, mentionner "T√¢che similaire existante: [description]"

3. **COORDONN√âES ENTREPRISES EXTERNES** (VALIDATION STRICTE):
   - Si entreprise/soci√©t√© mentionn√©e dans la t√¢che
   - Coordonn√©es UNIQUEMENT si trouv√©es dans mes informations:
     * Site web: [nom](https://url) si URL exacte connue
     * T√©l√©phone: +41... si num√©ro exact connu
     * Email: contact@ si adresse exacte connue
   - SI AUCUNE COORDONN√âE CONNUE: Ne rien mentionner

4. **RECOMMANDATIONS CONTEXTUELLES**:
   - Bas√©es sur la compr√©hension du contexte sp√©cifique
   - Adapt√©es au domaine ophtalmologique
   - Pratiques pour cabinet m√©dical genevois

5. **FORMAT JSON REQUIS**:
{
  "hasRecommendation": [true/false],
  "contextAnalysis": "[Analyse du contexte sp√©cifique de la t√¢che]",
  "recommendation": "[Recommandation adapt√©e au contexte]",
  "duplicateTask": "[Si t√¢che similaire existe d√©j√†]",
  "needsExternalEmail": [true/false],
  "emailDraft": "[Email si prestataire externe]",
  "externalProviders": ["Liste entreprises sp√©cifiques"],
  "estimatedCost": "[Co√ªt CHF si pertinent]",
  "contactInfo": [
    {
      "name": "Nom entreprise",
      "phone": "T√©l√©phone SI CONNU",
      "email": "Email SI CONNU", 
      "website": "URL SI CONNUE"
    }
  ]
}

Analyse maintenant la t√¢che avec son contexte sp√©cifique et fournis une recommandation JSON contextuelle.`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: 'Tu es un expert en recommandations contextuelles pour cabinet m√©dical. Tu comprends le contexte sp√©cifique des t√¢ches et ne fournis des coordonn√©es que si tu les connais vraiment. R√©ponds UNIQUEMENT en JSON valide.' 
          },
          { role: 'user', content: contextualPrompt }
        ],
        max_tokens: 1200,
        temperature: 0.2,
      }),
    });

    const aiData = await response.json();
    let recommendationResult;
    
    try {
      const content = aiData.choices[0].message.content.trim();
      const cleanedContent = content.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim();
      recommendationResult = JSON.parse(cleanedContent);
    } catch (parseError) {
      console.error('[TASK-RECOMMENDATION] Erreur parsing JSON:', parseError);
      recommendationResult = { hasRecommendation: false };
    }

    console.log('[TASK-RECOMMENDATION] ‚úÖ RECOMMANDATION CONTEXTUELLE:', {
      hasRecommendation: recommendationResult.hasRecommendation,
      hasContextAnalysis: !!recommendationResult.contextAnalysis,
      hasDuplicateCheck: !!recommendationResult.duplicateTask,
      contactInfoValidated: recommendationResult.contactInfo?.length || 0
    });

    return new Response(JSON.stringify({
      success: true,
      recommendation: recommendationResult,
      contextUsed: {
        existingTodos: databaseContext.todos.length,
        internet: internetContext.hasContent,
        contextAnalysis: !!recommendationResult.contextAnalysis
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[TASK-RECOMMENDATION] ‚ùå ERREUR:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      context: 'Enhanced Contextual Task Recommendation Agent'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

// Fonction utilitaire pour extraire le contexte de la t√¢che
function extractTaskContext(taskDescription: string, transcript: string): string {
  if (!transcript || !taskDescription) return 'Contexte non disponible';
  
  const taskWords = taskDescription.toLowerCase().split(' ').filter(word => word.length > 3);
  const transcriptSentences = transcript.split(/[.!?]+/);
  
  // Trouver les phrases du transcript qui contiennent des mots-cl√©s de la t√¢che
  const relevantSentences = transcriptSentences.filter(sentence => {
    const sentenceLower = sentence.toLowerCase();
    return taskWords.some(word => sentenceLower.includes(word));
  });
  
  if (relevantSentences.length > 0) {
    return relevantSentences.slice(0, 3).join('. ').trim();
  }
  
  return 'Contexte sp√©cifique non identifi√© dans le transcript';
}
