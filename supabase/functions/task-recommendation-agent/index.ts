
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { task, transcript, meetingContext, participants } = await req.json();
    
    console.log('[TASK-RECOMMENDATION] üìã Analyse contextuelle:', task.description.substring(0, 100) + '...');
    console.log('[TASK-RECOMMENDATION] üë• Participants:', participants?.map(p => p.name).join(', ') || 'Aucun');
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    console.log('[TASK-RECOMMENDATION] üß† Analyse avec contexte t√¢ches existantes');

    // R√©cup√©rer le contexte des t√¢ches existantes
    console.log('[TASK-RECOMMENDATION] üóÑÔ∏è R√©cup√©ration contexte + t√¢ches existantes');
    
    const { data: existingTodos } = await supabase
      .from('todos')
      .select('id, description, status')
      .in('status', ['pending', 'confirmed'])
      .limit(50);

    console.log('[DATABASE] R√©cup√©ration du contexte incluant t√¢ches existantes');
    console.log('[DATABASE]', existingTodos?.length || 0, 't√¢ches existantes trouv√©es');

    const contextData = {
      existingTodos: existingTodos || []
    };

    console.log('[TASK-RECOMMENDATION] ‚úÖ Contexte r√©cup√©r√©:', { existingTodos: contextData.existingTodos.length });

    // Recherche internet contextuelle
    console.log('[TASK-RECOMMENDATION] üåê Recherche internet contextuelle');
    
    let internetContext = { hasContent: false, content: '' };
    try {
      // Identifier si la t√¢che n√©cessite des informations externes
      const taskLower = task.description.toLowerCase();
      const needsInternet = taskLower.includes('prestataire') || 
                           taskLower.includes('entreprise') || 
                           taskLower.includes('fournisseur') ||
                           taskLower.includes('contact') ||
                           taskLower.includes('r√©gie') ||
                           taskLower.includes('installation') ||
                           taskLower.includes('mat√©riel');

      if (needsInternet) {
        const perplexityKey = Deno.env.get('PERPLEXITY_API_KEY');
        if (perplexityKey) {
          const searchQuery = `${task.description} Gen√®ve Suisse prestataires contacts`;
          
          const perplexityResponse = await fetch('https://api.perplexity.ai/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${perplexityKey}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              model: 'llama-3.1-sonar-small-128k-online',
              messages: [
                {
                  role: 'system',
                  content: 'Fournis des informations pratiques sur les prestataires et fournisseurs √† Gen√®ve, Suisse. Inclus des noms d\'entreprises, coordonn√©es si disponibles.'
                },
                {
                  role: 'user',
                  content: searchQuery
                }
              ],
              max_tokens: 500,
              temperature: 0.2,
            }),
          });

          if (perplexityResponse.ok) {
            const perplexityData = await perplexityResponse.json();
            internetContext = {
              hasContent: true,
              content: perplexityData.choices[0]?.message?.content || ''
            };
          }
        }
      }
    } catch (error) {
      console.error('[TASK-RECOMMENDATION] Erreur recherche internet:', error);
    }

    console.log('[TASK-RECOMMENDATION] ‚úÖ Internet:', { hasContent: internetContext.hasContent, contentLength: internetContext.content.length });

    // Synth√®se avec recommandations IA
    console.log('[TASK-RECOMMENDATION] ‚ö° Synth√®se contextuelle avanc√©e');

    const systemPrompt = `Tu es un assistant IA sp√©cialis√© pour un cabinet d'ophtalmologie √† Gen√®ve, Suisse.

MISSION : Analyser cette t√¢che et fournir des recommandations utiles SEULEMENT si tu peux ajouter une valeur significative.

CONTEXTE DISPONIBLE :
- T√¢che: ${task.description}
- Transcript: ${transcript ? 'Disponible' : 'Non disponible'}
- Contexte r√©union: ${meetingContext?.title || 'Cabinet ophtalmologie'}
- Participants: ${participants?.map(p => p.name).join(', ') || 'Non sp√©cifi√©s'}
- T√¢ches existantes: ${contextData.existingTodos.length} t√¢ches en cours

${internetContext.hasContent ? `INFORMATIONS EXTERNES TROUV√âES:
${internetContext.content}` : ''}

R√àGLES DE RECOMMANDATION :
1. Si la t√¢che est simple et ne n√©cessite pas de conseils ‚Üí r√©ponds avec hasRecommendation: false
2. Pour les t√¢ches complexes, fournis des recommandations pratiques
3. Pour les contacts externes, sugg√®re des prestataires genevois si pertinent
4. Pour tous les prix, utilise les CHF (francs suisses)
5. Si email externe n√©cessaire, cr√©e un brouillon professionnel

R√âPONSE REQUISE (JSON uniquement) :
{
  "hasRecommendation": boolean,
  "recommendation": "texte de recommandation ou null",
  "needsExternalEmail": boolean,
  "emailDraft": "brouillon email si n√©cessaire ou null",
  "externalProviders": ["liste prestataires si pertinent"],
  "contextAnalysis": "analyse du contexte utilis√©",
  "duplicateTask": "avertissement si t√¢che similaire existe ou null"
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: `Analyse cette t√¢che : "${task.description}"` }
        ],
        temperature: 0.7,
        max_tokens: 800,
      }),
    });

    const aiData = await response.json();
    let recommendation;

    try {
      const aiContent = aiData.choices[0].message.content;
      // Nettoyer la r√©ponse et extraire le JSON
      const jsonMatch = aiContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        recommendation = JSON.parse(jsonMatch[0]);
      } else {
        recommendation = { hasRecommendation: false };
      }
    } catch (parseError) {
      console.error('[TASK-RECOMMENDATION] Erreur parsing JSON:', parseError);
      recommendation = { hasRecommendation: false };
    }

    console.log('[TASK-RECOMMENDATION] ‚úÖ Recommandation g√©n√©r√©e:', recommendation.hasRecommendation);

    return new Response(JSON.stringify({ 
      recommendation,
      contextUsed: {
        existingTodos: contextData.existingTodos.length,
        internetSearch: internetContext.hasContent
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[TASK-RECOMMENDATION] ‚ùå ERREUR:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      recommendation: { hasRecommendation: false }
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
