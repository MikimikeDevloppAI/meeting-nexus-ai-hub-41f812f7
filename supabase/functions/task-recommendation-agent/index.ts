
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { task, transcript, meetingContext, participants } = await req.json();
    console.log('[TASK-AGENT] üéØ Analyse intelligente:', task.description.substring(0, 50));

    const openaiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Prompt compl√®tement remani√© avec logique intelligente
    const prompt = `Tu es un assistant IA sp√©cialis√© pour un cabinet d'ophtalmologie √† Gen√®ve dirig√© par le Dr Tabibian.

T√ÇCHE √Ä ANALYSER: "${task.description}"

CONTEXTE R√âUNION:
- Titre: ${meetingContext.title}
- Date: ${meetingContext.date}
- Participants: ${meetingContext.participants}

PARTICIPANTS DISPONIBLES: ${participants.map(p => p.name).join(', ')}

R√àGLES STRICTES DE VALEUR AJOUT√âE :
1. Ne g√©n√®re une recommandation QUE si elle apporte une vraie valeur ajout√©e
2. NE REFORMULE PAS b√™tement la t√¢che
3. Fournir des conseils pratiques et actionables uniquement
4. Si la t√¢che est simple et claire, ne pas donner de recommandation

TYPES DE T√ÇCHES ET LOGIQUE SP√âCIALIS√âE :

üè• **CONTACT FOURNISSEUR/PRESTATAIRE** (mat√©riel m√©dical, services, √©quipements) :
- Tips essentiels pour n√©gocier avec des fournisseurs m√©dicaux
- Points d'attention sp√©cifiques √† l'ophtalmologie
- √âl√©ments techniques √† ne pas oublier dans les specifications
- Crit√®res de s√©lection pour fournisseurs m√©dicaux en Suisse
- Questions cl√©s √† poser (certifications, maintenance, formation)
- Aspects r√©glementaires suisses (Swissmedic, etc.)

üîç **RECHERCHE/RENSEIGNEMENT** (technologies, formations, proc√©dures) :
- M√©thodologie de recherche pour le domaine m√©dical
- Sources fiables sp√©cialis√©es en ophtalmologie
- Questions structur√©es √† poser aux experts
- Crit√®res d'√©valuation pertinents
- Checklist de points √† couvrir

üìß **COMMUNICATION INTERNE** (emails √©quipe, rappels, coordination) :
- G√©n√©rer uniquement un email pr√©-r√©dig√© professionnel
- Ton appropri√© selon le destinataire
- Structure claire et actionnable

‚öôÔ∏è **ACTION COMPLEXE** (mise en place processus, formation √©quipe, etc.) :
- Plan d'action d√©taill√© avec √©tapes logiques
- Ressources n√©cessaires et responsabilit√©s
- Timeline r√©aliste avec jalons
- Risques potentiels et mitigations

CONTEXTE M√âDICAL SP√âCIALIS√â :
- Cabinet ophtalmologie Gen√®ve, Dr Tabibian
- R√©glementations suisses sant√© (LAMal, LPTh, Swissmedic)
- √âquipements sp√©cialis√©s : OCT, campim√®tre, lampe √† fente, r√©tinographe
- Fournisseurs courants : Zeiss, Heidelberg, Topcon, Haag-Streit
- Normes qualit√© : ISO 13485, MDD, MDR
- Formation continue : SOG (Soci√©t√© Suisse d'Ophtalmologie)

EXEMPLES DE SITUATIONS :
- "Contacter fournisseur OCT" ‚Üí Tips n√©gociation, specs techniques, questions maintenance
- "Se renseigner sur nouvelle technique laser" ‚Üí Sources sp√©cialis√©es, crit√®res √©valuation, questions experts
- "Informer √©quipe changement planning" ‚Üí Email pr√©-r√©dig√© uniquement
- "Former √©quipe nouveau protocole" ‚Üí Plan formation d√©taill√© √©tapes par √©tapes

RETOURNE UNIQUEMENT ce JSON :
{
  "hasRecommendation": boolean,
  "recommendationType": "supplier_tips|research_guide|action_plan|internal_communication|null",
  "recommendation": "conseils pratiques d√©taill√©s OU null si pas de valeur ajout√©e",
  "estimatedCost": "estimation si pertinent OU null",
  "contacts": [{"name": "string", "phone": "string", "email": "string", "website": "string", "address": "string"}],
  "needsEmail": boolean,
  "emailDraft": "email format√© OU null",
  "valueAddedReason": "pourquoi cette recommandation apporte de la valeur OU null"
}`;

    console.log('[TASK-AGENT] üß† Appel OpenAI avec nouveau prompt intelligent...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: `Tu es un expert en gestion de cabinet m√©dical sp√©cialis√© en ophtalmologie. 

CRIT√àRES STRICTS POUR RECOMMANDATIONS :
- UNIQUEMENT si valeur ajout√©e claire et mesurable
- Conseils PRATIQUES et ACTIONABLES
- Expertise sp√©cialis√©e ophtalmologie/Suisse
- NE PAS reformuler b√™tement

Pour emails internes, utilise ce format professionnel :

Objet: [Sujet clair]

Bonjour [Nom/√âquipe],

[Message structur√© avec points clairs]

- Point 1
- Point 2
- Action attendue avec d√©lai

Merci pour votre attention.

Cordialement,
Dr. Tabibian
Cabinet d'Ophtalmologie - Gen√®ve`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2,
        max_tokens: 2000,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content?.trim();

    console.log('[TASK-AGENT] ‚úÖ R√©ponse OpenAI re√ßue');

    // Parsing JSON robuste avec validation
    let recommendation;
    try {
      // Nettoyer le contenu
      let cleanContent = content;
      
      // Retirer les blocs markdown
      cleanContent = cleanContent.replace(/```json\s*/g, '').replace(/```\s*/g, '');
      
      // Chercher le JSON
      const jsonMatch = cleanContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        cleanContent = jsonMatch[0];
      }
      
      recommendation = JSON.parse(cleanContent);
      
      // Validation stricte de la structure
      if (typeof recommendation.hasRecommendation !== 'boolean') {
        throw new Error('Structure invalide');
      }

      // Validation de la valeur ajout√©e - si pas de raison claire, rejeter
      if (recommendation.hasRecommendation && !recommendation.valueAddedReason) {
        console.log('[TASK-AGENT] ‚ö†Ô∏è Recommandation rejet√©e - pas de valeur ajout√©e claire');
        recommendation.hasRecommendation = false;
        recommendation.recommendation = null;
        recommendation.recommendationType = null;
      }

      // Nettoyer et formater l'email si pr√©sent
      if (recommendation.needsEmail && recommendation.emailDraft) {
        let emailContent = recommendation.emailDraft;
        
        // Remplacer les \\n par de vrais retours √† la ligne
        emailContent = emailContent.replace(/\\n/g, '\n');
        
        // S'assurer qu'il y a des retours √† la ligne entre les sections
        emailContent = emailContent.replace(/([.!?])\s*([A-Z][a-z])/g, '$1\n\n$2');
        
        // Nettoyer les espaces multiples
        emailContent = emailContent.replace(/\n\s*\n\s*\n/g, '\n\n');
        
        recommendation.emailDraft = emailContent.trim();
      }

      // Valider le type de recommandation
      const validTypes = ['supplier_tips', 'research_guide', 'action_plan', 'internal_communication'];
      if (recommendation.recommendationType && !validTypes.includes(recommendation.recommendationType)) {
        console.log('[TASK-AGENT] ‚ö†Ô∏è Type de recommandation invalide:', recommendation.recommendationType);
        recommendation.recommendationType = null;
      }
      
    } catch (parseError) {
      console.error('[TASK-AGENT] ‚ùå Erreur parsing:', parseError);
      
      // Retour par d√©faut en cas d'erreur
      recommendation = {
        hasRecommendation: false,
        recommendationType: null,
        recommendation: null,
        estimatedCost: null,
        contacts: [],
        needsEmail: false,
        emailDraft: null,
        valueAddedReason: null
      };
    }

    // Log pour debugging
    console.log('[TASK-AGENT] ‚úÖ Recommandation g√©n√©r√©e:', {
      hasRec: recommendation.hasRecommendation,
      type: recommendation.recommendationType,
      needsEmail: recommendation.needsEmail,
      valueAdded: recommendation.valueAddedReason ? 'Oui' : 'Non'
    });

    return new Response(JSON.stringify({
      success: true,
      recommendation
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[TASK-AGENT] ‚ùå Erreur:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      recommendation: {
        hasRecommendation: false,
        recommendationType: null,
        recommendation: null,
        estimatedCost: null,
        contacts: [],
        needsEmail: false,
        emailDraft: null,
        valueAddedReason: null
      }
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
