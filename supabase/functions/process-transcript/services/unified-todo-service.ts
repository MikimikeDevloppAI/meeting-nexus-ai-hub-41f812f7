import { createSupabaseClient } from './database-service.ts'
import { callOpenAI } from './openai-service.ts'

export async function processTasksWithRecommendations(
  cleanedTranscript: string, 
  meetingData: any,
  users: any[]
) {
  if (!cleanedTranscript || cleanedTranscript.trim().length === 0) {
    console.log('‚ö° [UNIFIED-TODO-SERVICE] Aucun transcript √† traiter');
    return { processed: 0, successful: 0, failed: 0, fullyCompleted: true };
  }

  console.log(`‚ö° [UNIFIED-TODO-SERVICE] D√âBUT g√©n√©ration UNIFI√âE todos + recommandations avec GPT-4o`);
  console.log(`üë• [UNIFIED-TODO-SERVICE] Users fournis pour assignation:`, users?.map(p => ({ id: p.id, name: p.name, email: p.email })));
  
  const supabaseClient = createSupabaseClient();
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openaiApiKey) {
    throw new Error('OpenAI API key not configured');
  }

  try {
    const userNames = users?.map(p => p.name).join(', ') || '';

    // R√©cup√©rer TOUS les todos existants (non termin√©s) pour √©viter les doublons
    console.log('üìã [UNIFIED-TODO-SERVICE] R√©cup√©ration de tous les todos existants...');
    const { data: allUsers, error: usersError } = await supabaseClient
      .from('users')
      .select('*')
      .order('name');

    if (usersError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error fetching all users:', usersError);
      throw usersError;
    }

    const { data: existingTodos, error: todosError } = await supabaseClient
      .from('todos')
      .select(`
        id,
        description,
        status,
        created_at,
        todo_users(
          user_id,
          users(name)
        )
      `)
      .neq('status', 'completed')
      .order('created_at', { ascending: false });

    if (todosError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error fetching existing todos:', todosError);
    }

    const existingTodosContext = existingTodos?.map(todo => ({
      id: todo.id,
      description: todo.description,
      status: todo.status,
      assignedUsers: todo.todo_users?.map(tu => tu.users?.name).filter(Boolean) || []
    })) || [];

    console.log(`üìã [UNIFIED-TODO-SERVICE] ${existingTodosContext.length} todos existants trouv√©s pour √©viter doublons`);

    const allUserNames = allUsers?.map(u => u.name).join(', ') || '';
    const meetingUserNames = users?.map(p => p.name).join(', ') || '';

    // R√©cup√©rer seulement les todos r√©cents pour √©viter les doublons c√¥t√© IA
    const recentTodosContext = existingTodosContext.slice(0, 15); // Top 15 plus r√©cents

    // Prompt simplifi√© pour cr√©er UNIQUEMENT de nouvelles t√¢ches
    const unifiedPrompt = `Bas√© sur ce transcript de r√©union, identifie TOUTES les nouvelles t√¢ches, actions et suivis mentionn√©s et CR√â√â-LES comme nouvelles t√¢ches.

NE PRODUIS QUE des t√¢ches nouvelles qui ne dupliquent pas les todos existantes list√©es ci-dessous. Si c'est un doublon √©vident, n'inclus pas cette t√¢che dans ta r√©ponse.

TOUS LES UTILISATEURS SYST√àME : ${allUserNames}
PARTICIPANTS √Ä CETTE R√âUNION : ${meetingUserNames}

**TODOS EXISTANTS (pour √©viter doublons) :**
${recentTodosContext.length > 0 ? recentTodosContext.map(todo => 
  `- ${todo.description} (${todo.status})`
).join('\n') : 'Aucun todo existant r√©cent'}

**R√àGLES DE CR√âATION:**
- CR√âE une nouvelle t√¢che pour CHAQUE action/sujet distinct mentionn√© dans le transcript
- Regroupe seulement les actions strictement identiques
- Une nouvelle discussion = une nouvelle t√¢che (m√™me si le sujet est similaire √† un existant)
- N'inclus dans ta r√©ponse que les t√¢ches r√©ellement nouvelles

**R√àGLES DE DESCRIPTION:**
- Description concise mais avec contexte n√©cessaire
- Utilise un verbe d'action clair (Contacter, Organiser, V√©rifier, Finaliser, etc.)
- Format: "Action + Objet + Contexte"

**R√àGLES D'ASSIGNATION:**
- Tu peux assigner √† N'IMPORTE QUEL utilisateur du syst√®me (liste compl√®te ci-dessus)
- PRIVIL√âGIE les participants √† cette r√©union : ${meetingUserNames}
- Variantes accept√©es pour correspondance :
  ‚Ä¢ Le√Øla / leila / Leila ‚Üí "Leila Burnier-Framboret"
  ‚Ä¢ √âmilie / emilie / Emilie ‚Üí "Emilie Doy"
  ‚Ä¢ David / david / Tabibian ‚Üí "David Tabibian"
  ‚Ä¢ Parmice / parmice / Parmis ‚Üí "Parmis PARVIN"
  ‚Ä¢ Sybil / sybil / Sybille ‚Üí "Sybille Peguiron "
- Si une personne dit "je vais faire X" ‚Üí assigne √† cette personne
- Si aucune assignation claire, laisse "assigned_to" √† null

**R√àGLES POUR LES RECOMMANDATIONS IA:**
Pour chaque t√¢che, g√©n√®re:
1. **Recommandation d√©taill√©e** qui propose un plan d'ex√©cution, signale les points d'attention, sugg√®re des prestataires/outils
2. **Email pr√©-r√©dig√© COMPLET** cr√©√© une communication pour l'externe. l'email doit etre professionnel avec contexte pour que le destinaitaire commprenne la demande. si la tache ne necessite aucune communication externe cr√©√© une communication pour l'interne si n√©cessaire, clair et concis.
3. Si la t√¢che est simple/√©vidente, marque hasRecommendation: false

Crit√®res qualit√© pour les recommandations:
- Concis, structur√©, actionnable
- Valeur ajout√©e r√©elle pour le cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve
- √âviter banalit√©s

CONTEXTE R√âUNION:
- Titre: ${meetingData.title || 'R√©union'}
- Date: ${meetingData.created_at || new Date().toISOString()}
- Utilisateurs PR√âSENTS: ${userNames}

Transcript :
${cleanedTranscript}

IMPORTANT: Retourne UNIQUEMENT un JSON valide avec cette structure exacte :
{
  "tasks": [
    {
      "description": "Action concise et claire avec contexte",
      "assigned_to": ["Nom exact de l'utilisateur"] ou null,
      "due_date": "YYYY-MM-DD ou YYYY-MM-DDTHH:MM:SSZ si √©ch√©ance mentionn√©e, sinon null",
      "hasRecommendation": true/false,
      "recommendation": "Recommandation d√©taill√©e ou 'Aucune recommandation n√©cessaire.'",
      "emailDraft": "Email COMPLET (optionnel)" ou null
    }
  ]
}

**R√àGLES POUR LES DATES D'√âCH√âANCE:**
- Si une date ou d√©lai est mentionn√© ("dans 2 semaines", "avant le 15", "d'ici vendredi", "urgent"), calcule la date d'√©ch√©ance
- Format ISO: YYYY-MM-DDTHH:MM:SSZ pour dates avec heure, ou YYYY-MM-DD pour dates simples
- Date de r√©f√©rence : ${new Date().toISOString().split('T')[0]} (aujourd'hui)
- Si aucune √©ch√©ance mentionn√©e, laisse due_date √† null`;

    console.log(`üöÄ [UNIFIED-TODO-SERVICE] Traitement UNIFI√â avec GPT-4o`);
    
    const callStartTime = Date.now();
    const unifiedResponse = await callOpenAI(unifiedPrompt, openaiApiKey, 0.3, 'gpt-4o', 3, 4096);
    const callDuration = Date.now() - callStartTime;
    
    console.log(`‚è±Ô∏è [UNIFIED-TODO-SERVICE] Appel unifi√© termin√© (${callDuration}ms)`);

    // Parser la r√©ponse avec tol√©rance pour le champ action
    let tasksWithRecommendations = [];
    let skippedAsDuplicate = 0;
    let createdCount = 0;
    let existingTodosForDedup = existingTodosContext;
    
    try {
      console.log('üìÑ [UNIFIED-TODO-SERVICE] Raw response length:', unifiedResponse?.length || 0);
      
      // Nettoyer la r√©ponse avant de parser
      const cleanedResponse = unifiedResponse.trim()
        .replace(/^```json\s*/i, '')
        .replace(/^```\s*/i, '')
        .replace(/\s*```\s*$/i, '');
      
      const parsedData = JSON.parse(cleanedResponse);
      tasksWithRecommendations = parsedData.tasks || [];
      console.log(`üìã [UNIFIED-TODO-SERVICE] Parsed ${tasksWithRecommendations.length} tasks avec recommandations`);
      
      // Ignorer le champ action s'il existe encore (tol√©rance)
      tasksWithRecommendations.forEach(task => {
        if (task.action) {
          console.log(`üîÑ [UNIFIED-TODO-SERVICE] Ignoring legacy action field: ${task.action}`);
          delete task.action;
        }
      });
      
    } catch (parseError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error parsing JSON:', parseError);
      console.log('üìÑ [UNIFIED-TODO-SERVICE] Raw response:', unifiedResponse);
      throw new Error('Failed to parse unified response');
    }

    // Fonction de normalisation pour la d√©duplication c√¥t√© code
    const normalizeDescription = (desc: string): string => {
      return desc
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Remove accents
        .replace(/[^\w\s]/g, ' ') // Remove punctuation
        .replace(/\s+/g, ' ') // Normalize spaces
        .trim();
    };

    // Fonction de test de doublon
    const isDuplicate = (candidate: string, existing: string): boolean => {
      const candidateNorm = normalizeDescription(candidate);
      const existingNorm = normalizeDescription(existing);
      
      // Test 1: Match exact sur description normalis√©e
      if (candidateNorm === existingNorm) {
        return true;
      }
      
      // Test 2: Similarit√© par tokens (Jaccard)
      const candidateTokens = new Set(candidateNorm.split(' ').filter(t => t.length > 2));
      const existingTokens = new Set(existingNorm.split(' ').filter(t => t.length > 2));
      
      if (candidateTokens.size === 0 || existingTokens.size === 0) {
        return false;
      }
      
      const intersection = new Set([...candidateTokens].filter(x => existingTokens.has(x)));
      const union = new Set([...candidateTokens, ...existingTokens]);
      const jaccardSimilarity = intersection.size / union.size;
      
      if (jaccardSimilarity > 0.85) {
        return true;
      }
      
      // Test 3: Substring longue (inclusion)
      if (candidateNorm.length > 25 && existingNorm.length > 25) {
        if (candidateNorm.includes(existingNorm) || existingNorm.includes(candidateNorm)) {
          return true;
        }
      }
      
      return false;
    };

    // Set pour √©viter les doublons intra-lot
    const processedDescriptions = new Set<string>();

    // Filtrer les t√¢ches en appliquant la d√©duplication c√¥t√© code
    const filteredTasks = [];
    for (const taskData of tasksWithRecommendations) {
      const description = taskData.description;
      const normalizedDesc = normalizeDescription(description);
      
      // V√©rifier contre les descriptions d√©j√† trait√©es dans ce lot
      if (processedDescriptions.has(normalizedDesc)) {
        console.log(`üîÑ [DEDUP] SKIP intra-batch duplicate: ${description}`);
        skippedAsDuplicate++;
        continue;
      }
      
      // V√©rifier contre les todos existants
      let isExistingDuplicate = false;
      for (const existingTodo of existingTodosForDedup) {
        if (isDuplicate(description, existingTodo.description)) {
          console.log(`üîÑ [DEDUP] SKIP duplicate of existing: "${description}" vs "${existingTodo.description}"`);
          isExistingDuplicate = true;
          skippedAsDuplicate++;
          break;
        }
      }
      
      if (!isExistingDuplicate) {
        filteredTasks.push(taskData);
        processedDescriptions.add(normalizedDesc);
        console.log(`‚úÖ [DEDUP] ACCEPTED new task: ${description}`);
      }
    }

    console.log(`üîç [DEDUP] Filtering results: ${tasksWithRecommendations.length} candidates ‚Üí ${filteredTasks.length} accepted, ${skippedAsDuplicate} skipped as duplicates`);

    // Sauvegarder les t√¢ches filtr√©es
    let totalSuccessful = 0;
    let totalFailed = 0;
    let savedTasks = [];

    console.log(`üíæ [CREATE-ONLY-SERVICE] Sauvegarde de ${filteredTasks.length} t√¢ches nouvelles avec recommandations`);

    for (let i = 0; i < filteredTasks.length; i++) {
      const taskData = filteredTasks[i];
      try {
        console.log(`üíæ [CREATE-ONLY-SERVICE] Sauvegarde t√¢che ${i+1}/${filteredTasks.length}: ${taskData.description}`);
        
        const savedTask = await saveTaskUnified(supabaseClient, taskData, meetingData.id, users, allUsers);
        
        if (savedTask) {
          savedTasks.push(savedTask);
          
          // Cr√©er la recommandation
          if (taskData.hasRecommendation !== false && taskData.recommendation) {
            const { error: recError } = await supabaseClient
              .from('todo_ai_recommendations')
              .insert({
                todo_id: savedTask.id,
                recommendation_text: taskData.recommendation,
                email_draft: taskData.emailDraft || null
              });
            
            if (recError) {
              console.error(`‚ùå [CREATE-ONLY-SERVICE] Erreur sauvegarde recommandation pour t√¢che ${savedTask.id}:`, recError);
            } else {
              console.log(`‚úÖ [CREATE-ONLY-SERVICE] Recommandation sauvegard√©e pour t√¢che ${savedTask.id}`);
            }
          }
          
          // Marquer comme trait√©
          await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', savedTask.id);
          
          totalSuccessful++;
          createdCount++;
          console.log(`‚úÖ [CREATE-ONLY-SERVICE] T√¢che ${i+1} sauvegard√©e avec succ√®s avec ID: ${savedTask.id}`);
        }
        
      } catch (error) {
        console.error(`‚ùå [CREATE-ONLY-SERVICE] Erreur sauvegarde t√¢che ${i+1}:`, error);
        totalFailed++;
      }
    }
    
    console.log(`üèÅ [CREATE-ONLY-SERVICE] Traitement termin√©: ${createdCount} cr√©√©es, ${skippedAsDuplicate} doublons ignor√©s, ${totalFailed} √©checs sur ${tasksWithRecommendations.length} candidates`);
    
    return {
      processed: tasksWithRecommendations.length,
      successful: totalSuccessful,
      failed: totalFailed,
      createdCount: createdCount,
      skippedAsDuplicateCount: skippedAsDuplicate,
      fullyCompleted: true,
      savedTasks: savedTasks,
      unified: true,
      createOnly: true,
      model: 'gpt-4o'
    };
    
  } catch (error) {
    console.error('‚ùå [UNIFIED-TODO-SERVICE] Erreur g√©n√©rale:', error);
    return { 
      processed: 0, 
      successful: 0, 
      failed: 0,
      fullyCompleted: false,
      error: error.message,
      unified: true
    };
  }
}

// Fonction pour sauvegarder UNIQUEMENT de nouvelles t√¢ches (CREATE only)
async function saveTaskUnified(supabaseClient: any, task: any, meetingId: string, meetingUsers: any[], allUsers: any[]) {
  console.log('üíæ [CREATE-ONLY-SERVICE] Creating new task:', task.description);
  console.log('üë• Tous les utilisateurs syst√®me:', allUsers?.map(u => ({ id: u.id, name: u.name })));
  console.log('üë• Participants de la r√©union:', meetingUsers?.map(p => ({ id: p.id, name: p.name })));
  
  try {
    // Fonction pour nettoyer les descriptions
    const makeDescriptionConcise = (description: string): string => {
      if (!description) return '';
      let cleaned = description.trim();
      const sentences = cleaned.split(/[.!?]+/).filter(s => s.trim().length > 0);
      let result = sentences.join('. ').trim();
      if (result && !result.endsWith('.')) {
        result += '.';
      }
      return result;
    };

    // Fonction pour trouver l'utilisateur dans TOUS les utilisateurs du syst√®me
    const findBestUserMatch = (searchName: string, allUsers: any[]): any | null => {
      if (!searchName || !allUsers?.length) return null;

      console.log(`üîç [CREATE-ONLY-SERVICE] Recherche "${searchName}" parmi TOUS les utilisateurs syst√®me`);

      const normalizeUserName = (name: string): string => {
        return name
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .trim();
      };

      const getNameVariants = (searchName: string): string[] => {
        const normalized = normalizeUserName(searchName);
        
        const nameMapping: Record<string, string[]> = {
          'leila': ['le√Øla', 'leila'],
          'emilie': ['√©milie', 'emilie'],
          'david': ['david', 'david tabibian', 'tabibian'],
          'parmice': ['parmice', 'parmis'],
          'sybil': ['sybil'],
          'tabibian': ['tabibian', 'dr tabibian', 'docteur tabibian', 'david tabibian']
        };
        
        for (const [key, variants] of Object.entries(nameMapping)) {
          if (variants.some(variant => normalizeUserName(variant) === normalized)) {
            return variants;
          }
        }
        
        return [searchName];
      };

      const variants = getNameVariants(searchName);
      console.log(`üîÑ [CREATE-ONLY-SERVICE] Variantes test√©es:`, variants);
      
      for (const variant of variants) {
        const normalizedVariant = normalizeUserName(variant);
        
        for (const user of allUsers) {
          const normalizedUserName = normalizeUserName(user.name);
          const normalizedEmail = normalizeUserName(user.email?.split('@')[0] || '');
          
          if (normalizedUserName === normalizedVariant || 
              normalizedEmail === normalizedVariant ||
              normalizedUserName.includes(normalizedVariant) ||
              normalizedVariant.includes(normalizedUserName)) {
            console.log(`‚úÖ [CREATE-ONLY-SERVICE] Correspondance trouv√©e: ${user.name}`);
            return user;
          }
        }
      }
      
      const firstName = normalizeUserName(searchName.split(' ')[0]);
      for (const user of allUsers) {
        const userFirstName = normalizeUserName(user.name.split(' ')[0]);
        if (userFirstName === firstName) {
          console.log(`‚úÖ [CREATE-ONLY-SERVICE] Correspondance par pr√©nom: ${user.name}`);
          return user;
        }
      }
      
      console.log(`‚ö†Ô∏è [CREATE-ONLY-SERVICE] Aucune correspondance trouv√©e pour "${searchName}"`);
      return null;
    };

    const conciseDescription = makeDescriptionConcise(task.description);
    console.log('üìù Description concise:', conciseDescription);

    // Cr√©er UNIQUEMENT une nouvelle t√¢che
    const { data: newTask, error } = await supabaseClient
      .from('todos')
      .insert([{
        description: conciseDescription,
        status: 'confirmed',
        due_date: task.due_date || null
      }])
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error creating new task:', error);
      throw error;
    }

    console.log('‚úÖ Nouvelle t√¢che cr√©√©e avec ID:', newTask.id);

    // Cr√©er le lien avec la r√©union
    const { error: linkError } = await supabaseClient
      .from('todo_meetings')
      .insert([{
        todo_id: newTask.id,
        meeting_id: meetingId
      }]);

    if (linkError) {
      console.error('‚ùå Error linking task to meeting:', linkError);
    } else {
      console.log('‚úÖ T√¢che li√©e √† la r√©union:', meetingId);
    }

    // Traiter les assignations avec TOUS les utilisateurs du syst√®me
    if (task.assigned_to && Array.isArray(task.assigned_to) && task.assigned_to.length > 0) {
      console.log('üë• [CREATE-ONLY-SERVICE] Assignation demand√©e pour:', task.assigned_to);
      
      for (const userName of task.assigned_to) {
        if (!userName || typeof userName !== 'string') continue;
        
        // Chercher parmi TOUS les utilisateurs du syst√®me  
        const user = findBestUserMatch(userName.toString(), allUsers || []);
        
        if (user) {
          // Cr√©er l'assignation (pas de v√©rification d'existant car nouvelles t√¢ches)
          const { error: assignError } = await supabaseClient
            .from('todo_users')
            .insert([{
              todo_id: newTask.id,
              user_id: user.id
            }]);
          
          if (assignError) {
            console.error('‚ùå [CREATE-ONLY-SERVICE] Error assigning user:', assignError);
          } else {  
            console.log('‚úÖ [CREATE-ONLY-SERVICE] User assign√©:', user.name, 'to task:', newTask.id);
          }
        } else {
          console.warn(`‚ö†Ô∏è [CREATE-ONLY-SERVICE] User "${userName}" non trouv√© dans le syst√®me`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è [CREATE-ONLY-SERVICE] Pas de users √† assigner pour cette t√¢che');
    }

    return newTask;
  } catch (error) {
    console.error('‚ùå [CREATE-ONLY-SERVICE] Error in saveTaskUnified:', error);
    throw error;
  }
}
