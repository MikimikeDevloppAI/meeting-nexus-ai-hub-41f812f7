import { createSupabaseClient } from './database-service.ts'
import { callOpenAI } from './openai-service.ts'

export async function processTasksWithRecommendations(
  cleanedTranscript: string, 
  meetingData: any,
  users: any[]
) {
  if (!cleanedTranscript || cleanedTranscript.trim().length === 0) {
    console.log('‚ö° [UNIFIED-TODO-SERVICE] Aucun transcript √† traiter');
    return { processed: 0, successful: 0, failed: 0, fullyCompleted: true };
  }

    console.log(`‚ö° [UNIFIED-TODO-SERVICE] D√âBUT g√©n√©ration UNIFI√âE todos + recommandations avec GPT-5-Mini`);
    console.log(`üë• [UNIFIED-TODO-SERVICE] Users fournis pour assignation:`, users?.map(p => ({ id: p.id, name: p.name, email: p.email })));
    
    const supabaseClient = createSupabaseClient();
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openaiApiKey) {
    throw new Error('OpenAI API key not configured');
  }

  try {
    const userNames = users?.map(p => p.name).join(', ') || '';

    // R√©cup√©rer TOUS les todos existants (non termin√©s) pour √©viter les doublons
    console.log('üìã [UNIFIED-TODO-SERVICE] R√©cup√©ration de tous les todos existants...');
    const { data: allUsers, error: usersError } = await supabaseClient
      .from('users')
      .select('*')
      .order('name');

    if (usersError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error fetching all users:', usersError);
      throw usersError;
    }

    const { data: existingTodos, error: todosError } = await supabaseClient
      .from('todos')
      .select(`
        id,
        description,
        status,
        created_at,
        todo_users(
          user_id,
          users(name)
        )
      `)
      .neq('status', 'completed')
      .order('created_at', { ascending: false });

    if (todosError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error fetching existing todos:', todosError);
    }

    const existingTodosContext = existingTodos?.map(todo => ({
      id: todo.id,
      description: todo.description,
      status: todo.status,
      assignedUsers: todo.todo_users?.map(tu => tu.users?.name).filter(Boolean) || []
    })) || [];

    console.log(`üìã [UNIFIED-TODO-SERVICE] ${existingTodosContext.length} todos existants trouv√©s pour √©viter doublons`);

    const allUserNames = allUsers?.map(u => u.name).join(', ') || '';
    const meetingUserNames = users?.map(p => p.name).join(', ') || '';

    // Prompt unifi√© avec descriptions plus concises et contexte des todos existants
    const unifiedPrompt = `Bas√© sur ce transcript de r√©union, identifie et REGROUPE INTELLIGEMMENT toutes les t√¢ches, actions et suivis par SUJETS COH√âRENTS pour √©viter les doublons. Privil√©gie le regroupement pour minimiser le nombre de t√¢ches.

TOUS LES UTILISATEURS SYST√àME : ${allUserNames}
PARTICIPANTS √Ä CETTE R√âUNION : ${meetingUserNames}

**TODOS EXISTANTS √Ä √âVITER (ne pas recr√©er de doublons) :**
${existingTodosContext.length > 0 ? existingTodosContext.map(todo => 
  `- ${todo.description} (${todo.status}) | Assign√©: ${todo.assignedUsers.join(', ') || 'Non assign√©'}`
).join('\n') : 'Aucun todo existant'}

**R√àGLE CRITIQUE : √âVITER LES DOUBLONS**
- V√âRIFIE attentivement les t√¢ches existantes ci-dessus
- Si une t√¢che similaire existe d√©j√† (m√™me sujet, m√™me action), NE PAS la recr√©er
- Seules les nouvelles t√¢ches vraiment diff√©rentes doivent √™tre cr√©√©es
- En cas de doute, privil√©gier de NE PAS cr√©er plut√¥t que de dupliquer

**R√àGLES DE REGROUPEMENT OBLIGATOIRES:**
- Regroupe toutes les actions li√©es au M√äME SUJET/FOURNISSEUR/OUTIL en UNE SEULE t√¢che
- Une t√¢che = un sujet principal avec un contexte CONCIS et ACTIONNABLE
- √âvite absolument les doublons (ex: "contacter X" et "appeler X" = 1 seule t√¢che)
- Regroupe les actions s√©quentielles (ex: "demander devis" + "comparer prix" + "n√©gocier" = 1 t√¢che compl√®te)
- Privil√©gie les macro-t√¢ches sur les micro-actions
- V√âRIFIE d'abord si une t√¢che similaire existe d√©j√† avant de cr√©er

**R√àGLES DE DESCRIPTION CONCISE:**
- description concise mais qui donne le contexte n√©cessaire pour la compr√©hension
- Utilise un verbe d'action clair (Contacter, Organiser, V√©rifier, Finaliser, etc.)
- Format: "Action + Objet + Contexte "

**R√àGLES D'ASSIGNATION √âTENDUES:**
- Tu peux assigner √† N'IMPORTE QUEL utilisateur du syst√®me (liste compl√®te ci-dessus)
- PRIVIL√âGIE les participants √† cette r√©union : ${meetingUserNames}
- Variantes accept√©es pour correspondance :
  ‚Ä¢ Le√Øla / leila / Leila
  ‚Ä¢ √âmilie / emilie / Emilie  
  ‚Ä¢ David / david / David Tabibian / Tabibian
  ‚Ä¢ Parmice / parmice / Parmis
  ‚Ä¢ Sybil / sybil
- Si une personne dit "je vais faire X" ‚Üí assigne √† cette personne
- Si plusieurs personnes impliqu√©es ‚Üí assigne √† la personne principale
- Si aucune assignation claire, laisse "assigned_to" √† null

**R√àGLES POUR LES RECOMMANDATIONS IA:**
Pour chaque t√¢che, g√©n√®re:
1. **Recommandation d√©taill√©e** qui propose un plan d'ex√©cution, signale les points d'attention, sugg√®re des prestataires/outils, ou challenge les d√©cisions si pertinent.
2. **Email pr√©-r√©dig√© COMPLET** si communication interne est n√©cessaire: direct et concis et si une communication externe est n√©cessaire professionnel avec tout le contexte et tr√®s d√©taill√©s.
3. Si la t√¢che est simple/√©vidente, marque hasRecommendation: false avec "Aucune recommandation n√©cessaire."

Crit√®res qualit√© pour les recommandations:
- Concis, structur√©, actionnable
- Valeur ajout√©e r√©elle pour le cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve
- Pas d'invention de contacts
- √âviter banalit√©s

CONTEXTE R√âUNION:
- Titre: ${meetingData.title || 'R√©union'}
- Date: ${meetingData.created_at || new Date().toISOString()}
- Utilisateurs PR√âSENTS: ${userNames}

Transcript :
${cleanedTranscript}

IMPORTANT: Retourne UNIQUEMENT un JSON valide avec cette structure exacte :
{
  "tasks": [
    {
      "description": "Action concise et claire avec contexte ",
      "assigned_to": ["Nom exact de l'utilisateur tel qu'il appara√Æt dans la liste"] ou null,
      "due_date": "YYYY-MM-DD ou YYYY-MM-DDTHH:MM:SSZ si √©ch√©ance mentionn√©e, sinon null",
      "hasRecommendation": true/false,
      "recommendation": "Recommandation d√©taill√©e ou 'Aucune recommandation n√©cessaire.'",
      "emailDraft": "Email COMPLET (optionnel)" ou null
    }
  ]
}

**R√àGLES POUR LES DATES D'√âCH√âANCE:**
- Si une date ou d√©lai est mentionn√© dans la discussion ("dans 2 semaines", "avant le 15", "d'ici vendredi", "urgent"), calcule la date d'√©ch√©ance correspondante
- Utilise le format ISO standard : YYYY-MM-DDTHH:MM:SSZ pour les dates avec heure, ou YYYY-MM-DD pour les dates simples
- Date de r√©f√©rence : ${new Date().toISOString().split('T')[0]} (aujourd'hui)
- Si aucune √©ch√©ance n'est mentionn√©e, laisse due_date √† null
- Exemples de calculs :
  * "dans 2 semaines" ‚Üí ajouter 14 jours √† aujourd'hui
  * "avant vendredi" ‚Üí calculer le prochain vendredi
  * "fin du mois" ‚Üí dernier jour du mois actuel
  * "urgent" ‚Üí dans 2-3 jours selon le contexte`;

    console.log(`üöÄ [UNIFIED-TODO-SERVICE] Traitement UNIFI√â avec GPT-5-Mini-2025-08-07`);
    
    const callStartTime = Date.now();
    const unifiedResponse = await callOpenAI(unifiedPrompt, openaiApiKey, null, 'gpt-5-mini-2025-08-07', 3, 16384);
    const callDuration = Date.now() - callStartTime;
    
    console.log(`‚è±Ô∏è [UNIFIED-TODO-SERVICE] Appel unifi√© termin√© (${callDuration}ms)`);
    
    // ============= LOGS COMPLETS OPENAI RESPONSE =============
    console.log(`üìä [UNIFIED-TODO-SERVICE] DIAGNOSTIC MEETING ${meetingData.id} - D√âBUT`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Timestamp: ${new Date().toISOString()}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Meeting Title: ${meetingData.title || 'N/A'}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Transcript Length: ${cleanedTranscript?.length || 0} chars`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Model Used: gpt-5-mini-2025-08-07`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Call Duration: ${callDuration}ms`);
    
    // LOG COMPLET DE LA R√âPONSE OPENAI (pas juste un aper√ßu)
    console.log(`üß† [UNIFIED-TODO-SERVICE] R√âPONSE OPENAI COMPL√àTE - Length: ${unifiedResponse?.length || 0}`);
    console.log(`üß† [UNIFIED-TODO-SERVICE] R√âPONSE OPENAI RAW START:`);
    console.log(unifiedResponse || 'RESPONSE IS NULL/UNDEFINED');
    console.log(`üß† [UNIFIED-TODO-SERVICE] R√âPONSE OPENAI RAW END`);

    // Parser la r√©ponse avec logs d√©taill√©s
    let tasksWithRecommendations = [];
    let cleanedResponse = '';
    let parsedData = null;
    
    try {
      console.log('üîÑ [UNIFIED-TODO-SERVICE] √âTAPE 1: Analyse de la r√©ponse brute');
      console.log(`üìÑ [UNIFIED-TODO-SERVICE] Raw response type: ${typeof unifiedResponse}`);
      console.log(`üìÑ [UNIFIED-TODO-SERVICE] Raw response is null/undefined: ${!unifiedResponse}`);
      console.log(`üìÑ [UNIFIED-TODO-SERVICE] Raw response length: ${unifiedResponse?.length || 0}`);
      
      if (!unifiedResponse) {
        throw new Error('OpenAI response is null or undefined');
      }
      
      // Nettoyer la r√©ponse avant de parser
      console.log('üßº [UNIFIED-TODO-SERVICE] √âTAPE 2: Nettoyage de la r√©ponse');
      console.log('üßº [UNIFIED-TODO-SERVICE] R√©ponse AVANT nettoyage (premiers 500 chars):');
      console.log(unifiedResponse.substring(0, 500));
      console.log('üßº [UNIFIED-TODO-SERVICE] R√©ponse AVANT nettoyage (derniers 500 chars):');
      console.log(unifiedResponse.substring(Math.max(0, unifiedResponse.length - 500)));
      
      cleanedResponse = unifiedResponse.trim()
        .replace(/^```json\s*/i, '')
        .replace(/^```\s*/i, '')
        .replace(/\s*```\s*$/i, '');
      
      console.log('üßº [UNIFIED-TODO-SERVICE] R√©ponse APR√àS nettoyage - Length:', cleanedResponse.length);
      console.log('üßº [UNIFIED-TODO-SERVICE] R√©ponse APR√àS nettoyage (premiers 500 chars):');
      console.log(cleanedResponse.substring(0, 500));
      console.log('üßº [UNIFIED-TODO-SERVICE] R√©ponse APR√àS nettoyage (derniers 500 chars):');
      console.log(cleanedResponse.substring(Math.max(0, cleanedResponse.length - 500)));
      
      // Tentative de parsing JSON
      console.log('üìã [UNIFIED-TODO-SERVICE] √âTAPE 3: Tentative de parsing JSON');
      console.log('üìã [UNIFIED-TODO-SERVICE] String to parse (first char):', cleanedResponse.charAt(0));
      console.log('üìã [UNIFIED-TODO-SERVICE] String to parse (last char):', cleanedResponse.charAt(cleanedResponse.length - 1));
      
      parsedData = JSON.parse(cleanedResponse);
      console.log('‚úÖ [UNIFIED-TODO-SERVICE] JSON parsing successful!');
      console.log('üìã [UNIFIED-TODO-SERVICE] Parsed data type:', typeof parsedData);
      console.log('üìã [UNIFIED-TODO-SERVICE] Parsed data keys:', Object.keys(parsedData || {}));
      
      // Validation de la structure
      console.log('üîç [UNIFIED-TODO-SERVICE] √âTAPE 4: Validation de la structure');
      console.log('üîç [UNIFIED-TODO-SERVICE] Has "tasks" property:', 'tasks' in (parsedData || {}));
      console.log('üîç [UNIFIED-TODO-SERVICE] Tasks property type:', typeof parsedData?.tasks);
      console.log('üîç [UNIFIED-TODO-SERVICE] Tasks is array:', Array.isArray(parsedData?.tasks));
      
      tasksWithRecommendations = parsedData.tasks || [];
      console.log(`üìã [UNIFIED-TODO-SERVICE] Extracted ${tasksWithRecommendations.length} tasks`);
      
      // Log d√©taill√© de chaque t√¢che
      console.log('üîç [UNIFIED-TODO-SERVICE] √âTAPE 5: Validation des t√¢ches individuelles');
      tasksWithRecommendations.forEach((task, index) => {
        console.log(`üìã [UNIFIED-TODO-SERVICE] Task ${index + 1}:`);
        console.log(`   - Description: "${task.description || 'MISSING'}"`);
        console.log(`   - Assigned to: ${JSON.stringify(task.assigned_to)}`);
        console.log(`   - Due date: ${task.due_date || 'null'}`);
        console.log(`   - Has recommendation: ${task.hasRecommendation}`);
        console.log(`   - Recommendation length: ${task.recommendation?.length || 0}`);
        console.log(`   - Has email draft: ${!!task.emailDraft}`);
        
        // Validation de chaque t√¢che
        if (!task.description || task.description.trim() === '') {
          console.warn(`‚ö†Ô∏è [UNIFIED-TODO-SERVICE] Task ${index + 1} has empty/missing description!`);
        }
        if (task.assigned_to && !Array.isArray(task.assigned_to)) {
          console.warn(`‚ö†Ô∏è [UNIFIED-TODO-SERVICE] Task ${index + 1} assigned_to is not an array:`, typeof task.assigned_to);
        }
      });
      
      if (tasksWithRecommendations.length === 0) {
        console.warn('‚ö†Ô∏è [UNIFIED-TODO-SERVICE] ALERTE: 0 t√¢che extraite!');
        console.warn('‚ö†Ô∏è [UNIFIED-TODO-SERVICE] Parsed data full object:');
        console.warn(JSON.stringify(parsedData, null, 2));
      }
      
    } catch (parseError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] ERREUR PARSING JSON - DIAGNOSTIC COMPLET');
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error type:', parseError.constructor.name);
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error message:', parseError.message);
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error at position:', parseError.message.match(/position (\d+)/)?.[1] || 'unknown');
      
      // Log de la zone probl√©matique
      if (parseError.message.includes('position')) {
        const position = parseInt(parseError.message.match(/position (\d+)/)?.[1] || '0');
        const start = Math.max(0, position - 100);
        const end = Math.min(cleanedResponse.length, position + 100);
        console.error('‚ùå [UNIFIED-TODO-SERVICE] Problematic area (¬±100 chars around error):');
        console.error(cleanedResponse.substring(start, end));
        console.error('‚ùå [UNIFIED-TODO-SERVICE] Error position marker (^):');
        console.error(' '.repeat(position - start) + '^');
      }
      
      // Log complete de debug
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Complete cleaned response for debug:');
      console.error(cleanedResponse);
      
      // Caract√®res sp√©ciaux
      console.error('‚ùå [UNIFIED-TODO-SERVICE] First 10 chars codes:', 
        Array.from(cleanedResponse.substring(0, 10)).map(c => c.charCodeAt(0)));
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Last 10 chars codes:', 
        Array.from(cleanedResponse.substring(cleanedResponse.length - 10)).map(c => c.charCodeAt(0)));
      
      throw new Error(`Failed to parse unified response: ${parseError.message}`);
    }

    // Sauvegarder les t√¢ches ET les recommandations simultan√©ment
    let totalSuccessful = 0;
    let totalFailed = 0;
    let savedTasks = [];

    console.log(`üíæ [UNIFIED-TODO-SERVICE] Sauvegarde de ${tasksWithRecommendations.length} t√¢ches avec recommandations`);

    for (let i = 0; i < tasksWithRecommendations.length; i++) {
      const taskData = tasksWithRecommendations[i];
      try {
        console.log(`üíæ [UNIFIED-TODO-SERVICE] Sauvegarde t√¢che ${i+1}/${tasksWithRecommendations.length}: ${taskData.description}`);
        
        // 1. Cr√©er la nouvelle t√¢che
        const savedTask = await saveTaskUnified(supabaseClient, taskData, meetingData.id, users, allUsers);
        
        if (savedTask) {
          savedTasks.push(savedTask);
          
          // 2. Cr√©er la recommandation imm√©diatement apr√®s
          if (taskData.hasRecommendation !== false && taskData.recommendation) {
            const { error: recError } = await supabaseClient
              .from('todo_ai_recommendations')
              .insert({
                todo_id: savedTask.id,
                recommendation_text: taskData.recommendation,
                email_draft: taskData.emailDraft || null
              });
            
            if (recError) {
              console.error(`‚ùå [UNIFIED-TODO-SERVICE] Erreur sauvegarde recommandation pour t√¢che ${savedTask.id}:`, recError);
            } else {
              console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Recommandation sauvegard√©e pour t√¢che ${savedTask.id}`);
            }
          }
          
          // 3. Marquer comme trait√©
          await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', savedTask.id);
          
          totalSuccessful++;
          console.log(`‚úÖ [UNIFIED-TODO-SERVICE] T√¢che ${i+1} sauvegard√©e avec succ√®s avec ID: ${savedTask.id}`);
        }
        
      } catch (error) {
        console.error(`‚ùå [UNIFIED-TODO-SERVICE] Erreur sauvegarde t√¢che ${i+1}:`, error);
        totalFailed++;
      }
    }
    
    console.log(`üèÅ [UNIFIED-TODO-SERVICE] Traitement unifi√© termin√©: ${totalSuccessful} succ√®s, ${totalFailed} √©checs sur ${tasksWithRecommendations.length} t√¢ches`);
    
    // ============= LOG R√âCAPITULATIF FINAL PAR R√âUNION =============
    console.log(`üìä [UNIFIED-TODO-SERVICE] ===== R√âSUM√â MEETING ${meetingData.id} =====`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Meeting: "${meetingData.title}"`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Timestamp fin: ${new Date().toISOString()}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Dur√©e totale: ${Date.now() - callStartTime}ms`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Participants: ${users?.map(p => p.name).join(', ') || 'N/A'}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Transcript chars: ${cleanedTranscript?.length || 0}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] OpenAI Response chars: ${unifiedResponse?.length || 0}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Parsing success: ${tasksWithRecommendations.length > 0 ? 'OUI' : 'NON'}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Tasks extraites: ${tasksWithRecommendations.length}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Tasks sauvegard√©es: ${totalSuccessful}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Erreurs: ${totalFailed}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Success rate: ${tasksWithRecommendations.length > 0 ? Math.round((totalSuccessful / tasksWithRecommendations.length) * 100) : 0}%`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] Tasks sauvegard√©es IDs: ${savedTasks.map(t => t.id).join(', ') || 'AUCUNE'}`);
    console.log(`üìä [UNIFIED-TODO-SERVICE] ===== FIN R√âSUM√â MEETING ${meetingData.id} =====`);
    
    return {
      processed: tasksWithRecommendations.length,
      successful: totalSuccessful,
      failed: totalFailed,
      fullyCompleted: true,
      savedTasks: savedTasks,
      unified: true,
      model: 'gpt-5-mini-2025-08-07'
    };
    
  } catch (error) {
    console.error('‚ùå [UNIFIED-TODO-SERVICE] Erreur g√©n√©rale:', error);
    console.error('üîç [UNIFIED-TODO-SERVICE] Stack trace:', error.stack);
    console.error('üîç [UNIFIED-TODO-SERVICE] Error type:', typeof error);
    console.error('üîç [UNIFIED-TODO-SERVICE] Error name:', error.name);
    return { 
      processed: 0, 
      successful: 0, 
      failed: 0,
      fullyCompleted: false,
      error: error.message,
      unified: true,
      model: 'gpt-5-mini-2025-08-07'
    };
  }
}

// Fonction pour sauvegarder une nouvelle t√¢che uniquement
async function saveTaskUnified(supabaseClient: any, task: any, meetingId: string, meetingUsers: any[], allUsers: any[]) {
  console.log('üíæ Creating new task:', task.description);
  console.log('üë• Participants de la r√©union:', meetingUsers?.map(p => ({ id: p.id, name: p.name })));
  console.log('üë• Tous les utilisateurs syst√®me:', allUsers?.map(u => ({ id: u.id, name: u.name })));
  
  try {

    // Fonction pour nettoyer les descriptions
    const makeDescriptionConcise = (description: string): string => {
      if (!description) return '';
      let cleaned = description.trim();
      const sentences = cleaned.split(/[.!?]+/).filter(s => s.trim().length > 0);
      let result = sentences.join('. ').trim();
      if (result && !result.endsWith('.')) {
        result += '.';
      }
      return result;
    };

    // Fonction pour trouver l'utilisateur dans TOUS les utilisateurs du syst√®me
    const findBestUserMatch = (searchName: string, allUsers: any[]): any | null => {
      if (!searchName || !allUsers?.length) return null;

      console.log(`üîç [UNIFIED-TODO-SERVICE] Recherche "${searchName}" parmi TOUS les utilisateurs syst√®me`);

      const normalizeUserName = (name: string): string => {
        return name
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .trim();
      };

      const getNameVariants = (searchName: string): string[] => {
        const normalized = normalizeUserName(searchName);
        
        const nameMapping: Record<string, string[]> = {
          'leila': ['le√Øla', 'leila'],
          'emilie': ['√©milie', 'emilie'],
          'david': ['david', 'david tabibian', 'tabibian'],
          'parmice': ['parmice', 'parmis'],
          'sybil': ['sybil'],
          'tabibian': ['tabibian', 'dr tabibian', 'docteur tabibian', 'david tabibian']
        };
        
        for (const [key, variants] of Object.entries(nameMapping)) {
          if (variants.some(variant => normalizeUserName(variant) === normalized)) {
            return variants;
          }
        }
        
        return [searchName];
      };

      const variants = getNameVariants(searchName);
      console.log(`üîÑ [UNIFIED-TODO-SERVICE] Variantes test√©es:`, variants);
      
      for (const variant of variants) {
        const normalizedVariant = normalizeUserName(variant);
        
        for (const user of allUsers) {
          const normalizedUserName = normalizeUserName(user.name);
          const normalizedEmail = normalizeUserName(user.email?.split('@')[0] || '');
          
          if (normalizedUserName === normalizedVariant || 
              normalizedEmail === normalizedVariant ||
              normalizedUserName.includes(normalizedVariant) ||
              normalizedVariant.includes(normalizedUserName)) {
            console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Correspondance trouv√©e: ${user.name}`);
            return user;
          }
        }
      }
      
      const firstName = normalizeUserName(searchName.split(' ')[0]);
      for (const user of allUsers) {
        const userFirstName = normalizeUserName(user.name.split(' ')[0]);
        if (userFirstName === firstName) {
          console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Correspondance par pr√©nom: ${user.name}`);
          return user;
        }
      }
      
      console.log(`‚ö†Ô∏è [UNIFIED-TODO-SERVICE] Aucune correspondance trouv√©e pour "${searchName}"`);
      return null;
    };

    console.log('üÜï [UNIFIED-TODO-SERVICE] CREATE nouvelle t√¢che');
    
    const conciseDescription = makeDescriptionConcise(task.description);
    console.log('üìù Description concise:', conciseDescription);

    // Cr√©er la nouvelle t√¢che sans meeting_id
    const { data: newTask, error } = await supabaseClient
      .from('todos')
      .insert([{
        description: conciseDescription,
        status: 'confirmed',
        due_date: task.due_date || null
      }])
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error creating new task:', error);
      throw error;
    }

    const savedTask = newTask;
    console.log('‚úÖ Nouvelle t√¢che cr√©√©e avec ID:', savedTask.id);

    // Cr√©er le lien avec la r√©union
    const { error: linkError } = await supabaseClient
      .from('todo_meetings')
      .insert([{
        todo_id: savedTask.id,
        meeting_id: meetingId
      }]);

    if (linkError) {
      console.error('‚ùå Error linking task to meeting:', linkError);
    }
    
    // Traiter les assignations avec TOUS les utilisateurs du syst√®me
    if (task.assigned_to && Array.isArray(task.assigned_to) && task.assigned_to.length > 0) {
      console.log('üë• [UNIFIED-TODO-SERVICE] Assignation demand√©e pour:', task.assigned_to);
      
      for (const userName of task.assigned_to) {
        if (!userName || typeof userName !== 'string') continue;
        
        // Chercher parmi TOUS les utilisateurs du syst√®me
        const user = findBestUserMatch(userName.toString(), allUsers || []);
        
        if (user) {
          // V√©rifier si l'assignation existe d√©j√†
          const { data: existingAssignment } = await supabaseClient
            .from('todo_users')
            .select('id')
            .eq('todo_id', savedTask.id)
            .eq('user_id', user.id)
            .single();

          if (!existingAssignment) {
            const { error: assignError } = await supabaseClient
              .from('todo_users')
              .insert([{
                todo_id: savedTask.id,
                user_id: user.id
              }]);
            
            if (assignError) {
              console.error('‚ùå [UNIFIED-TODO-SERVICE] Error assigning user:', assignError);
            } else {
              console.log('‚úÖ [UNIFIED-TODO-SERVICE] User assign√©:', user.name, 'to task:', savedTask.id);
            }
          } else {
            console.log('‚ÑπÔ∏è [UNIFIED-TODO-SERVICE] User d√©j√† assign√©:', user.name);
          }
        } else {
          console.warn(`‚ö†Ô∏è [UNIFIED-TODO-SERVICE] User "${userName}" non trouv√© dans le syst√®me`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è [UNIFIED-TODO-SERVICE] Pas de users √† assigner pour cette t√¢che');
    }

    return savedTask;
  } catch (error) {
    console.error('‚ùå [UNIFIED-TODO-SERVICE] Error in saveTaskUnified:', error);
    throw error;
  }
}