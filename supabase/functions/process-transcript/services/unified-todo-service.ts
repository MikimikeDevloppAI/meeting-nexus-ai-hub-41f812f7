import { createSupabaseClient } from './database-service.ts'
import { callOpenAI } from './openai-service.ts'

export async function processTasksWithRecommendations(
  cleanedTranscript: string, 
  meetingData: any,
  users: any[]
) {
  if (!cleanedTranscript || cleanedTranscript.trim().length === 0) {
    console.log('‚ö° [UNIFIED-TODO-SERVICE] Aucun transcript √† traiter');
    return { processed: 0, successful: 0, failed: 0, fullyCompleted: true };
  }

  console.log(`‚ö° [UNIFIED-TODO-SERVICE] D√âBUT g√©n√©ration UNIFI√âE todos + recommandations avec GPT-4.1`);
  console.log(`üë• [UNIFIED-TODO-SERVICE] Users fournis pour assignation:`, users?.map(p => ({ id: p.id, name: p.name, email: p.email })));
  
  const supabaseClient = createSupabaseClient();
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openaiApiKey) {
    throw new Error('OpenAI API key not configured');
  }

  try {
    const userNames = users?.map(p => p.name).join(', ') || '';

    // Prompt unifi√© avec descriptions plus concises
    const unifiedPrompt = `Bas√© sur ce transcript de r√©union, identifie et REGROUPE INTELLIGEMMENT toutes les t√¢ches, actions et suivis par SUJETS COH√âRENTS pour √©viter les doublons. Privil√©gie le regroupement pour minimiser le nombre de t√¢ches.

Utilisateurs disponibles dans le syst√®me : ${userNames}

**R√àGLES DE REGROUPEMENT OBLIGATOIRES:**
- Regroupe toutes les actions li√©es au M√äME SUJET/FOURNISSEUR/OUTIL en UNE SEULE t√¢che
- Une t√¢che = un sujet principal avec un contexte CONCIS et ACTIONNABLE
- √âvite absolument les doublons (ex: "contacter X" et "appeler X" = 1 seule t√¢che)
- Regroupe les actions s√©quentielles (ex: "demander devis" + "comparer prix" + "n√©gocier" = 1 t√¢che compl√®te)
- Privil√©gie les macro-t√¢ches sur les micro-actions

**R√àGLES DE DESCRIPTION CONCISE:**
- description concise mais qui donne le contexte n√©cessaire pour la compr√©hension
- Utilise un verbe d'action clair (Contacter, Organiser, V√©rifier, Finaliser, etc.)
- Format: "Action + Objet + Contexte "


**R√àGLES D'ASSIGNATION STRICTES:**
- Utilise SEULEMENT les noms EXACTS de cette liste : ${userNames}
- Variantes accept√©es pour correspondance :
  ‚Ä¢ Le√Øla / leila / Leila
  ‚Ä¢ √âmilie / emilie / Emilie  
  ‚Ä¢ David / david / David Tabibian / Tabibian
  ‚Ä¢ Parmice / parmice / Parmis
  ‚Ä¢ Sybil / sybil
- Si une personne dit "je vais faire X" ‚Üí assigne √† cette personne
- Si plusieurs personnes impliqu√©es ‚Üí assigne √† la personne principale
- Si aucune assignation claire, laisse "assigned_to" √† null
- IMPORTANT: Tu ne peux assigner qu'aux utilisateurs PR√âSENTS dans cette r√©union

**R√àGLES POUR LES RECOMMANDATIONS IA:**
Pour chaque t√¢che, g√©n√®re:
1. **Recommandation d√©taill√©e** qui propose un plan d'ex√©cution, signale les points d'attention, sugg√®re des prestataires/outils, ou challenge les d√©cisions si pertinent.
2. **Email pr√©-r√©dig√© COMPLET** si communication interne est n√©cessaire: direct et concis et si une communication externe est n√©cessaire professionnel avec tout le contexte et tr√®s d√©taill√©s.
3. Si la t√¢che est simple/√©vidente, marque hasRecommendation: false avec "Aucune recommandation n√©cessaire."

Crit√®res qualit√© pour les recommandations:
- Concis, structur√©, actionnable
- Valeur ajout√©e r√©elle pour le cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve
- Pas d'invention de contacts
- √âviter banalit√©s

CONTEXTE R√âUNION:
- Titre: ${meetingData.title || 'R√©union'}
- Date: ${meetingData.created_at || new Date().toISOString()}
- Utilisateurs PR√âSENTS: ${userNames}

Transcript :
${cleanedTranscript}

IMPORTANT: Retourne UNIQUEMENT un JSON valide avec cette structure exacte :
{
  "tasks": [
    {
      "description": "Action concise et claire avec contexte ",
      "assigned_to": ["Nom exact de l'utilisateur tel qu'il appara√Æt dans la liste"] ou null,
      "hasRecommendation": true/false,
      "recommendation": "Recommandation d√©taill√©e ou 'Aucune recommandation n√©cessaire.'",
      "emailDraft": "Email COMPLET (optionnel)" ou null
    }
  ]
}`;

    console.log(`üöÄ [UNIFIED-TODO-SERVICE] Traitement UNIFI√â avec GPT-4.1`);
    
    const callStartTime = Date.now();
    const unifiedResponse = await callOpenAI(unifiedPrompt, openaiApiKey, 0.3, 'gpt-4.1-2025-04-14', 3, 16384);
    const callDuration = Date.now() - callStartTime;
    
    console.log(`‚è±Ô∏è [UNIFIED-TODO-SERVICE] Appel unifi√© termin√© (${callDuration}ms)`);

    // Parser la r√©ponse
    let tasksWithRecommendations = [];
    try {
      console.log('üìÑ [UNIFIED-TODO-SERVICE] Raw response length:', unifiedResponse?.length || 0);
      
      // Nettoyer la r√©ponse avant de parser
      const cleanedResponse = unifiedResponse.trim()
        .replace(/^```json\s*/i, '')
        .replace(/^```\s*/i, '')
        .replace(/\s*```\s*$/i, '');
      
      const parsedData = JSON.parse(cleanedResponse);
      tasksWithRecommendations = parsedData.tasks || [];
      console.log(`üìã [UNIFIED-TODO-SERVICE] Parsed ${tasksWithRecommendations.length} tasks avec recommandations`);
    } catch (parseError) {
      console.error('‚ùå [UNIFIED-TODO-SERVICE] Error parsing JSON:', parseError);
      console.log('üìÑ [UNIFIED-TODO-SERVICE] Raw response:', unifiedResponse);
      throw new Error('Failed to parse unified response');
    }

    // Sauvegarder les t√¢ches ET les recommandations simultan√©ment
    let totalSuccessful = 0;
    let totalFailed = 0;
    let savedTasks = [];

    console.log(`üíæ [UNIFIED-TODO-SERVICE] Sauvegarde de ${tasksWithRecommendations.length} t√¢ches avec recommandations`);

    for (let i = 0; i < tasksWithRecommendations.length; i++) {
      const taskData = tasksWithRecommendations[i];
      try {
        console.log(`üíæ [UNIFIED-TODO-SERVICE] Sauvegarde t√¢che ${i+1}/${tasksWithRecommendations.length}: ${taskData.description}`);
        
        // 1. Cr√©er la t√¢che d'abord avec assignation limit√©e aux users de la r√©union
        const savedTask = await saveTaskUnified(supabaseClient, taskData, meetingData.id, users);
        
        if (savedTask) {
          savedTasks.push(savedTask);
          
          // 2. Cr√©er la recommandation imm√©diatement apr√®s
          if (taskData.hasRecommendation !== false && taskData.recommendation) {
            const { error: recError } = await supabaseClient
              .from('todo_ai_recommendations')
              .insert({
                todo_id: savedTask.id,
                recommendation_text: taskData.recommendation,
                email_draft: taskData.emailDraft || null
              });
            
            if (recError) {
              console.error(`‚ùå [UNIFIED-TODO-SERVICE] Erreur sauvegarde recommandation pour t√¢che ${savedTask.id}:`, recError);
            } else {
              console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Recommandation sauvegard√©e pour t√¢che ${savedTask.id}`);
            }
          }
          
          // 3. Marquer comme trait√©
          await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', savedTask.id);
          
          totalSuccessful++;
          console.log(`‚úÖ [UNIFIED-TODO-SERVICE] T√¢che ${i+1} sauvegard√©e avec succ√®s avec ID: ${savedTask.id}`);
        }
        
      } catch (error) {
        console.error(`‚ùå [UNIFIED-TODO-SERVICE] Erreur sauvegarde t√¢che ${i+1}:`, error);
        totalFailed++;
      }
    }
    
    console.log(`üèÅ [UNIFIED-TODO-SERVICE] Traitement unifi√© termin√©: ${totalSuccessful} succ√®s, ${totalFailed} √©checs sur ${tasksWithRecommendations.length} t√¢ches`);
    
    return {
      processed: tasksWithRecommendations.length,
      successful: totalSuccessful,
      failed: totalFailed,
      fullyCompleted: true,
      savedTasks: savedTasks,
      unified: true,
      model: 'gpt-4.1-2025-04-14'
    };
    
  } catch (error) {
    console.error('‚ùå [UNIFIED-TODO-SERVICE] Erreur g√©n√©rale:', error);
    return { 
      processed: 0, 
      successful: 0, 
      failed: 0,
      fullyCompleted: false,
      error: error.message,
      unified: true
    };
  }
}

// Fonction pour sauvegarder une t√¢che avec assignation limit√©e aux users de la r√©union
async function saveTaskUnified(supabaseClient: any, task: any, meetingId: string, meetingUsers: any[]) {
  console.log('üíæ Saving unified task:', task.description);
  console.log('üë• Users de la r√©union disponibles pour assignation:', meetingUsers?.map(p => ({ id: p.id, name: p.name, email: p.email })));
  
  try {
    // Fonction pour nettoyer les descriptions sans limitation de longueur
    const makeDescriptionConcise = (description: string): string => {
      if (!description) return '';
      
      // Nettoyer la description
      let cleaned = description.trim();
      
      // Supprimer les r√©p√©titions √©videntes et nettoyer
      const sentences = cleaned.split(/[.!?]+/).filter(s => s.trim().length > 0);
      
      // Rejoindre toutes les phrases importantes
      let result = sentences.join('. ').trim();
      
      // S'assurer qu'il y a un point √† la fin
      if (result && !result.endsWith('.')) {
        result += '.';
      }
      
      return result;
    };

    // Fonction pour trouver l'utilisateur UNIQUEMENT parmi les users de la r√©union
    const findBestUserMatch = (searchName: string, users: any[]): any | null => {
      if (!searchName || !users?.length) return null;

      console.log(`üîç [UNIFIED-TODO-SERVICE] Recherche "${searchName}" parmi les users de la r√©union UNIQUEMENT`);

      const normalizeUserName = (name: string): string => {
        return name
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .trim();
      };

      const getNameVariants = (searchName: string): string[] => {
        const normalized = normalizeUserName(searchName);
        
        const nameMapping: Record<string, string[]> = {
          'leila': ['le√Øla', 'leila'],
          'emilie': ['√©milie', 'emilie'],
          'david': ['david', 'david tabibian', 'tabibian'],
          'parmice': ['parmice', 'parmis'],
          'sybil': ['sybil'],
          'tabibian': ['tabibian', 'dr tabibian', 'docteur tabibian', 'david tabibian']
        };
        
        for (const [key, variants] of Object.entries(nameMapping)) {
          if (variants.some(variant => normalizeUserName(variant) === normalized)) {
            return variants;
          }
        }
        
        return [searchName];
      };

      const variants = getNameVariants(searchName);
      console.log(`üîÑ [UNIFIED-TODO-SERVICE] Variantes test√©es:`, variants);
      
      for (const variant of variants) {
        const normalizedVariant = normalizeUserName(variant);
        
        for (const user of users) {
          const normalizedUserName = normalizeUserName(user.name);
          const normalizedEmail = normalizeUserName(user.email?.split('@')[0] || '');
          
          if (normalizedUserName === normalizedVariant || 
              normalizedEmail === normalizedVariant ||
              normalizedUserName.includes(normalizedVariant) ||
              normalizedVariant.includes(normalizedUserName)) {
            console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Correspondance trouv√©e: ${user.name} (pr√©sent √† la r√©union)`);
            return user;
          }
        }
      }
      
      const firstName = normalizeUserName(searchName.split(' ')[0]);
      for (const user of users) {
        const userFirstName = normalizeUserName(user.name.split(' ')[0]);
        if (userFirstName === firstName) {
          console.log(`‚úÖ [UNIFIED-TODO-SERVICE] Correspondance par pr√©nom: ${user.name} (pr√©sent √† la r√©union)`);
          return user;
        }
      }
      
      console.log(`‚ö†Ô∏è [UNIFIED-TODO-SERVICE] Aucune correspondance trouv√©e pour "${searchName}" parmi les users de la r√©union`);
      return null;
    };

    // Rendre la description plus concise
    const conciseDescription = makeDescriptionConcise(task.description);
    console.log('üìù Description concise:', conciseDescription);

    // Cr√©er la t√¢che
    const { data: savedTask, error } = await supabaseClient
      .from('todos')
      .insert([{
        meeting_id: meetingId,
        description: conciseDescription,
        status: 'confirmed',
        due_date: task.due_date || null
      }])
      .select()
      .single()

    if (error) {
      console.error('‚ùå Error saving unified task:', error)
      throw error
    }

    console.log('‚úÖ Unified task saved with ID:', savedTask.id)

    // Traiter les assignations UNIQUEMENT avec les users de la r√©union
    if (task.assigned_to && Array.isArray(task.assigned_to) && task.assigned_to.length > 0) {
      console.log('üë• [UNIFIED-TODO-SERVICE] Assignation demand√©e pour:', task.assigned_to);
      
      for (const userName of task.assigned_to) {
        if (!userName || typeof userName !== 'string') continue;
        
        // Chercher UNIQUEMENT parmi les users de la r√©union
        const user = findBestUserMatch(userName.toString(), meetingUsers || []);
        
        if (user) {
          const { error: assignError } = await supabaseClient
            .from('todo_users')
            .insert([{
              todo_id: savedTask.id,
              user_id: user.id
            }])
          
          if (assignError) {
            console.error('‚ùå [UNIFIED-TODO-SERVICE] Error assigning user:', assignError)
          } else {
            console.log('‚úÖ [UNIFIED-TODO-SERVICE] User assign√©:', user.name, 'to unified task:', savedTask.id)
          }
        } else {
          console.warn(`‚ö†Ô∏è [UNIFIED-TODO-SERVICE] User "${userName}" non trouv√© parmi les users de la r√©union`);
          console.log('üë• [UNIFIED-TODO-SERVICE] Users disponibles:', meetingUsers?.map(p => p.name));
        }
      }
    } else {
      console.log('‚ÑπÔ∏è [UNIFIED-TODO-SERVICE] Pas de users √† assigner pour cette t√¢che');
    }

    return savedTask
  } catch (error) {
    console.error('‚ùå [UNIFIED-TODO-SERVICE] Error in saveTaskUnified:', error)
    throw error
  }
}