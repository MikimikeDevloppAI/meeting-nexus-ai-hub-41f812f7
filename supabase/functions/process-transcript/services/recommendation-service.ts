
import { createSupabaseClient } from './database-service.ts'

export async function processTaskRecommendations(
  tasks: any[], 
  cleanedTranscript: string, 
  meetingData: any,
  participants: any[]
) {
  if (!tasks || tasks.length === 0) {
    console.log('‚ö° [RECOMMENDATION-SERVICE] Aucune t√¢che √† traiter pour les recommandations');
    return { processed: 0, successful: 0, failed: 0, fullyCompleted: true };
  }

  console.log(`‚ö° [RECOMMENDATION-SERVICE] D√âBUT g√©n√©ration des recommandations pour ${tasks.length} t√¢ches`);
  console.log(`üéØ [RECOMMENDATION-SERVICE] T√¢ches re√ßues:`, tasks.map(t => ({ id: t.id, description: t.description?.substring(0, 50) + '...' })));
  
  const supabaseClient = createSupabaseClient();

  try {
    // Pr√©parer les donn√©es pour le prompt
    const tasksForPrompt = tasks.map((task, index) => ({
      index: index,
      id: task.id,
      description: task.description,
      assigned_to: task.todo_participants?.map(tp => tp.participants?.name).join(', ') || 'Non assign√©'
    }));

    const participantNames = participants?.map(p => p.name).join(', ') || '';

    console.log(`üìù [RECOMMENDATION-SERVICE] Pr√©paration du prompt pour ${tasksForPrompt.length} t√¢ches`);
    console.log(`üë• [RECOMMENDATION-SERVICE] Participants pour contexte: ${participantNames}`);
    console.log(`üìÑ [RECOMMENDATION-SERVICE] Transcript length: ${cleanedTranscript?.length || 0} characters`);

    // Cr√©er un prompt pour traiter toutes les t√¢ches d'un coup avec instructions pour r√©ponses d√©taill√©es
    const batchPrompt = `
Tu es un assistant IA sp√©cialis√© dans la g√©n√©ration de recommandations D√âTAILL√âES pour des t√¢ches issues de r√©unions du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve.

Ton objectif est d'analyser la t√¢che et de :
1. Proposer un **plan d'ex√©cution clair** si la t√¢che est complexe ou n√©cessite plusieurs √©tapes.
2. **Signaler les √©l√©ments importants √† consid√©rer** (contraintes r√©glementaires, risques, coordination n√©cessaire, points d'attention).
3. **Sugg√©rer des prestataires, fournisseurs ou outils** qui peuvent faciliter l'ex√©cution.
4. Si pertinent, **challenger les d√©cisions prises** ou proposer une alternative plus efficace ou moins risqu√©e.
5. Ne faire **aucune recommandation** si la t√¢che est simple ou √©vidente (dans ce cas, r√©pondre uniquement : "Aucune recommandation.").
6. Un email pr√©-r√©dig√© COMPLET qui doit comprendre √† qui doit √™tre fait la communication et adapter le ton si l'email doit √™tre envoy√© en interne ou en externe.

Crit√®res de qualit√© :
- Sois **concis, structur√© et actionnable**.
- Fournis uniquement des recommandations qui **ajoutent une vraie valeur**.
- N'invente pas de contacts si tu n'en as pas.
- √âvite les banalit√©s ou les √©vidences.

CONTEXTE DE LA R√âUNION :
- Titre: ${meetingData.title || 'R√©union'}
- Date: ${meetingData.created_at || new Date().toISOString()}
- Participants: ${participantNames}

TRANSCRIPT DE LA R√âUNION :
${cleanedTranscript}

T√ÇCHES √Ä ANALYSER (${tasks.length} t√¢ches) :
${tasksForPrompt.map(task => `
${task.index}. [ID: ${task.id}] ${task.description}
   - Assign√© √†: ${task.assigned_to}
`).join('')}

IMPORTANT : 
- Traite TOUTES les t√¢ches (indices 0 √† ${tasks.length - 1})
- Sois D√âTAILL√â dans chaque recommandation
- D√©veloppe tous les aspects pertinents

R√©ponds UNIQUEMENT en JSON avec cette structure EXACTE :
{
  "recommendations": [
    {
      "taskIndex": 0,
      "taskId": "uuid-de-la-tache",
      "hasRecommendation": true,
      "recommendation": "Recommandation d√©taill√©e...",
      "emailDraft": "Email pr√©-r√©dig√© COMPLET et D√âTAILL√â (optionnel)"
    },
    {
      "taskIndex": 1,
      "taskId": "uuid-de-la-tache",
      "hasRecommendation": true,
      "recommendation": "Recommandation D√âTAILL√âE pour la t√¢che 2...",
      "emailDraft": null
    }
  ]
}

ASSURE-TOI d'inclure TOUTES les ${tasks.length} t√¢ches dans ta r√©ponse.`;

    console.log(`üìè [RECOMMENDATION-SERVICE] Prompt length: ${batchPrompt.length} characters`);
    console.log(`‚è≥ [RECOMMENDATION-SERVICE] Appel task-recommendation-agent pour ${tasks.length} t√¢ches en batch...`);

    // Pr√©parer le payload pour task-recommendation-agent
    const payload = {
      batchPrompt,
      tasks: tasksForPrompt,
      transcript: cleanedTranscript,
      meetingContext: {
        title: meetingData.title || 'R√©union',
        date: meetingData.created_at || new Date().toISOString(),
        participants: participantNames
      }
    };

    console.log(`üì§ [RECOMMENDATION-SERVICE] Payload pr√©par√©:`, {
      promptLength: payload.batchPrompt.length,
      tasksCount: payload.tasks.length,
      transcriptLength: payload.transcript.length,
      meetingContext: payload.meetingContext
    });

    // Appel unique √† OpenAI pour toutes les t√¢ches avec timeout c√¥t√© client
    const callStartTime = Date.now();
    console.log(`üöÄ [RECOMMENDATION-SERVICE] Lancement appel task-recommendation-agent...`);
    
    const { data: batchResult, error: openaiError } = await supabaseClient.functions.invoke('task-recommendation-agent', {
      body: payload
    });
    
    const callDuration = Date.now() - callStartTime;
    console.log(`‚è±Ô∏è [RECOMMENDATION-SERVICE] Appel task-recommendation-agent termin√© (${callDuration}ms)`);

    if (openaiError) {
      console.error('‚ùå [RECOMMENDATION-SERVICE] Erreur lors de l\'appel OpenAI batch:', openaiError);
      console.error('‚ùå [RECOMMENDATION-SERVICE] D√©tails erreur:', JSON.stringify(openaiError, null, 2));
      
      // En cas d'erreur, marquer quand m√™me toutes les t√¢ches comme trait√©es
      console.log('üîß [RECOMMENDATION-SERVICE] Marquage des t√¢ches comme trait√©es malgr√© l\'erreur...');
      for (const task of tasks) {
        try {
          await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', task.id);
          console.log(`‚úÖ [RECOMMENDATION-SERVICE] T√¢che ${task.id} marqu√©e comme trait√©e (erreur)`);
        } catch (updateError) {
          console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur marquage t√¢che ${task.id}:`, updateError);
        }
      }
      
      return { processed: tasks.length, successful: 0, failed: tasks.length, fullyCompleted: true };
    }

    console.log('‚úÖ [RECOMMENDATION-SERVICE] R√©ponse OpenAI batch re√ßue');
    console.log('üìä [RECOMMENDATION-SERVICE] R√©ponse brute structure:', Object.keys(batchResult || {}));
    console.log('üìÑ [RECOMMENDATION-SERVICE] R√©ponse compl√®te:', JSON.stringify(batchResult, null, 2));

    // CORRECTION : Extraction correcte des donn√©es selon la structure retourn√©e
    let recommendations = [];
    
    // V√©rifier les diff√©rentes structures possibles
    if (batchResult?.recommendation?.recommendations) {
      recommendations = batchResult.recommendation.recommendations;
      console.log(`üìã [RECOMMENDATION-SERVICE] Extraction r√©ussie via batchResult.recommendation.recommendations: ${recommendations.length} recommandations`);
    } else if (batchResult?.recommendations) {
      recommendations = batchResult.recommendations;
      console.log(`üìã [RECOMMENDATION-SERVICE] Extraction r√©ussie via batchResult.recommendations: ${recommendations.length} recommandations`);
    } else if (Array.isArray(batchResult)) {
      recommendations = batchResult;
      console.log(`üìã [RECOMMENDATION-SERVICE] Extraction r√©ussie via tableau direct: ${recommendations.length} recommandations`);
    } else {
      console.error('‚ùå [RECOMMENDATION-SERVICE] Structure de r√©ponse inattendue!');
      console.log('üìÑ [RECOMMENDATION-SERVICE] Structure re√ßue:', Object.keys(batchResult || {}));
      console.log('üìÑ [RECOMMENDATION-SERVICE] Contenu complet:', JSON.stringify(batchResult, null, 2));
      recommendations = [];
    }

    console.log(`üìä [RECOMMENDATION-SERVICE] ${recommendations.length} recommandations extraites pour ${tasks.length} t√¢ches`);

    if (recommendations.length === 0) {
      console.error('‚ùå [RECOMMENDATION-SERVICE] Aucune recommandation re√ßue dans la r√©ponse!');
      console.log('üìÑ [RECOMMENDATION-SERVICE] V√©rification de la structure re√ßue:', Object.keys(batchResult || {}));
      
      // Cr√©er des recommandations par d√©faut si aucune n'a √©t√© trouv√©e
      recommendations = tasks.map((task, index) => ({
        taskIndex: index,
        taskId: task.id,
        hasRecommendation: false,
        recommendation: "Aucune recommandation g√©n√©r√©e - erreur de structure de r√©ponse",
        emailDraft: null
      }));
      console.log(`üîß [RECOMMENDATION-SERVICE] Cr√©√© ${recommendations.length} recommandations par d√©faut`);
    }

    // Traitement et sauvegarde des recommandations
    let successful = 0;
    let failed = 0;

    console.log(`üîÑ [RECOMMENDATION-SERVICE] D√©but sauvegarde des ${recommendations.length} recommandations...`);

    for (let i = 0; i < tasks.length; i++) {
      const task = tasks[i];
      try {
        console.log(`üîÑ [RECOMMENDATION-SERVICE] Traitement t√¢che ${i+1}/${tasks.length}: ${task.id}`);
        
        // Trouver la recommandation correspondante par taskId ou par index
        let recommendation = recommendations.find(rec => rec.taskId === task.id);
        
        if (!recommendation) {
          // Fallback : chercher par index
          recommendation = recommendations.find(rec => rec.taskIndex === i);
          console.log(`‚ö†Ô∏è [RECOMMENDATION-SERVICE] Recommandation trouv√©e par index pour t√¢che ${task.id}`);
        }
        
        if (recommendation && recommendation.hasRecommendation !== false) {
          console.log(`üíæ [RECOMMENDATION-SERVICE] Sauvegarde recommandation pour t√¢che ${task.id}`);
          console.log(`üìù [RECOMMENDATION-SERVICE] Recommandation preview: ${recommendation.recommendation?.substring(0, 100)}...`);
          console.log(`üìß [RECOMMENDATION-SERVICE] Email draft: ${recommendation.emailDraft ? 'Oui (' + recommendation.emailDraft.length + ' chars)' : 'Non'}`);
          
          // Sauvegarder la recommandation
          const { error: saveError } = await supabaseClient
            .from('todo_ai_recommendations')
            .insert({
              todo_id: task.id,
              recommendation_text: recommendation.recommendation || "Recommandation g√©n√©r√©e avec succ√®s",
              email_draft: recommendation.emailDraft || null
            });
          
          if (saveError) {
            console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur sauvegarde recommandation pour t√¢che ${task.id}:`, saveError);
            failed++;
          } else {
            console.log(`‚úÖ [RECOMMENDATION-SERVICE] Recommandation sauvegard√©e pour t√¢che ${task.id}`);
            successful++;
          }
          
        } else {
          console.log(`‚ö†Ô∏è [RECOMMENDATION-SERVICE] Pas de recommandation trouv√©e pour t√¢che ${task.id} - cr√©ation d'une recommandation par d√©faut`);
          console.log(`üîç [RECOMMENDATION-SERVICE] Recommandations disponibles:`, recommendations.map(r => ({ taskId: r.taskId, taskIndex: r.taskIndex })));
          
          // Cr√©er une recommandation par d√©faut pour √©viter les blocages
          const { error: saveError } = await supabaseClient
            .from('todo_ai_recommendations')
            .insert({
              todo_id: task.id,
              recommendation_text: "Cette t√¢che n√©cessite votre attention. Veuillez consulter le contexte de la r√©union pour plus de d√©tails.",
              email_draft: null
            });
          
          if (saveError) {
            console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur sauvegarde recommandation par d√©faut pour t√¢che ${task.id}:`, saveError);
            failed++;
          } else {
            console.log(`‚úÖ [RECOMMENDATION-SERVICE] Recommandation par d√©faut sauvegard√©e pour t√¢che ${task.id}`);
            successful++;
          }
        }
        
        // TOUJOURS marquer la t√¢che comme ayant une recommandation IA (m√™me si c'est par d√©faut)
        const { error: updateError } = await supabaseClient
          .from('todos')
          .update({ ai_recommendation_generated: true })
          .eq('id', task.id);
          
        if (updateError) {
          console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur marquage t√¢che ${task.id}:`, updateError);
        } else {
          console.log(`‚úÖ [RECOMMENDATION-SERVICE] T√¢che ${task.id} marqu√©e comme trait√©e`);
        }
        
      } catch (error) {
        console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur lors du traitement de la t√¢che ${task.id}:`, error);
        console.error(`‚ùå [RECOMMENDATION-SERVICE] Stack trace pour t√¢che ${task.id}:`, error.stack);
        
        // En cas d'erreur sur une t√¢che, quand m√™me la marquer comme trait√©e
        try {
          await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', task.id);
          console.log(`‚úÖ [RECOMMENDATION-SERVICE] T√¢che ${task.id} marqu√©e comme trait√©e (apr√®s erreur)`);
        } catch (updateError) {
          console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur final marquage t√¢che ${task.id}:`, updateError);
        }
        
        failed++;
      }
    }
    
    console.log(`üèÅ [RECOMMENDATION-SERVICE] Traitement des recommandations COMPL√àTEMENT termin√©: ${successful} succ√®s, ${failed} √©checs sur ${tasks.length} t√¢ches`);
    
    return {
      processed: tasks.length,
      successful,
      failed,
      fullyCompleted: true
    };
    
  } catch (error) {
    console.error('‚ùå [RECOMMENDATION-SERVICE] Erreur g√©n√©rale lors du traitement batch des recommandations:', error);
    console.error('‚ùå [RECOMMENDATION-SERVICE] Stack trace g√©n√©ral:', error.stack);
    
    // En cas d'erreur g√©n√©rale, marquer quand m√™me toutes les t√¢ches comme trait√©es
    console.log('üîß [RECOMMENDATION-SERVICE] Marquage final des t√¢ches comme trait√©es...');
    for (const task of tasks) {
      try {
        await supabaseClient
          .from('todos')
          .update({ ai_recommendation_generated: true })
          .eq('id', task.id);
        console.log(`‚úÖ [RECOMMENDATION-SERVICE] T√¢che ${task.id} marqu√©e comme trait√©e (erreur g√©n√©rale)`);
      } catch (updateError) {
        console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur final marquage t√¢che ${task.id}:`, updateError);
      }
    }
    
    return { 
      processed: tasks.length, 
      successful: 0, 
      failed: tasks.length,
      fullyCompleted: true,
      error: error.message 
    };
  }
}
