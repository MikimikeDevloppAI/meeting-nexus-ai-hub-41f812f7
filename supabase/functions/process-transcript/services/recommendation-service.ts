
import { createSupabaseClient } from './database-service.ts'

export async function processTaskRecommendations(
  tasks: any[], 
  cleanedTranscript: string, 
  meetingData: any,
  participants: any[]
) {
  if (!tasks || tasks.length === 0) {
    console.log('‚ö° Aucune t√¢che √† traiter pour les recommandations');
    return { processed: 0, successful: 0, failed: 0 };
  }

  console.log(`‚ö° G√©n√©ration des recommandations pour ${tasks.length} t√¢ches EN BATCH UNIQUE`);
  
  const supabaseClient = createSupabaseClient();

  try {
    // Pr√©parer les donn√©es pour le prompt
    const tasksForPrompt = tasks.map((task, index) => ({
      index: index,
      id: task.id,
      description: task.description,
      assigned_to: task.todo_participants?.map(tp => tp.participants?.name).join(', ') || 'Non assign√©'
    }));

    const participantNames = participants?.map(p => p.name).join(', ') || '';

    // Cr√©er un prompt pour traiter toutes les t√¢ches d'un coup
    const batchPrompt = `
Tu es un assistant IA sp√©cialis√© dans la g√©n√©ration de recommandations pour des t√¢ches issues de r√©unions.

CONTEXTE DE LA R√âUNION :
- Titre: ${meetingData.title || 'R√©union'}
- Date: ${meetingData.created_at || new Date().toISOString()}
- Participants: ${participantNames}

TRANSCRIPT DE LA R√âUNION :
${cleanedTranscript}

T√ÇCHES √Ä ANALYSER (${tasks.length} t√¢ches) :
${tasksForPrompt.map(task => `
${task.index}. [ID: ${task.id}] ${task.description}
   - Assign√© √†: ${task.assigned_to}
`).join('')}

INSTRUCTIONS :
G√©n√®re des recommandations IA personnalis√©es pour CHAQUE t√¢che list√©e ci-dessus.
Pour chaque t√¢che, analyse le contexte de la r√©union et g√©n√®re une recommendation qui :

1. Donner des **tips pratiques ou des alertes** sur ce √† quoi il faut faire attention (technique, administratif, juridique, logistique‚Ä¶).
2. Proposer des **options ou choix concrets**, avec leurs avantages/inconv√©nients (ex. : deux types de fontaines √† eau, ou trois options de bureaux ergonomiques).
3. Sugg√©rer des **outils num√©riques, prestataires ou int√©grations utiles** (ex. : plugin Outlook, service de r√©servation, site pour commander‚Ä¶).
4. Alerter sur les **risques ou oublis fr√©quents** li√©s √† cette t√¢che, m√™me s‚Äôils ne sont pas explicitement mentionn√©s.
5. Cr√©er un plan d'action clair est structur√© quand c'est n√©cessaire.
6. √ätre **bref, structur√© et pertinent**, sans remplir s‚Äôil n‚Äôy a rien d‚Äôutile √† ajouter et ne pas juste paraphraser la tache. il faut que les recommendations am√®ne une vrai valeur ajout√©.
7. Un email pr√©-r√©dig√© qui doit comprendre √† qui doit etre fait la communication et adapt√© le ton si l'email doit etre envoy√© en interne ou en externe. si l'email est pour l'interne soit directe si il est destin√© √† l'externe donne tout le contexte n√©cessaire pour que le fournisseur externe comprenne la demande et soit professionnel

IMPORTANT : 
- Traite TOUTES les t√¢ches (indices 0 √† ${tasks.length - 1})
- Assure-toi que chaque recommandation soit pertinente et sp√©cifique √† la t√¢che
- Les recommandations doivent √™tre bas√©es sur le contexte de la r√©union

R√©ponds UNIQUEMENT en JSON avec cette structure EXACTE :
{
  "recommendations": [
    {
      "taskIndex": 0,
      "taskId": "uuid-de-la-tache",
      "hasRecommendation": true,
      "recommendation": "Recommandation d√©taill√©e pour la t√¢che...",
      "emailDraft": "Email pr√©-r√©dig√© si n√©cessaire (optionnel)"
    },
    {
      "taskIndex": 1,
      "taskId": "uuid-de-la-tache",
      "hasRecommendation": true,
      "recommendation": "Recommandation pour la t√¢che 2...",
      "emailDraft": null
    }
  ]
}

ASSURE-TOI d'inclure TOUTES les ${tasks.length} t√¢ches dans ta r√©ponse.`;

    console.log(`‚è≥ Appel OpenAI pour ${tasks.length} t√¢ches en batch...`);

    // Appel unique √† OpenAI pour toutes les t√¢ches
    const { data: batchResult, error: openaiError } = await supabaseClient.functions.invoke('task-recommendation-agent', {
      body: {
        batchPrompt,
        tasks: tasksForPrompt,
        transcript: cleanedTranscript,
        meetingContext: {
          title: meetingData.title || 'R√©union',
          date: meetingData.created_at || new Date().toISOString(),
          participants: participantNames
        }
      }
    });

    if (openaiError) {
      console.error('‚ùå Erreur lors de l\'appel OpenAI batch:', openaiError);
      return { processed: tasks.length, successful: 0, failed: tasks.length };
    }

    console.log('‚úÖ R√©ponse OpenAI batch re√ßue');

    const recommendations = batchResult?.recommendation?.recommendations || [];
    console.log(`üìä ${recommendations.length} recommandations re√ßues pour ${tasks.length} t√¢ches`);

    // Traitement et sauvegarde des recommandations
    let successful = 0;
    let failed = 0;
    const results = [];

    for (const task of tasks) {
      try {
        // Trouver la recommandation correspondante par taskId
        const recommendation = recommendations.find(rec => rec.taskId === task.id);
        
        if (recommendation && recommendation.hasRecommendation) {
          console.log(`üíæ Sauvegarde recommandation pour t√¢che ${task.id}`);
          
          // Sauvegarder la recommandation
          const { error: saveError } = await supabaseClient
            .from('todo_ai_recommendations')
            .insert({
              todo_id: task.id,
              recommendation_text: recommendation.recommendation,
              email_draft: recommendation.emailDraft || null
            });
          
          if (saveError) {
            console.error(`‚ùå Erreur sauvegarde recommandation pour t√¢che ${task.id}:`, saveError);
            failed++;
            results.push({ taskId: task.id, success: false, error: saveError });
            continue;
          }
          
          console.log(`‚úÖ Recommandation sauvegard√©e pour t√¢che ${task.id}`);
          
          // Marquer la t√¢che comme ayant une recommandation IA
          const { error: updateError } = await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', task.id);
            
          if (updateError) {
            console.error(`‚ùå Erreur marquage t√¢che ${task.id}:`, updateError);
          } else {
            console.log(`‚úÖ T√¢che ${task.id} marqu√©e comme trait√©e`);
          }
          
          successful++;
          results.push({ taskId: task.id, success: true });
          
        } else {
          console.log(`‚ö†Ô∏è Pas de recommandation trouv√©e pour t√¢che ${task.id}`);
          failed++;
          results.push({ taskId: task.id, success: false, error: 'No recommendation found in batch response' });
        }
        
      } catch (error) {
        console.error(`‚ùå Erreur lors du traitement de la t√¢che ${task.id}:`, error);
        failed++;
        results.push({ taskId: task.id, success: false, error });
      }
    }
    
    console.log(`üèÅ [BATCH] Traitement termin√©: ${successful} succ√®s, ${failed} √©checs sur ${tasks.length} t√¢ches`);
    
    return {
      processed: tasks.length,
      successful,
      failed,
      results
    };
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du traitement batch des recommandations:', error);
    return { 
      processed: tasks.length, 
      successful: 0, 
      failed: tasks.length,
      error: error.message 
    };
  }
}
