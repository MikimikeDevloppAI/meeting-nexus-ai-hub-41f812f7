√©taill
import { createSupabaseClient } from './database-service.ts'

export async function processTaskRecommendations(
  tasks: any[], 
  cleanedTranscript: string, 
  meetingData: any,
  participants: any[]
) {
  if (!tasks || tasks.length === 0) {
    console.log('‚ö° [RECOMMENDATION-SERVICE] Aucune t√¢che √† traiter pour les recommandations');
    return { processed: 0, successful: 0, failed: 0, fullyCompleted: true };
  }

  console.log(`‚ö° [RECOMMENDATION-SERVICE] D√âBUT g√©n√©ration des recommandations SINGLE BATCH pour ${tasks.length} t√¢ches avec GPT-4.1`);
  
  const supabaseClient = createSupabaseClient();
  
  try {
    const participantNames = participants?.map(p => p.name).join(', ') || '';

    // Traiter TOUTES les t√¢ches en un seul batch optimis√©
    console.log(`üöÄ [RECOMMENDATION-SERVICE] Traitement SINGLE BATCH pour ${tasks.length} t√¢ches`);
    
    const tasksForPrompt = tasks.map((task, index) => ({
      index: index,
      id: task.id,
      description: task.description,
      assigned_to: task.todo_participants?.map(tp => tp.participants?.name).join(', ') || 'Non assign√©'
    }));

    // Prompt optimis√© pour GPT-4.1 - plus concis et efficace
    const optimizedPrompt = `Tu es un assistant IA sp√©cialis√© dans la g√©n√©ration de recommandations D√âTAILL√âES et d'emails pour des t√¢ches du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve.

CONTEXTE R√âUNION:
- Titre: ${meetingData.title || 'R√©union'}
- Date: ${meetingData.created_at || new Date().toISOString()}
- Participants: ${participantNames}

TRANSCRIPT:
${cleanedTranscript}

T√ÇCHES (${tasks.length} total):
${tasksForPrompt.map(task => `
${task.index}. [ID: ${task.id}] ${task.description}
   - Assign√©: ${task.assigned_to}
`).join('')}

INSTRUCTIONS:
Pour chaque t√¢che, g√©n√®re:
1. **Recommandation d√©taill√©e** qui propose un plan d'ex√©cution, signale les points d'attention, sugg√®re des prestataires/outils, ou challenge les d√©cisions si pertinent.
2. **Email pr√©-r√©dig√© COMPLET** si communication n√©cessaire (interne: direct et concis / externe: professionnel avec contexte et tr√®s d√©taill√©s).
3. Si la t√¢che est simple/√©vidente, marque hasRecommendation: false avec "Aucune recommandation n√©cessaire."

Crit√®res qualit√©:
- Concis, structur√©, actionnable
- Valeur ajout√©e r√©elle
- Pas d'invention de contacts
- √âviter banalit√©s

R√©ponds UNIQUEMENT en JSON:
{
  "recommendations": [
    {
      "taskIndex": 0,
      "taskId": "uuid-tache",
      "hasRecommendation": true/false,
      "recommendation": "Recommandation d√©taill√©e...",
      "emailDraft": "Email COMPLET (optionnel)"
    }
  ]
}

IMPORTANT: Inclus TOUTES les ${tasks.length} t√¢ches avec recommandations d√©taill√©es.`;

    const payload = {
      batchPrompt: optimizedPrompt,
      tasks: tasksForPrompt,
      transcript: cleanedTranscript,
      meetingContext: {
        title: meetingData.title || 'R√©union',
        date: meetingData.created_at || new Date().toISOString(),
        participants: participantNames,
        singleBatch: true,
        totalTasks: tasks.length
      }
    };

    console.log(`üì§ [RECOMMENDATION-SERVICE] Envoi SINGLE BATCH √† task-recommendation-agent`);
    const callStartTime = Date.now();

    const { data: batchResult, error: openaiError } = await supabaseClient.functions.invoke('task-recommendation-agent', {
      body: payload
    });
    
    const callDuration = Date.now() - callStartTime;
    console.log(`‚è±Ô∏è [RECOMMENDATION-SERVICE] Single batch termin√© (${callDuration}ms)`);

    if (openaiError) {
      console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur single batch:`, openaiError);
      throw new Error(`Erreur lors de l'appel √† task-recommendation-agent: ${openaiError.message || openaiError}`);
    }

    // Extraire les recommandations
    let recommendations = [];
    if (batchResult?.recommendation?.recommendations) {
      recommendations = batchResult.recommendation.recommendations;
    } else if (batchResult?.recommendations) {
      recommendations = batchResult.recommendations;
    } else if (Array.isArray(batchResult)) {
      recommendations = batchResult;
    }

    console.log(`‚úÖ [RECOMMENDATION-SERVICE] Single batch: ${recommendations.length} recommandations extraites pour ${tasks.length} t√¢ches`);

    // Sauvegarder toutes les recommandations
    let totalSuccessful = 0;
    let totalFailed = 0;

    console.log(`üíæ [RECOMMENDATION-SERVICE] Sauvegarde de ${recommendations.length} recommandations`);

    for (let i = 0; i < tasks.length; i++) {
      const task = tasks[i];
      try {
        // Trouver la recommandation correspondante
        let recommendation = recommendations.find(rec => rec.taskId === task.id);
        
        if (!recommendation) {
          recommendation = recommendations.find(rec => rec.taskIndex === i);
        }
        
        if (!recommendation) {
          recommendation = {
            hasRecommendation: true,
            recommendation: "Recommandation non trouv√©e - veuillez revoir cette t√¢che.",
            emailDraft: null
          };
        }

        // Toujours sauvegarder une recommandation
        const { error: saveError } = await supabaseClient
          .from('todo_ai_recommendations')
          .insert({
            todo_id: task.id,
            recommendation_text: recommendation.recommendation || "Recommandation g√©n√©r√©e avec succ√®s",
            email_draft: recommendation.emailDraft || null
          });
        
        if (saveError) {
          console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur sauvegarde t√¢che ${task.id}:`, saveError);
          totalFailed++;
        } else {
          console.log(`‚úÖ [RECOMMENDATION-SERVICE] Recommandation sauvegard√©e pour t√¢che ${task.id}`);
          totalSuccessful++;
        }
        
        // Marquer la t√¢che comme trait√©e
        await supabaseClient
          .from('todos')
          .update({ ai_recommendation_generated: true })
          .eq('id', task.id);
          
      } catch (error) {
        console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur traitement t√¢che ${task.id}:`, error);
        
        // Cr√©er une recommandation de fallback
        try {
          await supabaseClient
            .from('todo_ai_recommendations')
            .insert({
              todo_id: task.id,
              recommendation_text: `Erreur lors de la g√©n√©ration: ${error.message}. Veuillez revoir cette t√¢che manuellement.`,
              email_draft: null
            });
          
          await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', task.id);
            
          totalSuccessful++; // Consid√©rer comme succ√®s car une recommandation a √©t√© sauv√©e
        } catch (fallbackError) {
          console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur fallback t√¢che ${task.id}:`, fallbackError);
          totalFailed++;
        }
      }
    }
    
    // V√©rification finale
    const { data: finalCheck, error: checkError } = await supabaseClient
      .from('todo_ai_recommendations')
      .select('todo_id, recommendation_text')
      .in('todo_id', tasks.map(t => t.id));

    if (!checkError && finalCheck) {
      console.log(`üîç [RECOMMENDATION-SERVICE] V√©rification finale: ${finalCheck.length}/${tasks.length} recommandations confirm√©es en base`);
    }
    
    console.log(`üèÅ [RECOMMENDATION-SERVICE] Single batch termin√©: ${totalSuccessful} succ√®s, ${totalFailed} √©checs sur ${tasks.length} t√¢ches`);
    
    return {
      processed: tasks.length,
      successful: totalSuccessful,
      failed: totalFailed,
      fullyCompleted: true,
      singleBatch: true,
      model: 'gpt-4.1-2025-04-14'
    };
    
  } catch (error) {
    console.error('‚ùå [RECOMMENDATION-SERVICE] Erreur g√©n√©rale lors du traitement single batch:', error);
    
    // Marquer toutes les t√¢ches comme trait√©es avec recommandations de fallback
    let fallbackSuccessful = 0;
    for (const task of tasks) {
      try {
        await supabaseClient
          .from('todo_ai_recommendations')
          .insert({
            todo_id: task.id,
            recommendation_text: `Erreur syst√®me lors de la g√©n√©ration: ${error.message}. Veuillez revoir cette t√¢che manuellement.`,
            email_draft: null
          });
        
        await supabaseClient
          .from('todos')
          .update({ ai_recommendation_generated: true })
          .eq('id', task.id);
          
        fallbackSuccessful++;
      } catch (fallbackError) {
        console.error(`‚ùå [RECOMMENDATION-SERVICE] Erreur fallback final t√¢che ${task.id}:`, fallbackError);
      }
    }
    
    return { 
      processed: tasks.length, 
      successful: fallbackSuccessful, 
      failed: tasks.length - fallbackSuccessful,
      fullyCompleted: true,
      error: error.message,
      singleBatch: true,
      model: 'gpt-4.1-2025-04-14'
    };
  }
}
