
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.4';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { meetingId, audioUrl, participants, transcript: providedTranscript } = await req.json();
    
    console.log('Processing transcript for meeting:', meetingId);
    console.log('Provided transcript length:', providedTranscript?.length || 0);
    console.log('Available participants:', participants?.length || 0);
    
    if (participants) {
      console.log('Participant names:', participants.map(p => p.name));
    }

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    
    if (!openAIApiKey) {
      console.error('OpenAI API key not configured');
      return new Response(JSON.stringify({ 
        success: true, 
        processedTranscript: providedTranscript || '',
        summary: 'R√©sum√© non disponible - cl√© API OpenAI manquante',
        tasks: [],
        message: 'OpenAI processing skipped - API key not configured'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    let transcriptToProcess = providedTranscript;

    // If no transcript provided but we have audio URL, try to get transcript from AssemblyAI
    if (!transcriptToProcess && audioUrl) {
      const assemblyAIApiKey = Deno.env.get('ASSEMBLYAI_API_KEY');
      
      if (assemblyAIApiKey) {
        console.log('No transcript provided, attempting AssemblyAI transcription...');
        
        // Submit audio for transcription
        const transcriptResponse = await fetch('https://api.assemblyai.com/v2/transcript', {
          method: 'POST',
          headers: {
            'authorization': assemblyAIApiKey,
            'content-type': 'application/json',
          },
          body: JSON.stringify({
            audio_url: audioUrl,
            speaker_labels: true,
          }),
        });

        const transcript = await transcriptResponse.json();
        
        if (transcript.id) {
          // Poll for completion
          let transcriptData;
          let attempts = 0;
          const maxAttempts = 60; // 5 minutes maximum

          while (attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds
            
            const statusResponse = await fetch(`https://api.assemblyai.com/v2/transcript/${transcript.id}`, {
              headers: { 'authorization': assemblyAIApiKey },
            });
            
            transcriptData = await statusResponse.json();
            
            if (transcriptData.status === 'completed') {
              transcriptToProcess = transcriptData.text;
              console.log('AssemblyAI transcription completed, length:', transcriptToProcess?.length || 0);
              break;
            } else if (transcriptData.status === 'error') {
              console.error('AssemblyAI transcription failed:', transcriptData.error);
              break;
            }
            
            attempts++;
          }
        }
      }
    }

    if (!transcriptToProcess) {
      throw new Error('No transcript available for processing');
    }

    console.log('Processing transcript with OpenAI, length:', transcriptToProcess.length);

    // Prepare participant information for the prompt
    const participantList = participants && participants.length > 0 
      ? participants.map((p: any, index: number) => 
          `${p.name}${p.email ? ` (${p.email})` : ''}`
        ).join(', ')
      : 'Aucun participant sp√©cifi√©';

    console.log('Participant list for OpenAI:', participantList);

    // Get meeting info for the summary
    const { data: meetingData } = await supabase
      .from('meetings')
      .select('title, created_at')
      .eq('id', meetingId)
      .single();

    const meetingName = meetingData?.title || 'R√©union';
    const meetingDate = meetingData?.created_at ? new Date(meetingData.created_at).toLocaleDateString('fr-FR') : new Date().toLocaleDateString('fr-FR');

    // Step 1: Clean the transcript with the new specialized prompt
    const cleanPrompt = `Tu es un assistant IA sp√©cialis√© dans la r√©√©criture de transcripts de r√©unions automatiques, cette une r√©union d'un cabinet ophtalmologique √† gen√®ve. 

PARTICIPANTS DE LA R√âUNION:
${participantList}

Tu dois r√©√©crire le transcript pour qu'il soit coh√©rent et compr√©hensible. Retourne UNIQUEMENT le transcript r√©√©crit, sans autre texte.

INSTRUCTIONS PRIORITAIRES:
1. **Correction intelligente des mots** : Si un mot n'a pas de sens dans le contexte, devine le mot r√©el qui a probablement √©t√© dit (erreur de reconnaissance vocale)
2. **Synth√®se intelligente** : R√©sume les passages r√©p√©titifs ou sans valeur ajout√©e tout en gardant l'essentiel
3. **Coh√©rence** : Assure-toi que chaque phrase a du sens et est compr√©hensible
4. **Contextualisation** : Utilise le contexte de la conversation pour corriger les incompr√©hensions
5. **Identification des interlocuteurs** : Remplace les r√©f√©rences g√©n√©riques (Speaker A, Speaker B, etc.) par les  noms fournis dans la liste des  participants
6. **√âlimination du superflu** : Supprime les mots de remplissage, r√©p√©titions inutiles, et passages sans contenu informatif

R√àGLES SP√âCIFIQUES:
- Si un mot semble √™tre une erreur de reconnaissance vocale, replace-le par ce qui a logiquement √©t√© dit
- Condense les longues explications r√©p√©titives en phrases claires et concises  
- Garde tous les points importants, d√©cisions, et informations factuelles
- Am√©liore la grammaire et la syntaxe fran√ßaise
- Structure avec des paragraphes clairs et des noms d'interlocuteurs
- Privil√©gie la clart√© et l'efficacit√© sans perdre le sens original

EXEMPLE DE TRANSFORMATION:
‚ùå "Alors euh, ben comme je disais, le truc de la clim, ben c'est que... euh... on a parl√© avec le, comment il s'appelle d√©j√†, le gars de la maintenance"
‚úÖ "Concernant la climatisation, nous avons discut√© avec le technicien de maintenance"

Transcript √† r√©√©crire:
${transcriptToProcess}`;

    console.log('Sending transcript cleaning request to OpenAI...');

    // Clean transcript with OpenAI
    const cleanResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Tu es un assistant sp√©cialis√© dans la r√©√©criture de transcripts de r√©unions pour cabinet ophtalmologique. Tu retournes UNIQUEMENT le transcript r√©√©crit et coh√©rent.'
          },
          {
            role: 'user',
            content: cleanPrompt
          }
        ],
        max_tokens: 4000,
        temperature: 0.1,
      }),
    });

    if (!cleanResponse.ok) {
      const errorText = await cleanResponse.text();
      console.error('OpenAI transcript cleaning error:', errorText);
      throw new Error(`OpenAI API error: ${errorText}`);
    }

    const cleanData = await cleanResponse.json();
    let cleanedTranscript = cleanData.choices[0].message.content.trim();

    console.log('Transcript cleaning completed, length:', cleanedTranscript.length);

    // Step 2: Generate summary using the new Markdown prompt
    const summaryPrompt = `Tu es un assistant IA sp√©cialis√© dans la r√©daction de r√©sum√©s de r√©unions administratives pour un cabinet ophtalmologique situ√© √† Gen√®ve, dirig√© par le Dr Tabibian.

Voici le transcript nettoy√© d'une r√©union intitul√©e ${meetingName} ayant eu lieu le ${meetingDate}, avec les participants suivants : ${participantList}.

Objectif : G√©n√®re un r√©sum√© structur√© en Markdown, clair, synth√©tique mais complet, qui n'omet aucun point important discut√©. Organise les informations selon les cat√©gories suivantes uniquement si elles ont √©t√© abord√©es :

üß© CAT√âGORIES √Ä UTILISER (uniquement si pertinentes) :
‚Ä¢ Suivi patient
‚Ä¢ Mat√©riel m√©dical
‚Ä¢ Mat√©riel bureau
‚Ä¢ Organisation cabinet
‚Ä¢ Site internet
‚Ä¢ Formation
‚Ä¢ Service cabinet
‚Ä¢ Probl√®mes divers
‚Ä¢ Agenda du personnel

STRUCTURE √Ä RESPECTER :

En-t√™te du r√©sum√© :
**Date :** ${meetingDate}
**R√©union :** ${meetingName}
**Participants :** ${participantList}

Pour chaque cat√©gorie abord√©e :

### [Nom de la cat√©gorie avec emoji]

**Points discut√©s :**
- Liste √† puces des points abord√©s

**D√©cisions prises :**
- Liste √† puces des d√©cisions prises (ou "- Aucune d√©cision")

R√àGLES :
‚Ä¢ Si une cat√©gorie n'a pas √©t√© abord√©e, ne l'affiche pas
‚Ä¢ Utilise les noms des participants dans les d√©cisions/actions
‚Ä¢ Sois pr√©cis et concis
‚Ä¢ Ne renvoie que le r√©sum√© en Markdown
‚Ä¢ Assure-toi de couvrir TOUS les points mentionn√©s dans la r√©union

Retourne UNIQUEMENT le r√©sum√© Markdown structur√©, sans autre texte.

Transcript:
${cleanedTranscript}`;

    console.log('Generating summary with OpenAI...');

    const summaryResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Tu es un assistant sp√©cialis√© dans la cr√©ation de r√©sum√©s de r√©unions pour cabinet m√©dical. Tu retournes UNIQUEMENT du Markdown valide et structur√© par cat√©gories.'
          },
          {
            role: 'user',
            content: summaryPrompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.1,
      }),
    });

    let summary = '**R√©sum√© automatique g√©n√©r√©.**';
    if (summaryResponse.ok) {
      const summaryData = await summaryResponse.json();
      summary = summaryData.choices[0].message.content.trim();
      
      // Remove markdown code block if present
      if (summary.startsWith('```markdown')) {
        summary = summary.replace(/^```markdown\s*/, '').replace(/\s*```$/, '');
      } else if (summary.startsWith('```')) {
        summary = summary.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      console.log('Summary generated successfully, length:', summary.length);
    } else {
      console.error('Summary generation failed');
    }

    // Step 3: Extract tasks using the new improved prompt
    const tasksPrompt = `Tu es un assistant IA sp√©cialis√© dans l'extraction de t√¢ches pour cabinet m√©dical.

Voici le transcript nettoy√© d'une r√©union de cabinet m√©dical avec les participants: ${participantList}

R√àGLES STRICTES POUR L'EXTRACTION:
1. Extrais toutes les t√¢ches importantes et CONCR√àTES 
2. REGROUPE les t√¢ches similaires ou li√©es en une seule t√¢che plus compl√®te
3. √âVITE les t√¢ches trop g√©n√©riques comme "faire le point sur X" 
4. PRIVIL√âGIE les t√¢ches avec des actions concr√®tes et des √©ch√©ances
5. NE PAS cr√©er de t√¢ches redondantes ou en doublon
6. Si plusieurs personnes doivent faire des choses similaires, groupe en une t√¢che

EXEMPLES DE BONNES T√ÇCHES:
- "Contacter 3 prestataires de climatisation et demander des devis d√©taill√©s avant fin mars"
- "Organiser une formation s√©curit√© incendie pour tout le personnel d'ici 2 mois"
- "Mettre √† jour le site web avec les nouvelles sp√©cialit√©s et horaires"

EXEMPLES DE MAUVAISES T√ÇCHES (√Ä √âVITER):
- "Faire le point sur la climatisation"
- "Voir pour la formation"
- "S'occuper du site web"

INSTRUCTIONS SP√âCIFIQUES:
- Inclus les √©ch√©ances quand elles sont mentionn√©es
- Si un nom est mentionn√© pour une t√¢che, l'inclure dans "assignedTo", sinon mettre null
- Formule chaque t√¢che de mani√®re claire et actionnable
- Concentre-toi sur les D√âCISIONS et ACTIONS concr√®tes prises en r√©union

Retourne UNIQUEMENT le tableau JSON, sans autre texte.

FORMAT DE SORTIE:
Retourne un tableau JSON avec cette structure exacte:
[{"task": "description pr√©cise et actionnable", "assignedTo": "nom du participant ou null"}]

Transcript:
${cleanedTranscript}`;

    console.log('Extracting tasks with improved OpenAI prompt...');

    const tasksResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Tu es un assistant sp√©cialis√© dans l\'extraction de t√¢ches concr√®tes pour cabinet m√©dical. Tu retournes UNIQUEMENT un tableau JSON des t√¢ches importantes, regroup√©es et d√©duplic√©es.'
          },
          {
            role: 'user',
            content: tasksPrompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.1,
      }),
    });

    let tasks: any[] = [];
    if (tasksResponse.ok) {
      const tasksData = await tasksResponse.json();
      let tasksContent = tasksData.choices[0].message.content.trim();
      
      // Clean JSON response
      if (tasksContent.startsWith('```json')) {
        tasksContent = tasksContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (tasksContent.startsWith('```')) {
        tasksContent = tasksContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      try {
        tasks = JSON.parse(tasksContent);
        if (!Array.isArray(tasks)) {
          tasks = [];
        }
        console.log('Tasks extracted successfully, count:', tasks.length);
      } catch (parseError) {
        console.error('Tasks JSON parsing failed:', parseError);
        tasks = [];
      }
    } else {
      console.error('Tasks extraction failed');
    }

    // Save the processed results to database
    console.log('Saving cleaned transcript and summary to database...');
    
    const { error: updateError } = await supabase
      .from('meetings')
      .update({
        transcript: cleanedTranscript,
        summary: summary
      })
      .eq('id', meetingId);

    if (updateError) {
      console.error('Error updating meeting:', updateError);
      throw updateError;
    }

    console.log('Meeting updated successfully');

    // Save tasks if any were extracted
    if (tasks.length > 0) {
      console.log('Saving', tasks.length, 'tasks...');
      
      for (const taskObj of tasks) {
        const taskDescription = typeof taskObj === 'string' ? taskObj : taskObj.task;
        const assignedToName = typeof taskObj === 'object' ? taskObj.assignedTo : null;
        
        // Find participant by name
        let assignedParticipantId = null;
        if (assignedToName && participants) {
          const participant = participants.find(p => 
            p.name.toLowerCase().includes(assignedToName.toLowerCase()) ||
            assignedToName.toLowerCase().includes(p.name.toLowerCase().split(' ')[0])
          );
          assignedParticipantId = participant?.id || null;
        }

        console.log('Saving task:', { 
          task: taskDescription.substring(0, 50) + (taskDescription.length > 50 ? '...' : ''), 
          assignedTo: assignedParticipantId ? participants.find(p => p.id === assignedParticipantId)?.name : 'None'
        });

        const { data: todoData, error: todoError } = await supabase
          .from('todos')
          .insert({
            description: taskDescription.trim(),
            status: 'confirmed',
            meeting_id: meetingId,
            assigned_to: assignedParticipantId,
          })
          .select()
          .single();

        if (todoError) {
          console.error('Error saving task:', todoError);
          continue;
        }

        // Create many-to-many relationship if participant assigned
        if (assignedParticipantId && todoData) {
          const { error: participantError } = await supabase
            .from('todo_participants')
            .insert({
              todo_id: todoData.id,
              participant_id: assignedParticipantId
            });
          
          if (participantError) {
            console.error('Error creating todo-participant relationship:', participantError);
          }
        }

        // Generate AI recommendation using the advanced AI agent with concise prompt
        if (todoData) {
          try {
            const aiAgentQuery = `RECOMMANDATION T√ÇCHE OPHTACARE

Tu es un assistant IA expert pour cabinet d'ophtalmologie situ√© √† Gen√®ve, en Suisse. Analyse cette t√¢che et fournis une recommandation UNIQUEMENT si elle apporte une valeur ajout√©e SIGNIFICATIVE.

CONTEXTE IMPORTANT :
- Cabinet d'ophtalmologie √† Gen√®ve, Suisse  
- Pour tous les prix, utilise TOUJOURS les francs suisses (CHF)
- Adapte tes conseils au contexte suisse et genevois

T√ÇCHE: ${taskDescription}

CONTEXTE:
Participants: ${participantList}
R√©union: ${meetingName} du ${meetingDate}
Transcript: ${cleanedTranscript.substring(0, 500)}...

INSTRUCTIONS CRITIQUES:
- R√©ponds UNIQUEMENT en fran√ßais
- Si la t√¢che est √©vidente, simple ou ne n√©cessite aucun conseil sp√©cialis√©, r√©ponds exactement: "AUCUNE_RECOMMANDATION"
- Fournis une recommandation SEULEMENT si tu peux apporter:
  * Des conseils techniques sp√©cialis√©s en ophtalmologie
  * Des informations sur des √©quipements, fournisseurs ou prestataires sp√©cifiques
  * Des bonnes pratiques m√©tier non √©videntes
  * Des points d'attention critiques

- Si tu donnes une recommandation, sois TR√àS CONCIS (maximum 80 mots)
- Concentre-toi sur l'ESSENTIEL et l'ACTIONNABLE
- √âvite les g√©n√©ralit√©s et les conseils √©vidents
- Pour tous les prix mentionn√©s, utilise les CHF (francs suisses)`;

            const response = await supabase.functions.invoke('ai-agent', {
              body: { 
                message: aiAgentQuery,
                todoId: todoData.id,
                taskContext: {
                  todoId: todoData.id,
                  description: taskDescription.trim(),
                  meetingId: meetingId,
                  participantList: participantList,
                  type: 'task_recommendation',
                  cabinet: 'OphtaCare'
                }
              }
            });
            
            if (response.error) {
              console.error('AI agent recommendation request failed:', response.error);
            } else {
              console.log('AI agent recommendation generated for task:', taskDescription.substring(0, 50));
              
              // Extract recommendation from response and add as comment if valuable
              const aiResponse = response.data?.response || '';
              
              if (aiResponse && 
                  !aiResponse.includes('AUCUNE_RECOMMANDATION') && 
                  !aiResponse.toLowerCase().includes('aucune recommandation') &&
                  aiResponse.length > 10) {
                
                // Clean the response
                const cleanedRecommendation = aiResponse
                  .replace(/\[ACTION_TACHE:[^\]]*\]/gs, '')
                  .replace(/\s*CONTEXT_PARTICIPANTS:.*$/gi, '')
                  .trim();

                if (cleanedRecommendation) {
                  await supabase
                    .from('todo_comments')
                    .insert({
                      todo_id: todoData.id,
                      user_id: '00000000-0000-0000-0000-000000000000', // System user for AI
                      comment: `üí° **Conseil IA OphtaCare:** ${cleanedRecommendation}`
                    });
                  
                  console.log('AI recommendation added as comment for task:', taskDescription.substring(0, 50));
                }
              }
            }
          } catch (error) {
            console.error('Error generating AI agent recommendation:', error);
          }
        }

        // Mark that AI recommendation was generated
        if (todoData) {
          await supabase
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', todoData.id);
        }
      }
    }

    console.log('Processing completed successfully');

    return new Response(JSON.stringify({ 
      success: true, 
      processedTranscript: cleanedTranscript,
      summary: summary,
      tasks: tasks.map(t => typeof t === 'string' ? t : t.task),
      tasksCount: tasks.length 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in process-transcript function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

// Helper function for participant matching (kept same as before)
function findBestParticipantMatch(taskText: string, allParticipants: any[]): string | null {
  if (!taskText || !allParticipants?.length) {
    return null;
  }

  const taskLower = taskText.toLowerCase();
  
  // Direct name matching
  for (const participant of allParticipants) {
    const nameLower = participant.name.toLowerCase();
    const nameParts = nameLower.split(' ');
    const firstName = nameParts[0];
    const lastName = nameParts[nameParts.length - 1];
    
    if (taskLower.includes(nameLower) || 
        taskLower.includes(firstName) || 
        (lastName.length > 2 && taskLower.includes(lastName))) {
      return participant.id;
    }
  }

  // Role-based matching
  const roleKeywords = {
    'd√©veloppeur': ['dev', 'd√©veloppeur', 'developer', 'programmeur', 'code', 'technique'],
    'designer': ['design', 'designer', 'ui', 'ux', 'graphique'],
    'manager': ['manager', 'gestionnaire', 'responsable', 'chef'],
    'marketing': ['marketing', 'communication', 'promo'],
    'commercial': ['commercial', 'vente', 'client'],
  };

  for (const participant of allParticipants) {
    const nameLower = participant.name.toLowerCase();
    const emailLower = participant.email?.toLowerCase() || '';
    
    for (const [role, keywords] of Object.entries(roleKeywords)) {
      if (keywords.some(keyword => taskLower.includes(keyword))) {
        if (nameLower.includes(role) || emailLower.includes(role)) {
          return participant.id;
        }
      }
    }
  }

  return allParticipants.length > 0 ? allParticipants[0].id : null;
}
