import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { corsHeaders } from '../_shared/cors.ts';
import { DatabaseAgent } from './agents/database.ts';
import { EmbeddingsAgent } from './agents/embeddings.ts';
import { TaskAgent } from './agents/tasks.ts';
import { CoordinatorAgent } from './agents/coordinator.ts';
// import { InternetAgent } from './agents/internet.ts';

const apiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL');
const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY');

if (!apiKey || !supabaseUrl || !supabaseKey) {
  console.error('Missing required environment variables');
  Deno.exit(1);
}

import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
const supabaseClient = createClient(supabaseUrl, supabaseKey);

serve(async (req) => {
  // Handle CORS preflight request
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { message, context = {} } = await req.json();

    // Initialize agents
    const database = new DatabaseAgent(supabaseClient);
    const embeddings = new EmbeddingsAgent(apiKey, supabaseClient);
    const taskAgent = new TaskAgent(supabaseClient);
    const coordinator = new CoordinatorAgent();
    // const internet = new InternetAgent(apiKey);

    // Extract conversation history from context
    const conversationHistory = context.conversationHistory || [];

    // Enrich message with conversation history
    const enrichedMessage = `${message}\n\n${conversationHistory.slice(-3).map((msg: any) => `${msg.isUser ? 'User' : 'Assistant'}: ${msg.content}`).join('\n')}`;

    console.log('[AI-AGENT-CABINET-MEDICAL] ‚úâÔ∏è Message re√ßu:', message.substring(0, 100));
    console.log('[AI-AGENT-CABINET-MEDICAL] üìú Historique conversation:', conversationHistory.length, 'messages');

    console.log('[AI-AGENT-CABINET-MEDICAL] üß† Phase 1: Analyse intelligente avec historique transmis au coordinateur');
    const analysis = await coordinator.analyzeQuery(enrichedMessage, conversationHistory);
    
    console.log(`[AI-AGENT-CABINET-MEDICAL] üìä Analyse optimis√©e: ${JSON.stringify({
      queryType: analysis.queryType,
      priority: analysis.priority,
      confidence: analysis.confidence,
      temporalRef: analysis.temporalRef,
      isSimple: analysis.queryType === 'simple',
      embeddings: analysis.embeddings,
      database: analysis.database,
      tasks: analysis.tasks,
      internet: analysis.internet,
      historyLength: conversationHistory.length
    })}`);

    let embeddingsResult = { chunks: [], sources: [], hasRelevantContext: false };
    let taskContext = { currentTasks: [], hasTaskContext: false };
    let databaseContext = { meetings: [], documents: [], participants: [], todos: [] };

    // üéØ TRAITEMENT SP√âCIAL: Recherche vectorielle + t√¢ches prioritaire
    if (analysis.priority === 'embeddings_and_tasks') {
      console.log('[AI-AGENT-CABINET-MEDICAL] üéØ Phase sp√©ciale: RECHERCHE VECTORIELLE + T√ÇCHES COMBIN√âE');
      
      // Phase 1: Recherche vectorielle en premier
      console.log('[AI-AGENT-CABINET-MEDICAL] üîç Phase 1a: Recherche vectorielle prioritaire');
      embeddingsResult = await embeddings.searchEmbeddings(message, analysis, [], conversationHistory);
      
      // Phase 1: Recherche t√¢ches sp√©cialis√©e
      console.log('[AI-AGENT-CABINET-MEDICAL] üìã Phase 1b: Recherche t√¢ches sp√©cialis√©e');
      taskContext = await taskAgent.handleTaskRequest(message, analysis, conversationHistory);
      
      // Phase 2: Recherche database compl√©mentaire
      console.log('[AI-AGENT-CABINET-MEDICAL] üóÑÔ∏è Phase 2: Recherche database compl√©mentaire');
      databaseContext = await database.searchContext(enrichedMessage);
    }
    // Traitement existant pour les autres priorit√©s
    else if (analysis.priority === 'direct') {
      console.log('[AI-AGENT-CABINET-MEDICAL] ‚ú® Phase Direct: R√©ponse directe sans recherche');
      return new Response(
        JSON.stringify({ response: 'Bonjour ! Comment puis-je vous aider ?' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    else {
      // Phase 2: Recherche embeddings si n√©cessaire
      if (analysis.embeddings) {
        console.log('[AI-AGENT-CABINET-MEDICAL] üîç Phase 2: Recherche embeddings');
        embeddingsResult = await embeddings.searchEmbeddings(message, analysis, [], conversationHistory);
      }

      // Phase 3: Recherche database compl√©mentaire
      if (analysis.database) {
        console.log('[AI-AGENT-CABINET-MEDICAL] üóÑÔ∏è Phase 3: Recherche database compl√©mentaire');
        databaseContext = await database.searchContext(enrichedMessage);
      }

      // Phase 4: Gestion sp√©cialis√©e des t√¢ches
      if (analysis.tasks) {
        console.log('[AI-AGENT-CABINET-MEDICAL] üìã Phase 4: Gestion t√¢ches sp√©cialis√©e');
        taskContext = await taskAgent.handleTaskRequest(message, analysis, conversationHistory);
      }

      // Phase 5: Recherche internet si n√©cessaire
      if (analysis.internet) {
        console.log('[AI-AGENT-CABINET-MEDICAL] üåê Phase 5: Recherche internet');
        // const internetResults = await internet.searchInternet(message);
        // console.log('[AI-AGENT-CABINET-MEDICAL] üåê R√©sultats Internet:', internetResults.length, 'sources');
      }
    }

    // Feedback loop
    console.log('[AI-AGENT-CABINET-MEDICAL] üëç Analyse feedback (TODO)');

    // Synth√®se et r√©ponse
    console.log('[AI-AGENT-CABINET-MEDICAL] ü§ñ Synth√®se r√©ponse...');
    let combinedSources = [
      ...embeddingsResult.sources || [],
    ];

    // Ajouter les participants au contexte pour les assigner aux t√¢ches
    let contextParticipants = '';
    if (databaseContext.participants && databaseContext.participants.length > 0) {
      contextParticipants = `CONTEXT_PARTICIPANTS: ${databaseContext.participants.map(p => `${p.name} (${p.email} ID: ${p.id})`).join(', ')}`;
    }

    // Construire la r√©ponse
    let response = 'Voici les informations que j\'ai trouv√©es :\n\n';

    if (embeddingsResult.hasRelevantContext) {
      response += 'üîç Contexte pertinent trouv√© dans vos documents.\n';
    }

    if (taskContext.hasTaskContext && taskContext.currentTasks.length > 0) {
      response += '‚úÖ T√¢ches correspondantes trouv√©es :\n';
      taskContext.currentTasks.forEach((task: any) => {
        response += `- ${task.description} (ID: ${task.id})\n`;
      });
    }

    if (databaseContext.meetings && databaseContext.meetings.length > 0) {
      response += 'üìÖ R√©unions correspondantes trouv√©es :\n';
      databaseContext.meetings.forEach((meeting: any) => {
        response += `- ${meeting.name} (ID: ${meeting.id})\n`;
      });
    }

    if (taskContext.pendingTaskCreation && taskContext.pendingTaskCreation.waitingForAssignment) {
      response = `D'accord, je vais cr√©er la t√¢che "${taskContext.pendingTaskCreation.description}". √Ä qui devrais-je assigner cette t√¢che ? ${contextParticipants}`;
    } else if (taskContext.taskCreated) {
      response = `Parfait ! J'ai cr√©√© la t√¢che "${taskContext.taskCreated.description}".`;
    } else if (response === 'Voici les informations que j\'ai trouv√©es :\n\n') {
      response = 'D√©sol√©, je n\'ai pas trouv√© d\'informations pertinentes.';
    }

    // Ajouter le contexte des participants √† la r√©ponse
    response += `\n${contextParticipants}`;

    console.log('[AI-AGENT-CABINET-MEDICAL] ‚úÖ R√©ponse synth√©tis√©e:', response.substring(0, 200));

    return new Response(
      JSON.stringify({ 
        response,
        sources: combinedSources,
        taskContext,
        databaseContext,
        analysis
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('[AI-AGENT-CABINET-MEDICAL] ‚ùå Erreur principale:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
