import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { DatabaseAgent } from './agents/database.ts';
import { EmbeddingsAgent } from './agents/embeddings.ts';
import { TaskAgent } from './agents/tasks.ts';
import { CoordinatorAgent } from './agents/coordinator.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const apiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL');
const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY');

if (!apiKey || !supabaseUrl || !supabaseKey) {
  console.error('Missing required environment variables');
  Deno.exit(1);
}

import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
const supabaseClient = createClient(supabaseUrl, supabaseKey);

serve(async (req) => {
  // Handle CORS preflight request
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { message, context = {}, conversationHistory = [] } = await req.json();

    // Initialize agents
    const database = new DatabaseAgent(supabaseClient);
    const embeddings = new EmbeddingsAgent(apiKey, supabaseClient);
    const taskAgent = new TaskAgent(supabaseClient);
    const coordinator = new CoordinatorAgent(apiKey);

    console.log('[AI-AGENT-CABINET-MEDICAL] ‚úâÔ∏è Message re√ßu:', message.substring(0, 100));
    console.log('[AI-AGENT-CABINET-MEDICAL] üìú Historique conversation:', conversationHistory.length, 'messages');

    // Enrich message with conversation history for analysis
    const enrichedMessage = `${message}\n\n${conversationHistory.slice(-5).map((msg: any) => `${msg.isUser ? 'User' : 'Assistant'}: ${msg.content}`).join('\n')}`;

    // üéØ D√âTECTION SP√âCIALE : Mode recherche de documents UNIQUEMENT vectorielle
    if (context.documentSearchMode || context.forceEmbeddingsPriority || context.vectorSearchOnly) {
      console.log('[AI-AGENT-CABINET-MEDICAL] üîç MODE RECHERCHE DOCUMENTS VECTORIELLE - Historique transmis');
      
      const embeddingsResult = await embeddings.searchEmbeddings(message, {
        priority: 'embeddings',
        embeddings: true,
        database: false,
        tasks: false,
        internet: false,
        queryType: 'document',
        confidence: 0.9
      }, [], conversationHistory);

      console.log('[AI-AGENT-CABINET-MEDICAL] üìä R√©sultats embeddings:', embeddingsResult.chunks?.length || 0, 'chunks trouv√©s');

      // G√©n√©rer une r√©ponse directe en utilisant OpenAI avec historique
      let response = '';
      let actuallyUsedDocuments: string[] = [];
      
      if (embeddingsResult.hasRelevantContext && embeddingsResult.chunks.length > 0) {
        // Construire le contexte pour OpenAI avec les IDs des documents
        const contextText = embeddingsResult.chunks.slice(0, 5).map((chunk, index) => {
          return `Document ID: ${chunk.document_id}\nDocument: ${chunk.document_name || 'Inconnu'}\nContenu: ${chunk.chunk_text}`;
        }).join('\n\n---\n\n');

        // Construire l'historique de conversation
        const conversationContext = conversationHistory.length > 0
          ? '\n\nHISTORIQUE DE CONVERSATION:\n' + 
            conversationHistory.slice(-8).map((msg: any) => `${msg.isUser ? 'Utilisateur' : 'Assistant'}: ${msg.content}`).join('\n')
          : '';

        const prompt = `Tu es l'assistant IA sp√©cialis√© OphtaCare pour le cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve. Tu dois fournir des r√©ponses TR√àS D√âTAILL√âES et COMPL√àTES.

INSTRUCTIONS IMPORTANTES :
- Sois EXTR√äMEMENT D√âTAILL√â dans tes r√©ponses
- D√©veloppe tous les aspects pertinents du sujet
- Fournis des explications approfondies et structur√©es
- Utilise des exemples concrets quand c'est possible
- Structure tes r√©ponses avec des sections claires
- N'h√©site pas √† donner des informations contextuelles suppl√©mentaires
- Sois pr√©cis et professionnel tout en √©tant exhaustif

IMPORTANT POUR LES SOURCES :
√Ä la fin de ta r√©ponse, tu DOIS ajouter une section sp√©ciale qui liste UNIQUEMENT les Document IDs que tu as R√âELLEMENT utilis√©s pour formuler ta r√©ponse. Utilise ce format exact :

[DOCUMENTS_UTILIS√âS]
- ID_DU_DOCUMENT_1
- ID_DU_DOCUMENT_2
(etc.)
[/DOCUMENTS_UTILIS√âS]

Ne liste que les documents dont tu as vraiment lu et utilis√© le contenu pour ta r√©ponse. Si tu n'as utilis√© aucun document sp√©cifique, √©cris [DOCUMENTS_UTILIS√âS]Aucun[/DOCUMENTS_UTILIS√âS]

Question de l'utilisateur: "${message}"

CONTEXTE CONVERSATIONNEL:${conversationContext}

CONTEXTE DES DOCUMENTS TROUV√âS:
${contextText}

R√©ponds de mani√®re TR√àS D√âTAILL√âE et COMPL√àTE en utilisant les informations des documents ET en tenant compte du contexte de la conversation. Si les informations ne sont pas suffisantes, explique clairement ce qui manque et sugg√®re des pistes. Maintiens la coh√©rence avec l'historique de conversation. D√©veloppe tous les aspects pertinents de ta r√©ponse.`;

        const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-4o',
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.3,
            max_tokens: 16384,
          }),
        });

        if (openaiResponse.ok) {
          const data = await openaiResponse.json();
          const fullResponse = data.choices[0]?.message?.content || 'D√©sol√©, je n\'ai pas pu g√©n√©rer une r√©ponse.';
          
          // Extraire la liste des documents utilis√©s
          const usedDocsMatch = fullResponse.match(/\[DOCUMENTS_UTILIS√âS\](.*?)\[\/DOCUMENTS_UTILIS√âS\]/s);
          if (usedDocsMatch) {
            const usedDocsSection = usedDocsMatch[1].trim();
            if (usedDocsSection !== 'Aucun') {
              // Extraire les IDs des documents
              actuallyUsedDocuments = usedDocsSection
                .split('\n')
                .map(line => line.replace(/^- /, '').trim())
                .filter(id => id && id !== '');
            }
            // Nettoyer la r√©ponse en supprimant la section des documents utilis√©s
            response = fullResponse.replace(/\[DOCUMENTS_UTILIS√âS\].*?\[\/DOCUMENTS_UTILIS√âS\]/s, '').trim();
          } else {
            response = fullResponse;
          }
          
          console.log('[AI-AGENT-CABINET-MEDICAL] üìÑ Documents explicitement utilis√©s:', actuallyUsedDocuments);
        } else {
          response = `J'ai trouv√© ${embeddingsResult.chunks.length} √©l√©ment(s) pertinent(s) dans vos documents, mais je n'ai pas pu g√©n√©rer une r√©ponse d√©taill√©e.`;
        }
      } else {
        response = 'Je n\'ai pas trouv√© d\'informations pertinentes dans vos documents pour cette requ√™te. Essayez de reformuler votre question ou v√©rifiez que les documents contiennent les informations recherch√©es.';
      }

      return new Response(
        JSON.stringify({ 
          response,
          sources: embeddingsResult.sources || [],
          actuallyUsedDocuments,
          hasRelevantContext: embeddingsResult.hasRelevantContext,
          searchIterations: embeddingsResult.searchIterations || 0,
          conversationLength: conversationHistory.length
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('[AI-AGENT-CABINET-MEDICAL] üß† Phase 1: Analyse intelligente avec historique');
    const analysis = await coordinator.analyzeQuery(enrichedMessage, conversationHistory);
    
    console.log(`[AI-AGENT-CABINET-MEDICAL] üìä Analyse optimis√©e: ${JSON.stringify({
      queryType: analysis.queryType,
      priority: analysis.priority,
      confidence: analysis.confidence,
      temporalRef: analysis.temporalRef,
      isSimple: analysis.queryType === 'simple',
      embeddings: analysis.embeddings,
      database: analysis.database,
      tasks: analysis.tasks,
      internet: analysis.internet,
      historyLength: conversationHistory.length
    })}`);

    let embeddingsResult = { chunks: [], sources: [], hasRelevantContext: false };
    let taskContext = { currentTasks: [], hasTaskContext: false };
    let databaseContext = { meetings: [], documents: [], participants: [], todos: [] };

    // üéØ TRAITEMENT SP√âCIAL: Recherche vectorielle + t√¢ches prioritaire
    if (analysis.priority === 'embeddings_and_tasks') {
      console.log('[AI-AGENT-CABINET-MEDICAL] üéØ Phase sp√©ciale: RECHERCHE VECTORIELLE + T√ÇCHES COMBIN√âE');
      
      // Phase 1: Recherche vectorielle avec historique
      console.log('[AI-AGENT-CABINET-MEDICAL] üîç Phase 1a: Recherche vectorielle avec historique');
      embeddingsResult = await embeddings.searchEmbeddings(message, analysis, [], conversationHistory);
      
      // Phase 1: Recherche t√¢ches sp√©cialis√©e avec historique
      console.log('[AI-AGENT-CABINET-MEDICAL] üìã Phase 1b: Recherche t√¢ches avec historique');
      taskContext = await taskAgent.handleTaskRequest(message, analysis, conversationHistory);
      
      // Phase 2: Recherche database compl√©mentaire
      console.log('[AI-AGENT-CABINET-MEDICAL] üóÑÔ∏è Phase 2: Recherche database compl√©mentaire');
      databaseContext = await database.searchContext(enrichedMessage);
    }
    // Traitement existant pour les autres priorit√©s
    else if (analysis.priority === 'direct') {
      console.log('[AI-AGENT-CABINET-MEDICAL] ‚ú® Phase Direct: R√©ponse directe sans recherche');
      return new Response(
        JSON.stringify({ 
          response: 'Bonjour ! Comment puis-je vous aider ?',
          conversationLength: conversationHistory.length
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    else {
      // Phase 2: Recherche embeddings si n√©cessaire avec historique
      if (analysis.embeddings) {
        console.log('[AI-AGENT-CABINET-MEDICAL] üîç Phase 2: Recherche embeddings avec historique');
        embeddingsResult = await embeddings.searchEmbeddings(message, analysis, [], conversationHistory);
      }

      // Phase 3: Recherche database compl√©mentaire
      if (analysis.database) {
        console.log('[AI-AGENT-CABINET-MEDICAL] üóÑÔ∏è Phase 3: Recherche database compl√©mentaire');
        databaseContext = await database.searchContext(enrichedMessage);
      }

      // Phase 4: Gestion sp√©cialis√©e des t√¢ches avec historique
      if (analysis.tasks) {
        console.log('[AI-AGENT-CABINET-MEDICAL] üìã Phase 4: Gestion t√¢ches avec historique');
        taskContext = await taskAgent.handleTaskRequest(message, analysis, conversationHistory);
      }
    }

    // Synth√®se et r√©ponse avec prise en compte de l'historique
    console.log('[AI-AGENT-CABINET-MEDICAL] ü§ñ Synth√®se r√©ponse avec historique...');
    let combinedSources = [
      ...embeddingsResult.sources || [],
    ];

    // Ajouter les participants au contexte pour les assigner aux t√¢ches
    let contextParticipants = '';
    if (databaseContext.participants && databaseContext.participants.length > 0) {
      contextParticipants = `CONTEXT_PARTICIPANTS: ${databaseContext.participants.map(p => `${p.name} (${p.email} ID: ${p.id})`).join(', ')}`;
    }

    // Construire la r√©ponse avec contexte d'historique
    let response = '';

    if (embeddingsResult.hasRelevantContext) {
      response += 'üîç Contexte pertinent trouv√© dans vos documents.\n';
    }

    if (taskContext.hasTaskContext && taskContext.currentTasks.length > 0) {
      response += '‚úÖ T√¢ches correspondantes trouv√©es :\n';
      taskContext.currentTasks.forEach((task: any) => {
        response += `- ${task.description} (ID: ${task.id})\n`;
      });
    }

    if (databaseContext.meetings && databaseContext.meetings.length > 0) {
      response += 'üìÖ R√©unions correspondantes trouv√©es :\n';
      databaseContext.meetings.forEach((meeting: any) => {
        response += `- ${meeting.name} (ID: ${meeting.id})\n`;
      });
    }

    if (taskContext.pendingTaskCreation && taskContext.pendingTaskCreation.waitingForAssignment) {
      response = `D'accord, je vais cr√©er la t√¢che "${taskContext.pendingTaskCreation.description}". √Ä qui devrais-je assigner cette t√¢che ? ${contextParticipants}`;
    } else if (taskContext.taskCreated) {
      response = `Parfait ! J'ai cr√©√© la t√¢che "${taskContext.taskCreated.description}".`;
    } else if (response === '') {
      response = 'D√©sol√©, je n\'ai pas trouv√© d\'informations pertinentes. Pouvez-vous reformuler votre question ?';
    }

    // Ajouter le contexte des participants √† la r√©ponse
    response += `\n${contextParticipants}`;

    console.log('[AI-AGENT-CABINET-MEDICAL] ‚úÖ R√©ponse synth√©tis√©e avec historique:', response.substring(0, 200));

    return new Response(
      JSON.stringify({ 
        response,
        sources: combinedSources,
        taskContext,
        databaseContext,
        analysis,
        conversationLength: conversationHistory.length
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('[AI-AGENT-CABINET-MEDICAL] ‚ùå Erreur principale:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
