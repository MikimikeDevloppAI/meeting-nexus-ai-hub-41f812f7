export class SynthesisAgent {
  private openaiApiKey: string;

  constructor(openaiApiKey: string) {
    this.openaiApiKey = openaiApiKey;
  }

  async synthesizeResponse(
    originalQuery: string,
    conversationHistory: any[],
    databaseContext: any,
    embeddingContext: any,
    internetContext: any,
    analysis: any,
    taskContext: any
  ): Promise<string> {
    console.log('[SYNTHESIS] üè• Synth√®se INTELLIGENTE Cabinet Dr Tabibian');

    // PHASE 1: R√âPONSE BAS√âE SUR LA RECHERCHE VECTORIELLE UNIQUEMENT
    console.log('[SYNTHESIS] üéØ Phase 1: R√©ponse bas√©e sur recherche vectorielle');
    
    if (embeddingContext.chunks && embeddingContext.chunks.length > 0) {
      const vectorBasedResponse = await this.generateVectorBasedResponse(
        originalQuery, 
        embeddingContext, 
        analysis
      );
      
      // Si la r√©ponse vectorielle est satisfaisante, la retourner directement
      if (vectorBasedResponse && this.isResponseSatisfactory(vectorBasedResponse, originalQuery)) {
        console.log('[SYNTHESIS] ‚úÖ R√©ponse vectorielle satisfaisante et concise');
        return vectorBasedResponse;
      }
    }

    // PHASE 2: UTILISATION DE LA RECHERCHE INTERNET SI N√âCESSAIRE
    if (internetContext.hasContent) {
      console.log('[SYNTHESIS] üåê Utilisation des donn√©es Internet disponibles');
      return this.generateInternetBasedResponse(originalQuery, internetContext, analysis);
    }

    // PHASE 3: FALLBACK - SYNTH√àSE COMPL√àTE MAIS CONCISE
    console.log('[SYNTHESIS] üîÑ Phase 3: Fallback synth√®se concise');
    return this.generateConciseSynthesis(originalQuery, conversationHistory, databaseContext, embeddingContext, internetContext, analysis, taskContext);
  }

  private async generateVectorBasedResponse(
    originalQuery: string,
    embeddingContext: any,
    analysis: any
  ): Promise<string> {
    const vectorPrompt = `Tu es l'assistant IA du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve.

MISSION : R√©pondre DIRECTEMENT et CONCIS√âMENT √† partir des extraits de documents trouv√©s.

QUESTION : "${originalQuery}"

EXTRAITS PERTINENTS TROUV√âS :
${embeddingContext.chunks.slice(0, 5).map((chunk: any, i: number) => 
  `${i+1}. ${chunk.chunk_text}`
).join('\n\n')}

INSTRUCTIONS STRICTES :
- R√©ponds DIRECTEMENT √† la question de mani√®re concise
- Utilise UNIQUEMENT les informations des extraits
- Sois factuel et pr√©cis
- NE mentionne PAS les sources
- Fournis les d√©tails n√©cessaires selon la question
- Si la r√©ponse est OUI/NON, commence par OUI ou NON

R√âPONSE DIRECTE :`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: vectorPrompt }],
          temperature: 0.1,
          max_tokens: 300,
        }),
      });

      const data = await response.json();
      return data.choices[0]?.message?.content || '';
    } catch (error) {
      console.error('[SYNTHESIS] ‚ùå Erreur r√©ponse vectorielle:', error);
      return '';
    }
  }

  private async generateInternetBasedResponse(
    originalQuery: string,
    internetContext: any,
    analysis: any
  ): Promise<string> {
    const internetPrompt = `Tu es l'assistant IA du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve.

QUESTION : "${originalQuery}"

INFORMATIONS TROUV√âES SUR INTERNET :
${internetContext.content}

INSTRUCTIONS STRICTES :
- Utilise les informations trouv√©es pour r√©pondre directement
- Sois concis et pr√©cis
- NE mentionne PAS que tu utilises Internet
- Contextualise pour le cabinet m√©dical si pertinent
- Reste professionnel

R√âPONSE DIRECTE :`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: internetPrompt }],
          temperature: 0.1,
          max_tokens: 400,
        }),
      });

      const data = await response.json();
      return data.choices[0]?.message?.content || 'Informations non disponibles.';
    } catch (error) {
      console.error('[SYNTHESIS] ‚ùå Erreur r√©ponse Internet:', error);
      return `${internetContext.content}`;
    }
  }

  private isResponseSatisfactory(response: string, originalQuery: string): boolean {
    const positiveIndicators = ['oui', 'effectivement', 'dans', 'mentionn√©', 'parl√©', '√©voqu√©', 'discut√©'];
    const negativeIndicators = ['non', 'pas', 'aucun', 'introuvable', 'absent'];
    
    const lowerResponse = response.toLowerCase();
    const hasPositive = positiveIndicators.some(indicator => lowerResponse.includes(indicator));
    const hasNegative = negativeIndicators.some(indicator => lowerResponse.includes(indicator));
    
    return response.length > 20 && (hasPositive || !hasNegative);
  }

  private async generateConciseSynthesis(
    originalQuery: string,
    conversationHistory: any[],
    databaseContext: any,
    embeddingContext: any,
    internetContext: any,
    analysis: any,
    taskContext: any
  ): Promise<string> {
    console.log('[SYNTHESIS] üè• Synth√®se concise Cabinet Dr Tabibian');

    const contextSummary = this.buildConciseContextSummary(databaseContext, embeddingContext, internetContext, taskContext);
    
    let systemPrompt = `Tu es l'assistant IA du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve.

MISSION : R√©pondre de mani√®re CONCISE et DIRECTE aux questions du cabinet.

CONTEXTE CABINET DR TABIBIAN :
${contextSummary}

R√àGLES DE R√âPONSE STRICTES :
1. **CONCISION** - Sois concis mais fournis les informations n√©cessaires
2. **R√âPONSE DIRECTE** - Vas droit au but
3. **PAS DE SOURCES** - Ne mentionne jamais d'o√π viennent les informations
4. **UTILISATION INTERNET** - Si des informations Internet sont disponibles, utilise-les
5. **CONTEXTE OPHTALMOLOGIE** - Maintiens l'expertise m√©dicale
6. **ACTIONS STRUCTUR√âES** - Utilise [ACTION_TACHE:...] pour les t√¢ches si demand√©

STYLE CABINET M√âDICAL :
- Professionnel mais direct
- Pas d'√©mojis sauf si vraiment pertinent
- R√©ponses factuelles et pr√©cises`;

    if (analysis.queryType === 'task') {
      systemPrompt += `\n\nCONTEXTE T√ÇCHES :
- G√©n√®re l'action [ACTION_TACHE:...] appropri√©e
- Confirme l'action bri√®vement`;
    }

    const conversationContext = this.buildConciseConversationContext(conversationHistory);
    const dataContext = this.buildConciseDataContext(databaseContext, embeddingContext, internetContext);

    const userPrompt = `QUESTION : "${originalQuery}"

${conversationContext ? `CONTEXTE : ${conversationContext}\n` : ''}

${dataContext ? `DONN√âES DISPONIBLES : ${dataContext}\n` : ''}

${taskContext.hasTaskContext ? `T√ÇCHES EN COURS : ${taskContext.currentTasks.length}` : ''}

INSTRUCTIONS :
- R√©ponds DIRECTEMENT et de mani√®re appropri√©e √† la question
- Utilise les donn√©es disponibles
- Sois concis mais complet selon le besoin
- Pas de mention des sources`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          temperature: 0.2,
          max_tokens: 500,
        }),
      });

      const data = await response.json();
      let finalResponse = data.choices[0]?.message?.content || 'D√©sol√©, je n\'ai pas pu traiter votre demande.';

      console.log('[SYNTHESIS] ‚úÖ R√©ponse concise g√©n√©r√©e');
      return finalResponse;

    } catch (error) {
      console.error('[SYNTHESIS] ‚ùå Erreur:', error);
      return this.generateConciseFallback(originalQuery, databaseContext, embeddingContext, taskContext);
    }
  }

  private buildConciseContextSummary(databaseContext: any, embeddingContext: any, internetContext: any, taskContext: any): string {
    const parts = [];

    if (taskContext.hasTaskContext) {
      parts.push(`${taskContext.currentTasks.length} t√¢ches`);
    }

    if (databaseContext.meetings?.length > 0) {
      parts.push(`${databaseContext.meetings.length} r√©unions`);
    }

    if (embeddingContext.hasRelevantContext) {
      parts.push(`${embeddingContext.chunks.length} √©l√©ments trouv√©s`);
    }

    if (internetContext.hasContent) {
      parts.push(`informations internet disponibles`);
    }

    return parts.length > 0 ? parts.join(', ') : 'donn√©es cabinet disponibles';
  }

  private buildConciseConversationContext(conversationHistory: any[]): string {
    if (!conversationHistory || conversationHistory.length === 0) return '';
    
    const lastMessage = conversationHistory[conversationHistory.length - 1];
    return lastMessage ? lastMessage.content.substring(0, 100) : '';
  }

  private buildConciseDataContext(databaseContext: any, embeddingContext: any, internetContext: any): string {
    const dataParts = [];

    if (databaseContext.meetings?.length > 0) {
      dataParts.push(`${databaseContext.meetings.length} r√©union(s)`);
    }

    if (embeddingContext.chunks?.length > 0) {
      dataParts.push(`${embeddingContext.chunks.length} √©l√©ment(s) pertinent(s)`);
    }

    if (internetContext.hasContent) {
      dataParts.push(`donn√©es internet`);
    }

    return dataParts.join(', ');
  }

  private generateConciseFallback(originalQuery: string, databaseContext: any, embeddingContext: any, taskContext: any): string {
    const hasData = databaseContext.meetings?.length > 0 || embeddingContext.chunks?.length > 0 || taskContext.hasTaskContext;
    
    if (hasData) {
      return `Je rencontre un probl√®me technique temporaire. Pouvez-vous reformuler votre question concernant "${originalQuery}" ?`;
    }

    return `Je suis disponible pour vous aider avec votre cabinet d'ophtalmologie. Pouvez-vous pr√©ciser votre demande ?`;
  }
}
