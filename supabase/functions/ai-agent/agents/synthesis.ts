
export class SynthesisAgent {
  private openaiApiKey: string;

  constructor(openaiApiKey: string) {
    this.openaiApiKey = openaiApiKey;
  }

  async synthesizeResponse(
    originalQuery: string,
    conversationHistory: any[],
    databaseContext: any,
    embeddingContext: any,
    internetContext: any,
    analysis: any,
    taskContext: any
  ): Promise<string> {
    console.log('[SYNTHESIS] üß† Synth√®se SUPER-INTELLIGENTE OphtaCare');

    const contextSummary = this.buildIntelligentContextSummary(databaseContext, embeddingContext, internetContext, taskContext);
    const confidence = analysis.confidenceLevel || 0.7;
    
    let systemPrompt = `Tu es l'assistant IA SUPER-INTELLIGENT OphtaCare du Dr Tabibian, cabinet d'ophtalmologie √† Gen√®ve.

MISSION INTELLIGENTE :
- Fournir des r√©ponses pr√©cises bas√©es sur les DONN√âES R√âELLES du cabinet
- Toujours contextualiser pour l'ophtalmologie genevoise (CHF, syst√®me suisse)
- √ätre capable de r√©pondre M√äME si les donn√©es sont limit√©es
- Maintenir un niveau d'expertise m√©dicale √©lev√©

DONN√âES DISPONIBLES ACTUELLEMENT :
${contextSummary}

NIVEAU DE CONFIANCE : ${(confidence * 100).toFixed(0)}%

R√àGLES DE R√âPONSE INTELLIGENTE :
1. **PRIORIT√â AUX DONN√âES R√âELLES** - Utilise d'abord les donn√©es OphtaCare disponibles
2. **R√âPONSES COMPL√àTES** - Fournis toujours une r√©ponse utile, m√™me avec donn√©es limit√©es  
3. **CONTEXTE M√âDICAL** - Maintiens l'expertise ophtalmologique et le contexte genevois
4. **TRANSPARENCE** - Indique clairement si tu utilises des donn√©es internes ou des recommandations g√©n√©rales
5. **ACTIONS STRUCTUR√âES** - Utilise la syntaxe [ACTION_TACHE:...] pour les t√¢ches

SYNTAXE ACTIONS T√ÇCHES :
- [ACTION_TACHE:TYPE=create,description="Description pr√©cise",assigned_to="Nom personne"]
- [ACTION_TACHE:TYPE=update,id="ID",description="Nouvelle description"]
- [ACTION_TACHE:TYPE=complete,id="ID"]
- [ACTION_TACHE:TYPE=delete,id="ID"]

STYLE INTELLIGENT :
- Professionnel mais accessible
- Sp√©cialis√© ophtalmologie Gen√®ve
- Utilise les √©mojis m√©dicaux appropri√©s : üëÅÔ∏è üè• üìã üíä üîç
- Montre ta compr√©hension du contexte suisse`;

    // Enrichissement selon le type de requ√™te
    if (analysis.queryType === 'meeting' && databaseContext.meetings?.length > 0) {
      systemPrompt += `\n\nCONTEXTE R√âUNIONS SP√âCIAL :
- ${databaseContext.meetings.length} r√©union(s) trouv√©e(s) dans les donn√©es
- Utilise les informations r√©elles des transcripts pour r√©pondre
- Sois pr√©cis sur les dates et contenus mentionn√©s`;
    }

    if (analysis.queryType === 'task') {
      systemPrompt += `\n\nCONTEXTE T√ÇCHES SP√âCIAL :
- L'utilisateur demande une gestion de t√¢ches
- G√©n√®re l'action appropri√©e avec la syntaxe [ACTION_TACHE:...]
- Confirme l'action dans ta r√©ponse`;
    }

    // Construction du contexte conversationnel intelligent
    const conversationContext = this.buildConversationContext(conversationHistory);
    
    // Construction du contexte de donn√©es enrichi
    const dataContext = this.buildDataContext(databaseContext, embeddingContext, internetContext);

    const userPrompt = `QUESTION UTILISATEUR : "${originalQuery}"

${conversationContext ? `CONTEXTE CONVERSATION :\n${conversationContext}\n` : ''}

${dataContext ? `DONN√âES OPHTACARE DISPONIBLES :\n${dataContext}\n` : ''}

${taskContext.hasTaskContext ? `
T√ÇCHES EN COURS (${taskContext.currentTasks.length}) :
${taskContext.currentTasks.slice(0, 10).map(task => `- ${task.description} (${task.status}) ${task.assigned_to ? `- Assign√©: ${task.assigned_to}` : ''}`).join('\n')}
` : ''}

INSTRUCTIONS INTELLIGENTES :
- R√©ponds directement et compl√®tement √† la question
- Utilise PRIORITAIREMENT les donn√©es OphtaCare si disponibles
- Si donn√©es limit√©es, fournis quand m√™me une r√©ponse utile avec recommandations g√©n√©rales
- Maintiens le contexte ophtalmologique genevois
- Sois pr√©cis sur les sources utilis√©es (donn√©es internes vs conseils g√©n√©raux)
- G√©n√®re les actions [ACTION_TACHE:...] si demand√©
- TOUJOURS donner une r√©ponse, m√™me si elle est partielle`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          temperature: 0.7,
          max_tokens: 1200, // Plus de tokens pour r√©ponses compl√®tes
        }),
      });

      const data = await response.json();
      let finalResponse = data.choices[0]?.message?.content || 'D√©sol√©, je n\'ai pas pu traiter votre demande.';

      // Enrichissement intelligent de la r√©ponse
      finalResponse = this.enrichResponseWithContext(finalResponse, analysis, confidence, databaseContext, embeddingContext);

      console.log('[SYNTHESIS] ‚úÖ R√©ponse super-intelligente g√©n√©r√©e');
      return finalResponse;

    } catch (error) {
      console.error('[SYNTHESIS] ‚ùå Erreur:', error);
      
      // R√©ponse de fallback intelligente m√™me en cas d'erreur
      return this.generateIntelligentFallback(originalQuery, databaseContext, embeddingContext, taskContext);
    }
  }

  private buildIntelligentContextSummary(databaseContext: any, embeddingContext: any, internetContext: any, taskContext: any): string {
    const parts = [];

    if (taskContext.hasTaskContext) {
      parts.push(`üìã T√¢ches: ${taskContext.currentTasks.length} en cours`);
    }

    if (databaseContext.meetings?.length > 0) {
      parts.push(`üè• R√©unions: ${databaseContext.meetings.length} trouv√©es`);
    }

    if (databaseContext.documents?.length > 0) {
      parts.push(`üìÅ Documents: ${databaseContext.documents.length} disponibles`);
    }

    if (embeddingContext.hasRelevantContext) {
      parts.push(`üéØ Donn√©es vectorielles: ${embeddingContext.chunks.length} √©l√©ments pertinents`);
    }

    if (internetContext.hasContent) {
      parts.push(`üåê Enrichissement: Informations compl√©mentaires disponibles`);
    }

    return parts.length > 0 ? parts.join(' | ') : 'Base de donn√©es OphtaCare disponible';
  }

  private buildConversationContext(conversationHistory: any[]): string {
    if (!conversationHistory || conversationHistory.length === 0) return '';
    
    const recentMessages = conversationHistory.slice(-6).map(msg => 
      `${msg.isUser ? 'üë§ Patient/√âquipe' : 'ü§ñ OphtaCare'}: ${msg.content.substring(0, 150)}${msg.content.length > 150 ? '...' : ''}`
    );
    
    return recentMessages.join('\n');
  }

  private buildDataContext(databaseContext: any, embeddingContext: any, internetContext: any): string {
    const dataParts = [];

    // Contexte des r√©unions avec d√©tails
    if (databaseContext.meetings?.length > 0) {
      dataParts.push(`\nüè• R√âUNIONS TROUV√âES (${databaseContext.meetings.length}) :`);
      databaseContext.meetings.slice(0, 3).forEach((meeting: any, i: number) => {
        dataParts.push(`  ${i+1}. ${meeting.title} - ${meeting.created_at ? new Date(meeting.created_at).toLocaleDateString() : 'Date inconnue'}`);
        if (meeting.summary) {
          dataParts.push(`     R√©sum√©: ${meeting.summary.substring(0, 200)}${meeting.summary.length > 200 ? '...' : ''}`);
        }
      });
    }

    // Contexte des chunks avec relevance
    if (embeddingContext.chunks?.length > 0) {
      dataParts.push(`\nüéØ CONTENU PERTINENT (${embeddingContext.chunks.length} √©l√©ments) :`);
      embeddingContext.chunks.slice(0, 3).forEach((chunk: any, i: number) => {
        dataParts.push(`  ${i+1}. ${chunk.chunk_text?.substring(0, 150)}${chunk.chunk_text?.length > 150 ? '...' : ''}`);
        if (chunk.similarity) {
          dataParts.push(`     (Pertinence: ${(chunk.similarity * 100).toFixed(0)}%)`);
        }
      });
    }

    // Contexte des documents
    if (databaseContext.documents?.length > 0) {
      dataParts.push(`\nüìÅ DOCUMENTS (${databaseContext.documents.length}) :`);
      databaseContext.documents.slice(0, 2).forEach((doc: any, i: number) => {
        dataParts.push(`  ${i+1}. ${doc.ai_generated_name || doc.original_name}`);
        if (doc.ai_summary) {
          dataParts.push(`     ${doc.ai_summary.substring(0, 100)}...`);
        }
      });
    }

    return dataParts.join('\n');
  }

  private enrichResponseWithContext(response: string, analysis: any, confidence: number, databaseContext: any, embeddingContext: any): string {
    let enrichedResponse = response;

    // Ajout d'indicateurs de confiance si n√©cessaire
    if (confidence < 0.5 && !response.includes('donn√©es limit√©es')) {
      enrichedResponse += '\n\nüí° *R√©ponse bas√©e sur des informations limit√©es du cabinet. Pour plus de pr√©cision, n\'h√©sitez pas √† me donner plus de contexte.*';
    }

    // Ajout de contexte source si pertinent
    if (databaseContext.meetings?.length > 0 && analysis.queryType === 'meeting') {
      enrichedResponse += `\n\nüìä *Bas√© sur ${databaseContext.meetings.length} r√©union(s) de votre cabinet.*`;
    }

    if (embeddingContext.chunks?.length > 0) {
      enrichedResponse += `\n\nüîç *Information trouv√©e dans ${embeddingContext.chunks.length} √©l√©ment(s) de vos donn√©es.*`;
    }

    return enrichedResponse;
  }

  private generateIntelligentFallback(originalQuery: string, databaseContext: any, embeddingContext: any, taskContext: any): string {
    const hasData = databaseContext.meetings?.length > 0 || embeddingContext.chunks?.length > 0 || taskContext.hasTaskContext;
    
    if (hasData) {
      return `üè• Je rencontre un probl√®me technique temporaire, mais je vois que vous avez des donn√©es dans votre cabinet OphtaCare √† Gen√®ve. 

Concernant votre question "${originalQuery}", je peux vous confirmer que j'ai acc√®s √† :
${databaseContext.meetings?.length > 0 ? `- ${databaseContext.meetings.length} r√©union(s) r√©cente(s)` : ''}
${embeddingContext.chunks?.length > 0 ? `- ${embeddingContext.chunks.length} √©l√©ment(s) de contenu pertinent` : ''}
${taskContext.hasTaskContext ? `- ${taskContext.currentTasks.length} t√¢che(s) en cours` : ''}

Pourriez-vous reformuler votre question ou √™tre plus sp√©cifique ? Je suis l√† pour vous aider avec votre pratique ophtalmologique. üëÅÔ∏è`;
    }

    return `üè• Je suis l'assistant OphtaCare du Dr Tabibian √† Gen√®ve et je reste disponible pour vous aider malgr√© ce probl√®me technique temporaire.

Pour votre question "${originalQuery}", je peux vous assister avec :
- üìã Gestion des t√¢ches et planning
- üîç Recherche dans vos donn√©es de cabinet
- üíä Conseils en ophtalmologie
- üìä Organisation administrative

Pouvez-vous reformuler votre demande ou √™tre plus pr√©cis sur ce que vous cherchez ? üëÅÔ∏è`;
  }
}
