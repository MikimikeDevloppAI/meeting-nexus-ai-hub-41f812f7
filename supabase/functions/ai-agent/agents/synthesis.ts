
export interface SynthesisRequest {
  originalQuery: string;
  conversationHistory: any[];
  databaseContext: any;
  embeddingContext: any;
  internetContext: any;
  analysis: any;
}

export class SynthesisAgent {
  private openaiApiKey: string;

  constructor(openaiApiKey: string) {
    this.openaiApiKey = openaiApiKey;
  }

  async synthesizeResponse(
    originalQuery: string,
    conversationHistory: any[],
    databaseContext: any,
    embeddingContext: any,
    internetContext: any,
    analysis?: any
  ): Promise<string> {
    console.log('[SYNTHESIS] Creating enhanced comprehensive response');

    // Critical evaluation of available data
    const dataQuality = this.evaluateDataQuality(databaseContext, embeddingContext, internetContext, analysis);
    
    if (!dataQuality.sufficient) {
      console.log('[SYNTHESIS] ‚ö†Ô∏è Insufficient data quality, requesting more specific search');
      return this.generateInsufficientDataResponse(originalQuery, dataQuality);
    }

    // Build comprehensive context
    const contextText = this.buildEnhancedContext(
      conversationHistory,
      databaseContext,
      embeddingContext,
      internetContext,
      analysis
    );

    const systemPrompt = this.buildEnhancedSystemPrompt(dataQuality, analysis);

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: `${originalQuery}\n\n${contextText}` }
          ],
          temperature: 0.7,
          max_tokens: 2000,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate AI response');
      }

      const data = await response.json();
      const finalResponse = data.choices[0]?.message?.content || 'D√©sol√©, je n\'ai pas pu g√©n√©rer une r√©ponse.';

      console.log('[SYNTHESIS] ‚úÖ Enhanced response generated successfully');
      return finalResponse;

    } catch (error) {
      console.error('[SYNTHESIS] ‚ùå Error generating response:', error);
      return 'D√©sol√©, je rencontre un probl√®me technique pour synth√©tiser ma r√©ponse.';
    }
  }

  private evaluateDataQuality(databaseContext: any, embeddingContext: any, internetContext: any, analysis: any): any {
    const quality = {
      sufficient: false,
      hasTargetedContent: false,
      hasGeneralContent: false,
      missingElements: [] as string[],
      suggestions: [] as string[]
    };

    // Check for targeted extraction if needed
    if (analysis?.targetedExtraction) {
      quality.hasTargetedContent = databaseContext.targetedExtracts?.sections?.length > 0 ||
                                   embeddingContext.chunks?.some((chunk: any) => 
                                     chunk.chunk_text.toLowerCase().includes(analysis.targetedExtraction.entity.toLowerCase())
                                   );
      
      if (!quality.hasTargetedContent) {
        quality.missingElements.push(`Information sp√©cifique sur "${analysis.targetedExtraction.entity}"`);
        quality.suggestions.push(`Recherche plus cibl√©e sur "${analysis.targetedExtraction.entity}"`);
      }
    }

    // Check for general content
    quality.hasGeneralContent = (databaseContext.meetings?.length > 0 || 
                                databaseContext.documents?.length > 0 || 
                                embeddingContext.chunks?.length > 0 || 
                                internetContext.hasContent);

    // Determine sufficiency
    if (analysis?.targetedExtraction) {
      quality.sufficient = quality.hasTargetedContent || quality.hasGeneralContent;
    } else {
      quality.sufficient = quality.hasGeneralContent;
    }

    return quality;
  }

  private generateInsufficientDataResponse(originalQuery: string, dataQuality: any): string {
    let response = `Je n'ai pas trouv√© suffisamment d'informations sp√©cifiques pour r√©pondre compl√®tement √† votre question : "${originalQuery}"\n\n`;
    
    if (dataQuality.missingElements.length > 0) {
      response += `**√âl√©ments manquants :**\n`;
      dataQuality.missingElements.forEach((element: string) => {
        response += `‚Ä¢ ${element}\n`;
      });
      response += '\n';
    }

    if (dataQuality.suggestions.length > 0) {
      response += `**Suggestions :**\n`;
      dataQuality.suggestions.forEach((suggestion: string) => {
        response += `‚Ä¢ ${suggestion}\n`;
      });
      response += '\n';
    }

    response += `Pouvez-vous reformuler votre question ou √™tre plus sp√©cifique ? Par exemple :\n`;
    response += `‚Ä¢ Pr√©ciser une p√©riode ou un contexte\n`;
    response += `‚Ä¢ Mentionner des noms sp√©cifiques\n`;
    response += `‚Ä¢ Utiliser des termes alternatifs\n`;

    return response;
  }

  private buildEnhancedContext(
    conversationHistory: any[],
    databaseContext: any,
    embeddingContext: any,
    internetContext: any,
    analysis: any
  ): string {
    let contextText = '';

    // Conversation history
    if (conversationHistory && conversationHistory.length > 0) {
      contextText += `\n\n**üí¨ HISTORIQUE DE LA CONVERSATION:**\n${
        conversationHistory.slice(-5).map((msg, index) => 
          `${index + 1}. [${msg.isUser ? 'UTILISATEUR' : 'ASSISTANT'}] ${msg.content.substring(0, 300)}${msg.content.length > 300 ? '...' : ''}`
        ).join('\n')
      }\n\n`;
    }

    // Targeted extracts (highest priority)
    if (databaseContext.targetedExtracts?.sections?.length > 0) {
      contextText += `\n\n**üéØ EXTRAITS CIBL√âS POUR "${databaseContext.targetedExtracts.entity.toUpperCase()}" (PRIORIT√â ABSOLUE):**\n${
        databaseContext.targetedExtracts.sections.map((section: string, index: number) => 
          `${index + 1}. ${section}`
        ).join('\n\n')
      }\n\n`;
    }

    // Enhanced embeddings context
    if (embeddingContext.hasRelevantContext && embeddingContext.chunks.length > 0) {
      contextText += `\n\n**üîç DOCUMENTS PERTINENTS OPHTACARE (Recherche en ${embeddingContext.searchIterations} it√©rations):**\n${
        embeddingContext.chunks.map((result: any, index: number) => 
          `${index + 1}. [Similarit√©: ${(result.similarity * 100).toFixed(1)}%] ${result.metadata?.title || result.document_type}\nContenu: ${result.chunk_text}`
        ).join('\n\n')
      }\n\n`;
    }

    // Database context
    if (databaseContext.meetings && databaseContext.meetings.length > 0) {
      contextText += `\n\n**üìã TRANSCRIPTS DES R√âUNIONS OPHTACARE:**\n${
        databaseContext.meetings.map((m: any) => 
          `R√©union: ${m.title} (${new Date(m.created_at).toLocaleDateString()})\n${
            m.transcript ? `Transcript: ${m.transcript.substring(0, 1500)}...` : `R√©sum√©: ${m.summary || 'Pas de r√©sum√©'}`
          }`
        ).join('\n\n')
      }\n\n`;
    }

    // Documents context
    if (databaseContext.documents && databaseContext.documents.length > 0) {
      contextText += `\n\n**üìÅ DOCUMENTS OPHTACARE:**\n${
        databaseContext.documents.map((d: any) => 
          `Document: ${d.ai_generated_name || d.original_name}\nTexte: ${
            d.extracted_text ? d.extracted_text.substring(0, 1000) + '...' : 'Pas de texte extrait'
          }`
        ).join('\n\n')
      }\n\n`;
    }

    // Todos context
    if (databaseContext.todos && databaseContext.todos.length > 0) {
      contextText += `\n\n**‚úÖ T√ÇCHES OPHTACARE:**\n${
        databaseContext.todos.map((t: any) => 
          `- [${t.status}] ${t.description}${t.due_date ? ` (√©ch√©ance: ${new Date(t.due_date).toLocaleDateString()})` : ''}`
        ).join('\n')
      }\n\n`;
    }

    // Internet enrichment
    if (internetContext.hasContent) {
      contextText += `\n\n**üåê ENRICHISSEMENT INTERNET (${internetContext.enrichmentType.toUpperCase()}):**\n${internetContext.content}\n\n`;
    }

    return contextText;
  }

  private buildEnhancedSystemPrompt(dataQuality: any, analysis: any): string {
    return `Tu es l'assistant IA du cabinet d'ophtalmologie OphtaCare du Dr Tabibian. Tu es sp√©cialis√© dans l'assistance pour ce cabinet m√©dical sp√©cifique.

üè• **CONTEXTE OPHTACARE :**
Tu travailles pour OphtaCare, cabinet d'ophtalmologie dirig√© par le Dr Tabibian. Tu as acc√®s √† toutes les donn√©es internes du cabinet et tu dois prioritairement utiliser ces informations.

üéØ **QUALIT√â DES DONN√âES DISPONIBLES :**
- Contenu cibl√© : ${dataQuality.hasTargetedContent ? '‚úÖ' : '‚ùå'}
- Contenu g√©n√©ral : ${dataQuality.hasGeneralContent ? '‚úÖ' : '‚ùå'}
- Suffisance globale : ${dataQuality.sufficient ? '‚úÖ' : '‚ùå'}

üìä **R√àGLES STRICTES DE SYNTH√àSE :**
1. **PRIORISE ABSOLUMENT** les extraits cibl√©s s'ils existent
2. Utilise l'historique pour maintenir la continuit√© de conversation
3. Compl√®te avec les embeddings OphtaCare (indique le score de similarit√© si pertinent)
4. Enrichis avec les donn√©es de la base de donn√©es OphtaCare
5. Utilise l'enrichissement internet selon son type (supplement/complement/verification)
6. **SOIS PR√âCIS ET COMPLET** - √©vite les r√©ponses trop courtes
7. Cite TOUJOURS tes sources en pr√©cisant leur origine
8. Si extraction cibl√©e demand√©e, fournis le contexte complet autour de l'entit√©

üîß **GESTION DES T√ÇCHES :**
Si tu veux cr√©er/modifier/supprimer une t√¢che, utilise : [ACTION_TACHE: TYPE=create/update/delete/complete, DESCRIPTION="description", ASSIGNED_TO="nom_utilisateur", DUE_DATE="YYYY-MM-DD", ID="id_tache"]

üß† **INTELLIGENCE CONTEXTUELLE :**
- Pour des entit√©s sp√©cifiques (noms, concepts), fournis le contexte complet
- Pour des demandes techniques, sois d√©taill√© et pr√©cis
- Pour des questions g√©n√©rales, enrichis avec des informations r√©centes
- Adapte ta r√©ponse selon le type de recherche effectu√©e (${analysis?.searchIterations || 1} it√©ration(s))`;
  }
}
