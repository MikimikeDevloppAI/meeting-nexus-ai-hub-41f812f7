
export class SynthesisAgent {
  private openaiApiKey: string;

  constructor(openaiApiKey: string) {
    this.openaiApiKey = openaiApiKey;
  }

  async synthesizeResponse(
    message: string,
    conversationHistory: any[],
    databaseContext: any,
    embeddingContext: any,
    internetContext: any,
    analysis: any,
    taskContext: any
  ): Promise<string> {
    console.log('[SYNTHESIS] üè• Synth√®se INTELLIGENTE Cabinet Dr Tabibian');

    // Si une t√¢che vient d'√™tre cr√©√©e, r√©ponse rapide et directe
    if (taskContext.taskCreated) {
      console.log('[SYNTHESIS] ‚úÖ T√¢che cr√©√©e - r√©ponse directe');
      const task = taskContext.taskCreated;
      const assignedName = await this.getAssignedName(task.assigned_to);
      
      let response = `‚úÖ **T√¢che cr√©√©e avec succ√®s !**\n\n`;
      response += `üìã **Description :** ${task.description}\n`;
      if (assignedName) {
        response += `üë§ **Assign√©e √† :** ${assignedName}\n`;
      }
      response += `üìÖ **Statut :** Confirm√©e\n`;
      response += `üÜî **ID :** ${task.id}\n\n`;
      response += `La t√¢che a √©t√© ajout√©e au syst√®me et est maintenant visible dans la liste des t√¢ches.`;
      
      // Ajouter la syntaxe d'action pour l'interface
      response += `\n\n[ACTION_TACHE: TYPE=create, id=${task.id}, description="${task.description}", status="confirmed"`;
      if (task.assigned_to) {
        response += `, assigned_to="${task.assigned_to}"`;
      }
      response += `]`;
      
      return response;
    }

    // Si t√¢che en attente d'assignation
    if (taskContext.pendingTaskCreation?.waitingForAssignment) {
      console.log('[SYNTHESIS] ‚è≥ Demande d\'assignation pour t√¢che');
      let response = `Je vais cr√©er une t√¢che pour "${taskContext.pendingTaskCreation.description}". \n\n`;
      response += `√Ä qui devrais-je assigner cette t√¢che ? Vous pouvez choisir parmi les participants suivants :\n`;
      response += `‚Ä¢ David Tabibian\n‚Ä¢ Emilie\n‚Ä¢ Leila\n‚Ä¢ Parmice\n‚Ä¢ Sybil\n\n`;
      response += `R√©pondez simplement avec le nom de la personne.`;
      return response;
    }

    // Analyser l'historique pour comprendre le contexte
    const contextAnalysis = this.analyzeConversationContext(message, conversationHistory);

    // Reste de la logique de synth√®se existante
    let synthesisType = 'database';
    
    if (embeddingContext.hasRelevantContext) {
      synthesisType = 'embeddings';
      console.log('[SYNTHESIS] üéØ Phase 1: R√©ponse bas√©e sur recherche vectorielle');
    } else if (databaseContext.meetings?.length > 0 || databaseContext.documents?.length > 0) {
      synthesisType = 'database';
      console.log('[SYNTHESIS] üóÑÔ∏è Phase 1: R√©ponse bas√©e sur donn√©es structur√©es');
    } else if (internetContext.hasContent) {
      synthesisType = 'internet';
      console.log('[SYNTHESIS] üåê Phase 1: R√©ponse bas√©e sur recherche internet');
    } else if (taskContext.hasTaskContext) {
      synthesisType = 'tasks';
      console.log('[SYNTHESIS] üìã Phase 1: R√©ponse bas√©e sur gestion des t√¢ches');
    } else {
      synthesisType = 'general';
      console.log('[SYNTHESIS] üí¨ Phase 1: R√©ponse conversationnelle g√©n√©rale');
    }

    // Construction du prompt syst√®me am√©lior√© avec historique AU D√âBUT
    let systemPrompt = `üö®üö®üö® PRIORIT√â ABSOLUE - CONTEXTE CONVERSATIONNEL üö®üö®üö®

Tu es l'assistant IA sp√©cialis√© du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve, Suisse.

INSTRUCTION CRITIQUE NUM√âRO 1 - HISTORIQUE DE CONVERSATION:
Voici la conversation en cours. Tu DOIS absolument utiliser cet historique pour comprendre le contexte de la demande actuelle:

`;

    // HISTORIQUE DE CONVERSATION - Section ULTRA PRIORITAIRE
    if (conversationHistory && conversationHistory.length > 0) {
      systemPrompt += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê CONVERSATION EN COURS ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
      
      // Prendre les 10 derniers √©changes et les formater clairement
      const recentHistory = conversationHistory.slice(-10);
      
      recentHistory.forEach((msg: any, index: number) => {
        const role = msg.isUser ? 'üë§ UTILISATEUR' : 'ü§ñ TOI';
        const timestamp = new Date(msg.timestamp).toLocaleTimeString('fr-FR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        systemPrompt += `\n${role} [${timestamp}]: "${msg.content}"\n`;
      });

      systemPrompt += `\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê FIN CONVERSATION ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;

      // Analyse contextuelle sp√©ciale
      if (contextAnalysis.isReferencingPrevious) {
        systemPrompt += `üî•üî•üî• ATTENTION CRITIQUE üî•üî•üî•
L'utilisateur fait r√©f√©rence √† quelque chose de la conversation pr√©c√©dente !
Message actuel: "${message}"
Contexte d√©tect√©: ${contextAnalysis.context}
‚û°Ô∏è Tu DOIS utiliser l'historique ci-dessus pour comprendre de quoi il parle !

`;
      }

      // Cas sp√©cial pour les r√©ponses courtes √† des questions
      const lastAssistantMessage = this.getLastAssistantMessage(conversationHistory);
      const isShortResponse = this.isShortResponseToQuestion(message, lastAssistantMessage);
      
      if (isShortResponse) {
        systemPrompt += `üî•üî•üî• R√âPONSE COURTE D√âTECT√âE üî•üî•üî•
L'utilisateur donne une r√©ponse courte ("${message}") √† ta derni√®re question.
Ta derni√®re question √©tait: "${lastAssistantMessage}"
‚û°Ô∏è Traite "${message}" comme une R√âPONSE DIRECTE √† cette question !

`;
      }
    }

    systemPrompt += `
üî• R√àGLES ABSOLUES D'UTILISATION DE L'HISTORIQUE :
1. TOUJOURS lire l'historique complet avant de r√©pondre
2. Si l'utilisateur dit "fournisseur", "√ßa", "cela", "cette chose" ‚Üí regarder l'historique pour comprendre DE QUOI il parle
3. Si l'utilisateur donne juste un nom apr√®s une question ‚Üí c'est une r√©ponse √† ta question
4. Maintenir la CONTINUIT√â absolue de la conversation
5. JAMAIS demander des pr√©cisions si l'information est dans l'historique

MISSION: Fournir une assistance administrative et m√©dicale experte avec un ton professionnel et bienveillant.

CONTEXTE CABINET:
- Cabinet d'ophtalmologie Dr David Tabibian
- Situ√© √† Gen√®ve, Suisse 
- Sp√©cialis√© en ophtalmologie et chirurgie oculaire
- √âquipe administrative et m√©dicale

PARTICIPANTS DISPONIBLES POUR ASSIGNATION:
- David Tabibian (ID: c04c6400-1025-4906-9823-30478123bd71)
- Emilie (ID: 9b8b37f6-ee0c-4354-be18-6a0ca0930b12)
- Leila (ID: 42445b1f-d701-4f30-b57c-48814b64a1df)
- Parmice (ID: a0c5df24-45ba-49c8-bb5e-1a6e9fc7f49d)
- Sybil (ID: 2fdb2b35-91ef-4966-93ec-9261172c31c1)

CAPACIT√âS PRINCIPALES:
- Gestion administrative (rendez-vous, dossiers patients, facturation)
- Assistance aux proc√©dures m√©dicales et chirurgicales
- Recherche dans les transcripts de r√©unions et documents
- Gestion des t√¢ches et follow-up administratif
- Recommandations bas√©es sur l'historique du cabinet
- Consultation de donn√©es externes pour informations r√©centes

R√àGLES DE COMMUNICATION:
- Ton professionnel mais accessible
- R√©ponses pr√©cises et actionnables
- Toujours contextualiser par rapport au cabinet Dr Tabibian
- Pour les prix, utiliser les CHF (francs suisses)
- Mentionner les sources quand tu utilises des donn√©es sp√©cifiques
- üî• UTILISER L'HISTORIQUE pour comprendre les r√©f√©rences et maintenir le contexte
- JAMAIS demander de clarification si l'information est dans l'historique de conversation

GESTION DES T√ÇCHES:
- Quand on te demande de cr√©er une t√¢che, utilise cette syntaxe √† la fin de ta r√©ponse:
  [ACTION_TACHE: TYPE=create, description="description de la t√¢che", assigned_to="id_participant"]
- Pour les autres actions: TYPE=update|delete|complete avec les param√®tres appropri√©s
- Toujours confirmer la cr√©ation/modification des t√¢ches
- Si pas d'assignation pr√©cis√©e, demander √† qui assigner la t√¢che
`;

    // Ajouter le contexte des t√¢ches si disponible
    if (taskContext.hasTaskContext && taskContext.currentTasks.length > 0) {
      systemPrompt += `\nT√ÇCHES EN COURS (${taskContext.currentTasks.length}):\n`;
      taskContext.currentTasks.forEach((task: any, index: number) => {
        systemPrompt += `${index + 1}. ${task.description} (ID: ${task.id}, Statut: ${task.status})\n`;
      });
    }

    // Ajouter le contexte des embeddings si disponible
    if (embeddingContext.hasRelevantContext) {
      console.log('[SYNTHESIS] üéØ Utilisation des donn√©es embeddings disponibles');
      systemPrompt += `\nCONTEXTE DOCUMENTAIRE CABINET (${embeddingContext.chunks.length} √©l√©ments):\n`;
      embeddingContext.chunks.slice(0, 5).forEach((chunk: any, index: number) => {
        systemPrompt += `${index + 1}. ${chunk.chunk_text.substring(0, 200)}...\n`;
      });
    }

    // Ajouter le contexte internet si disponible
    if (internetContext.hasContent) {
      console.log('[SYNTHESIS] üåê Utilisation des donn√©es Internet disponibles');
      systemPrompt += `\nINFORMATIONS INTERNET ENRICHIES:\n${internetContext.content.substring(0, 1000)}...\n`;
    }

    // Ajouter le contexte de base de donn√©es
    if (databaseContext.meetings?.length > 0) {
      systemPrompt += `\nR√âUNIONS R√âCENTES (${databaseContext.meetings.length}):\n`;
      databaseContext.meetings.slice(0, 3).forEach((meeting: any, index: number) => {
        systemPrompt += `${index + 1}. ${meeting.title} (${meeting.meeting_date})\n`;
      });
    }

    systemPrompt += `\nüî• QUESTION/DEMANDE ACTUELLE: ${message}

RAPPEL FINAL: Utilise l'historique de conversation ci-dessus pour comprendre le contexte et les r√©f√©rences. Si l'utilisateur fait r√©f√©rence √† quelque chose mentionn√© pr√©c√©demment, utilise ces informations pour donner une r√©ponse contextuelle appropri√©e.`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        temperature: 0.7,
        max_tokens: 1500,
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to generate response');
    }

    const aiData = await response.json();
    return aiData.choices[0].message.content;
  }

  private analyzeConversationContext(message: string, conversationHistory: any[]): any {
    if (!conversationHistory || conversationHistory.length === 0) {
      return { isReferencingPrevious: false, context: '' };
    }

    const lowerMessage = message.toLowerCase();
    
    // Mots cl√©s qui indiquent une r√©f√©rence au contexte pr√©c√©dent
    const referenceKeywords = [
      'fournisseur', '√ßa', 'cela', 'cette', 'celui', 'celle', 'ceci',
      'la m√™me', 'le m√™me', 'comme √ßa', 'pareille', 'similaire',
      'pour √ßa', 'avec √ßa', 'de √ßa'
    ];

    const isReferencingPrevious = referenceKeywords.some(keyword => lowerMessage.includes(keyword));
    
    if (isReferencingPrevious) {
      // Analyser les derniers messages pour extraire le contexte
      const recentMessages = conversationHistory.slice(-5);
      const lastAssistantMessage = recentMessages.reverse().find(msg => !msg.isUser);
      
      if (lastAssistantMessage) {
        // Extraire des sujets cl√©s du dernier message de l'assistant
        const content = lastAssistantMessage.content.toLowerCase();
        if (content.includes('fontaine') && content.includes('eau')) {
          return { 
            isReferencingPrevious: true, 
            context: 'R√©f√©rence √† la fontaine √† eau discut√©e pr√©c√©demment' 
          };
        }
        if (content.includes('caf√©')) {
          return { 
            isReferencingPrevious: true, 
            context: 'R√©f√©rence √† l\'achat de caf√© discut√© pr√©c√©demment' 
          };
        }
        if (content.includes('t√¢che')) {
          return { 
            isReferencingPrevious: true, 
            context: 'R√©f√©rence √† la gestion de t√¢ches discut√©e pr√©c√©demment' 
          };
        }
      }
      
      return { 
        isReferencingPrevious: true, 
        context: 'R√©f√©rence √† quelque chose mentionn√© dans la conversation pr√©c√©dente' 
      };
    }

    return { isReferencingPrevious: false, context: '' };
  }

  private getLastAssistantMessage(conversationHistory: any[]): string {
    if (!conversationHistory || conversationHistory.length === 0) return '';
    
    // Chercher le dernier message de l'assistant
    for (let i = conversationHistory.length - 1; i >= 0; i--) {
      const msg = conversationHistory[i];
      if (!msg.isUser) {
        return msg.content;
      }
    }
    return '';
  }

  private isShortResponseToQuestion(currentMessage: string, lastAssistantMessage: string): boolean {
    // V√©rifier si le message actuel est court (moins de 20 caract√®res)
    const isShort = currentMessage.trim().length < 20;
    
    // V√©rifier si le dernier message de l'assistant contenait une question
    const hasQuestion = lastAssistantMessage.includes('?') || 
                       lastAssistantMessage.toLowerCase().includes('qui') ||
                       lastAssistantMessage.toLowerCase().includes('comment') ||
                       lastAssistantMessage.toLowerCase().includes('assigner') ||
                       lastAssistantMessage.toLowerCase().includes('pr√©ciser') ||
                       lastAssistantMessage.toLowerCase().includes('quel') ||
                       lastAssistantMessage.toLowerCase().includes('quelle');
    
    return isShort && hasQuestion;
  }

  private async getAssignedName(assignedId: string | null): Promise<string | null> {
    if (!assignedId) return null;
    
    // Cette m√©thode devrait r√©cup√©rer le nom du participant depuis la base de donn√©es
    // Pour l'instant, on retourne l'ID - peut √™tre am√©lior√© plus tard
    return assignedId;
  }
}
