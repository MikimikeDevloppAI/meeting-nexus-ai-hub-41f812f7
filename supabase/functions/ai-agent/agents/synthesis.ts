
export class SynthesisAgent {
  private openaiApiKey: string;

  constructor(openaiApiKey: string) {
    this.openaiApiKey = openaiApiKey;
  }

  async synthesizeResponse(
    message: string,
    conversationHistory: any[],
    databaseContext: any,
    embeddingContext: any,
    internetContext: any,
    analysis: any,
    taskContext: any
  ): Promise<string> {
    console.log('[SYNTHESIS] üè• Synth√®se INTELLIGENTE Cabinet Dr Tabibian');

    // Si une t√¢che vient d'√™tre cr√©√©e, r√©ponse rapide et directe
    if (taskContext.taskCreated) {
      console.log('[SYNTHESIS] ‚úÖ T√¢che cr√©√©e - r√©ponse directe');
      const task = taskContext.taskCreated;
      const assignedName = await this.getAssignedName(task.assigned_to);
      
      let response = `‚úÖ **T√¢che cr√©√©e avec succ√®s !**\n\n`;
      response += `üìã **Description :** ${task.description}\n`;
      if (assignedName) {
        response += `üë§ **Assign√©e √† :** ${assignedName}\n`;
      }
      response += `üìÖ **Statut :** Confirm√©e\n`;
      response += `üÜî **ID :** ${task.id}\n\n`;
      response += `La t√¢che a √©t√© ajout√©e au syst√®me et est maintenant visible dans la liste des t√¢ches.`;
      
      // Ajouter la syntaxe d'action pour l'interface
      response += `\n\n[ACTION_TACHE: TYPE=create, id=${task.id}, description="${task.description}", status="confirmed"`;
      if (task.assigned_to) {
        response += `, assigned_to="${task.assigned_to}"`;
      }
      response += `]`;
      
      return response;
    }

    // Si t√¢che en attente d'assignation SEULEMENT SI EXPLICITEMENT DEMAND√âE
    if (taskContext.pendingTaskCreation?.waitingForAssignment) {
      console.log('[SYNTHESIS] ‚è≥ Demande d\'assignation pour t√¢che');
      let response = `Je vais cr√©er une t√¢che pour "${taskContext.pendingTaskCreation.description}". \n\n`;
      response += `√Ä qui devrais-je assigner cette t√¢che ? Vous pouvez choisir parmi les participants suivants :\n`;
      response += `‚Ä¢ David Tabibian\n‚Ä¢ Emilie\n‚Ä¢ Leila\n‚Ä¢ Parmice\n‚Ä¢ Sybil\n\n`;
      response += `R√©pondez simplement avec le nom de la personne.`;
      return response;
    }

    // NOUVELLE ANALYSE APPROFONDIE DU CONTEXTE DE CONVERSATION
    const contextAnalysis = this.analyzeConversationContext(message, conversationHistory);
    console.log('[SYNTHESIS] üß† Analyse du contexte APPROFONDIE:', contextAnalysis);

    // EXTRACTION DU SUJET PRINCIPAL ACTIF
    const mainSubject = this.extractMainSubject(conversationHistory, message);
    console.log('[SYNTHESIS] üéØ Sujet principal d√©tect√©:', mainSubject);

    // D√©terminer le type de synth√®se bas√© sur le contexte disponible
    let synthesisType = 'database';
    
    if (embeddingContext.hasRelevantContext) {
      synthesisType = 'embeddings';
      console.log('[SYNTHESIS] üéØ Phase 1: R√©ponse bas√©e sur recherche vectorielle');
    } else if (databaseContext.meetings?.length > 0 || databaseContext.documents?.length > 0) {
      synthesisType = 'database';
      console.log('[SYNTHESIS] üóÑÔ∏è Phase 1: R√©ponse bas√©e sur donn√©es structur√©es');
    } else if (internetContext.hasContent) {
      synthesisType = 'internet';
      console.log('[SYNTHESIS] üåê Phase 1: R√©ponse bas√©e sur recherche internet');
    } else if (taskContext.hasTaskContext) {
      synthesisType = 'tasks';
      console.log('[SYNTHESIS] üìã Phase 1: R√©ponse bas√©e sur gestion des t√¢ches');
    } else {
      synthesisType = 'general';
      console.log('[SYNTHESIS] üí¨ Phase 1: R√©ponse conversationnelle g√©n√©rale');
    }

    // Construction du prompt syst√®me avec priorit√© ABSOLUE √† la continuit√©
    let systemPrompt = `üö®üö®üö® INSTRUCTION CRITIQUE PRIORIT√â ABSOLUE - CONTINUIT√â DE CONVERSATION üö®üö®üö®

Tu es l'assistant IA sp√©cialis√© du cabinet d'ophtalmologie Dr Tabibian √† Gen√®ve, Suisse.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê CONTEXTE CONVERSATION ACTUEL ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
SUJET PRINCIPAL ACTIF: ${mainSubject || 'Aucun sujet sp√©cifique d√©tect√©'}
TYPE DE CONTINUIT√â: ${contextAnalysis.continuationType}
R√âF√âRENCE PR√âC√âDENTE: ${contextAnalysis.isReferencingPrevious ? 'OUI' : 'NON'}
CONTINUATION D√âTECT√âE: ${contextAnalysis.isContinuation ? 'OUI' : 'NON'}

`;

    // HISTORIQUE DE CONVERSATION - Section ULTRA PRIORITAIRE avec formatage am√©lior√©
    if (conversationHistory && conversationHistory.length > 0) {
      console.log('[SYNTHESIS] üìú Formatage de l\'historique pour continuit√© MAXIMALE');
      
      systemPrompt += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê HISTORIQUE CONVERSATION COMPLET ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
UTILISE CET HISTORIQUE POUR MAINTENIR LA CONTINUIT√â ABSOLUE:

`;
      
      // Prendre les 8 derniers √©changes et les formater clairement
      const recentHistory = conversationHistory.slice(-8);
      
      recentHistory.forEach((msg: any, index: number) => {
        const role = msg.isUser ? 'üë§ UTILISATEUR' : 'ü§ñ ASSISTANT';
        const timestamp = new Date(msg.timestamp).toLocaleTimeString('fr-FR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        systemPrompt += `[${index + 1}] ${role} [${timestamp}]: "${msg.content}"\n\n`;
      });

      systemPrompt += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê FIN HISTORIQUE ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
    }

    // INSTRUCTIONS CRITIQUES POUR LA CONTINUIT√â
    systemPrompt += `üî•üî•üî• R√àGLES CRITIQUES DE CONTINUIT√â üî•üî•üî•

MESSAGE UTILISATEUR ACTUEL: "${message}"

üéØ ANALYSE OBLIGATOIRE AVANT R√âPONSE:
1. DE QUOI parle ce message ? ${mainSubject ? `Le sujet semble √™tre: ${mainSubject}` : 'Analyser l\'historique pour comprendre'}
2. Est-ce une CONTINUATION du sujet pr√©c√©dent ? ${contextAnalysis.isContinuation ? 'OUI - maintenir le sujet' : 'V√©rifier l\'historique'}
3. Si l'utilisateur dit "recherche", "site", "adresse" ‚Üí rechercher QUOI exactement ?

üö® INSTRUCTIONS IMP√âRATIVES:
- Si l'utilisateur dit "recherche sur internet/web" ‚Üí il parle du SUJET PR√âC√âDENT dans l'historique
- Si l'utilisateur dit "site internet", "adresse" ‚Üí il veut les coordonn√©es du SUJET PR√âC√âDENT  
- Si l'utilisateur dit "√ßa", "cela", "le m√™me" ‚Üí se r√©f√©rer au DERNIER SUJET mentionn√©
- JAMAIS supposer qu'il parle du cabinet Dr Tabibian sauf s'il le mentionne explicitement
- TOUJOURS v√©rifier l'historique pour comprendre le CONTEXTE

`;

    // Cas sp√©cial pour les demandes courtes avec contexte
    if (contextAnalysis.isContinuation && mainSubject) {
      systemPrompt += `üî•üî•üî• CONTINUIT√â D√âTECT√âE - TRAITEMENT SP√âCIALIS√â üî•üî•üî•
L'utilisateur demande: "${message}"
Concernant le sujet: "${mainSubject}"
‚û°Ô∏è INTERPR√âTATION: "${message}" signifie "${message} pour ${mainSubject}"
‚û°Ô∏è AGIR EN CONS√âQUENCE pour ${mainSubject} !

`;
    }

    // Instructions g√©n√©rales pour l'assistant
    systemPrompt += `
MISSION: Fournir une assistance administrative et m√©dicale experte avec un ton professionnel et bienveillant.

CONTEXTE CABINET:
- Cabinet d'ophtalmologie Dr David Tabibian
- Situ√© √† Gen√®ve, Suisse 
- Sp√©cialis√© en ophtalmologie et chirurgie oculaire

PARTICIPANTS DISPONIBLES POUR ASSIGNATION (SI DEMAND√â):
- David Tabibian (ID: c04c6400-1025-4906-9823-30478123bd71)
- Emilie (ID: 9b8b37f6-ee0c-4354-be18-6a0ca0930b12)
- Leila (ID: 42445b1f-d701-4f30-b57c-48814b64a1df)
- Parmice (ID: a0c5df24-45ba-49c8-bb5e-1a6e9fc7f49d)
- Sybil (ID: 2fdb2b35-91ef-4966-93ec-9261172c31c1)

R√àGLES DE COMMUNICATION:
- Ton professionnel mais accessible
- R√©ponses pr√©cises et actionnables
- Toujours contextualiser par rapport au cabinet Dr Tabibian
- Pour les prix, utiliser les CHF (francs suisses)
- JAMAIS inventer de coordonn√©es, t√©l√©phones ou contacts
- SEULEMENT utiliser les informations trouv√©es via internet si disponibles
- NE PAS proposer automatiquement de cr√©er des t√¢ches

R√àGLES STRICTES POUR LES COORDONN√âES:
- JAMAIS inventer de num√©ros de t√©l√©phone
- SEULEMENT utiliser les coordonn√©es trouv√©es dans internetContext si hasContent=true
- Si pas de coordonn√©es trouv√©es via internet, dire "Je n'ai pas trouv√© les coordonn√©es de contact"
- TOUJOURS pr√©ciser la source des informations (internet ou donn√©es internes)

GESTION DES T√ÇCHES (SEULEMENT SI DEMAND√â):
- Cr√©er une t√¢che SEULEMENT quand explicitement demand√© par l'utilisateur
- Mots-cl√©s pour cr√©ation: "cr√©er une t√¢che", "cr√©√© une t√¢che", "nouvelle t√¢che", "faire une t√¢che"
- Si pas d'assignation pr√©cis√©e, demander √† qui assigner
- JAMAIS proposer automatiquement de cr√©er une t√¢che
`;

    // Ajouter le contexte des t√¢ches si disponible
    if (taskContext.hasTaskContext && taskContext.currentTasks.length > 0) {
      systemPrompt += `\nT√ÇCHES EN COURS (${taskContext.currentTasks.length}):\n`;
      taskContext.currentTasks.forEach((task: any, index: number) => {
        systemPrompt += `${index + 1}. ${task.description} (ID: ${task.id}, Statut: ${task.status})\n`;
      });
    }

    // Ajouter le contexte internet SEULEMENT s'il y a vraiment du contenu ET correspond au sujet
    if (internetContext.hasContent && internetContext.content) {
      console.log('[SYNTHESIS] üåê Utilisation des donn√©es Internet V√âRIFI√âES avec contexte');
      const searchSubject = mainSubject || 'votre demande';
      systemPrompt += `\nINFORMATIONS INTERNET V√âRIFI√âES POUR: ${searchSubject}:\n${internetContext.content}\n`;
      systemPrompt += `\nSOURCE: Recherche internet via Perplexity AI\n`;
    } else {
      systemPrompt += `\nAUCUNE INFORMATION INTERNET DISPONIBLE - ne pas inventer de coordonn√©es\n`;
    }

    // Ajouter le contexte des embeddings si disponible
    if (embeddingContext.hasRelevantContext) {
      console.log('[SYNTHESIS] üéØ Utilisation des donn√©es embeddings disponibles');
      systemPrompt += `\nCONTEXTE DOCUMENTAIRE CABINET (${embeddingContext.chunks.length} √©l√©ments):\n`;
      embeddingContext.chunks.slice(0, 5).forEach((chunk: any, index: number) => {
        systemPrompt += `${index + 1}. ${chunk.chunk_text.substring(0, 200)}...\n`;
      });
    }

    // Ajouter le contexte de base de donn√©es
    if (databaseContext.meetings?.length > 0) {
      systemPrompt += `\nR√âUNIONS R√âCENTES (${databaseContext.meetings.length}):\n`;
      databaseContext.meetings.slice(0, 3).forEach((meeting: any, index: number) => {
        systemPrompt += `${index + 1}. ${meeting.title} (${meeting.meeting_date})\n`;
      });
    }

    systemPrompt += `\nüî• QUESTION/DEMANDE ACTUELLE: ${message}

RAPPEL FINAL CRITIQUE: 
- AVANT de r√©pondre, identifie clairement DE QUOI parle l'utilisateur
- Utilise l'historique de conversation pour comprendre le contexte COMPLET
- Si l'utilisateur dit "recherche sur internet", comprends qu'il veut chercher le sujet de la conversation pr√©c√©dente
- JAMAIS inventer de coordonn√©es ou t√©l√©phones
- SEULEMENT utiliser les informations trouv√©es via internet si disponibles
- Maintiens la CONTINUIT√â ABSOLUE avec la conversation pr√©c√©dente
- Si le message est court et fait r√©f√©rence √† quelque chose, cherche QUOI dans l'historique`;

    console.log('[SYNTHESIS] üöÄ Envoi du prompt enrichi avec contexte RENFORC√â');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        temperature: 0.7,
        max_tokens: 1500,
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to generate response');
    }

    const aiData = await response.json();
    return aiData.choices[0].message.content;
  }

  private analyzeConversationContext(message: string, conversationHistory: any[]): any {
    if (!conversationHistory || conversationHistory.length === 0) {
      return { 
        isReferencingPrevious: false, 
        isContinuation: false,
        context: '',
        continuationType: 'none',
        previousSubject: null
      };
    }

    const lowerMessage = message.toLowerCase().trim();
    
    // Mots cl√©s qui indiquent une r√©f√©rence au contexte pr√©c√©dent (RENFORC√âS)
    const referenceKeywords = [
      '√ßa', 'cela', 'cette', 'celui', 'celle', 'ceci', 'celui-ci', 'celle-ci',
      'la m√™me', 'le m√™me', 'les m√™mes', 'comme √ßa', 'pareille', 'similaire',
      'pour √ßa', 'avec √ßa', 'de √ßa', 'du premier', 'le premier', 'la premi√®re',
      'premier que', 'mentionn√©', 'dit', 'parl√©', '√©voqu√©', 'discut√©',
      'pr√©c√©dent', 'pr√©c√©dente', 'avant', 'tant√¥t', 'plus haut', 'ci-dessus'
    ];

    // Mots cl√©s pour continuit√© d'action (RENFORC√âS)
    const continuationKeywords = [
      'recherche sur internet', 'cherche sur internet', 'trouve sur internet',
      'recherche internet', 'cherche internet', 'trouve internet',
      'recherche sur le web', 'cherche sur le web', 'trouve sur le web',
      'recherche web', 'cherche web', 'trouve web',
      'recherche', 'cherche', 'trouve', 'contact', 'coordonn√©es',
      'site internet', 'site web', 'adresse internet', 'adresse web',
      'num√©ro', 't√©l√©phone', 'email', 'mail', 'informations',
      'pour moi', 'stp', 's\'il te pla√Æt', 'aide moi'
    ];

    const isReferencingPrevious = referenceKeywords.some(keyword => lowerMessage.includes(keyword));
    const isContinuation = continuationKeywords.some(keyword => lowerMessage.includes(keyword));
    
    // Analyser les derniers messages pour extraire le contexte
    let previousSubject = null;
    let continuationType = 'none';
    let contextDescription = '';

    if (isReferencingPrevious || isContinuation) {
      // Chercher dans les 6 derniers messages pour identifier le sujet
      const recentMessages = conversationHistory.slice(-6);
      
      for (let i = recentMessages.length - 1; i >= 0; i--) {
        const msg = recentMessages[i];
        if (msg.isUser && msg.content.toLowerCase() !== lowerMessage) {
          const content = msg.content.toLowerCase();
          
          // Identifier des sujets sp√©cifiques avec plus de patterns
          if (content.includes('nespresso') || content.includes('caf√©')) {
            previousSubject = 'Nespresso Professionnel';
            contextDescription = 'R√©f√©rence √† la recherche de contacts Nespresso Professionnel';
            continuationType = 'contact_search';
            break;
          }
          if (content.includes('fontaine') && content.includes('eau')) {
            previousSubject = 'fontaine √† eau';
            contextDescription = 'R√©f√©rence √† la fontaine √† eau discut√©e pr√©c√©demment';
            continuationType = 'equipment_search';
            break;
          }
          if (content.includes('fournisseur') || content.includes('prestataire') || content.includes('entreprise')) {
            previousSubject = this.extractCompanyName(content) || 'fournisseur mentionn√© pr√©c√©demment';
            contextDescription = 'R√©f√©rence aux fournisseurs discut√©s pr√©c√©demment';
            continuationType = 'supplier_search';
            break;
          }
          if (content.includes('contact') || content.includes('coordonn√©es') || content.includes('trouve')) {
            // Extraire le sujet de la recherche de contact plus pr√©cis√©ment
            previousSubject = this.extractSearchSubject(content);
            contextDescription = 'R√©f√©rence √† une recherche de contact pr√©c√©dente';
            continuationType = 'contact_search';
            break;
          }
          // Nouveau: d√©tecter les noms de produits/services
          const productMatches = content.match(/(?:contact|trouve|cherche|recherche)\s+(?:moi\s+)?(?:les?\s+)?(?:contact|coordonn√©es|info|information)?\s*(?:de|pour|sur)?\s+([a-z√†-√ø\s]+)/i);
          if (productMatches && productMatches[1]) {
            previousSubject = productMatches[1].trim();
            contextDescription = `R√©f√©rence √† la recherche pour ${previousSubject}`;
            continuationType = 'product_search';
            break;
          }
        }
      }

      // Si c'est une demande de recherche internet sans sujet pr√©cis identifi√©
      if (isContinuation && (lowerMessage.includes('recherche') || lowerMessage.includes('web') || lowerMessage.includes('internet')) && !previousSubject) {
        // Chercher le dernier sujet mentionn√© dans la conversation
        for (let i = recentMessages.length - 1; i >= 0; i--) {
          const msg = recentMessages[i];
          if (msg.isUser) {
            // Extraire le sujet principal du message
            const extractedSubject = this.extractSearchSubject(msg.content);
            if (extractedSubject) {
              previousSubject = extractedSubject;
              contextDescription = 'Demande de recherche internet pour le sujet pr√©c√©dent';
              continuationType = 'internet_search';
              break;
            }
          }
        }
      }
    }

    return { 
      isReferencingPrevious,
      isContinuation,
      context: contextDescription,
      continuationType,
      previousSubject
    };
  }

  private extractMainSubject(conversationHistory: any[], currentMessage: string): string | null {
    if (!conversationHistory || conversationHistory.length === 0) return null;

    // Analyser les 5 derniers messages pour extraire le sujet principal
    const recentMessages = conversationHistory.slice(-5);
    
    // Rechercher dans l'ordre inverse pour trouver le dernier sujet mentionn√©
    for (let i = recentMessages.length - 1; i >= 0; i--) {
      const msg = recentMessages[i];
      if (msg.isUser) {
        const subject = this.extractSearchSubject(msg.content);
        if (subject) {
          console.log(`[SYNTHESIS] üéØ Sujet extrait du message ${i}: "${subject}"`);
          return subject;
        }
      }
    }

    return null;
  }

  private extractSearchSubject(content: string): string | null {
    const lowerContent = content.toLowerCase();
    
    // Patterns pour extraire le sujet de recherche
    const patterns = [
      /(?:contact|trouve|cherche|recherche)\s+(?:moi\s+)?(?:les?\s+)?(?:contact|coordonn√©es|info|information)?\s*(?:de|pour|sur)?\s+([a-z√†-√ø\s]{3,30})/i,
      /(?:adresse|site|num√©ro|t√©l√©phone|email)\s+(?:de|pour|sur)?\s+([a-z√†-√ø\s]{3,30})/i,
      /([a-z√†-√ø\s]{3,30})\s+(?:professionnel|entreprise|soci√©t√©|contact|coordonn√©es)/i
    ];

    for (const pattern of patterns) {
      const match = content.match(pattern);
      if (match && match[1]) {
        let subject = match[1].trim();
        // Nettoyer le sujet extrait
        subject = subject.replace(/\b(les|des|pour|sur|avec|sans|dans|par)\b/gi, '').trim();
        if (subject.length > 2) {
          return subject;
        }
      }
    }

    return null;
  }

  private extractCompanyName(content: string): string | null {
    // Patterns pour extraire des noms d'entreprise
    const companyPatterns = [
      /([A-Z√Ä-≈∏][a-z√†-√ø]+(?:\s+[A-Z√Ä-≈∏][a-z√†-√ø]+)*)\s+(?:SA|SARL|AG|GmbH|S√†rl|Ltd|Inc|Corp)/i,
      /([A-Z√Ä-≈∏][a-z√†-√ø]+(?:\s+[A-Z√Ä-≈∏][a-z√†-√ø]+)*)\s+(?:professionnel|entreprise|soci√©t√©)/i
    ];

    for (const pattern of companyPatterns) {
      const match = content.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }

    return null;
  }

  private getLastAssistantMessage(conversationHistory: any[]): string {
    if (!conversationHistory || conversationHistory.length === 0) return '';
    
    // Chercher le dernier message de l'assistant
    for (let i = conversationHistory.length - 1; i >= 0; i--) {
      const msg = conversationHistory[i];
      if (!msg.isUser) {
        return msg.content;
      }
    }
    return '';
  }

  private isShortResponseToQuestion(currentMessage: string, lastAssistantMessage: string): boolean {
    // V√©rifier si le message actuel est court (moins de 20 caract√®res)
    const isShort = currentMessage.trim().length < 20;
    
    // V√©rifier si le dernier message de l'assistant contenait une question
    const hasQuestion = lastAssistantMessage.includes('?') || 
                       lastAssistantMessage.toLowerCase().includes('qui') ||
                       lastAssistantMessage.toLowerCase().includes('comment') ||
                       lastAssistantMessage.toLowerCase().includes('assigner') ||
                       lastAssistantMessage.toLowerCase().includes('pr√©ciser') ||
                       lastAssistantMessage.toLowerCase().includes('quel') ||
                       lastAssistantMessage.toLowerCase().includes('quelle');
    
    return isShort && hasQuestion;
  }

  private async getAssignedName(assignedId: string | null): Promise<string | null> {
    if (!assignedId) return null;
    
    // Cette m√©thode devrait r√©cup√©rer le nom du participant depuis la base de donn√©es
    // Pour l'instant, on retourne l'ID - peut √™tre am√©lior√© plus tard
    return assignedId;
  }
}
