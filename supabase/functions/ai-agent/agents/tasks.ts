export interface TaskContext {
  currentTasks: any[];
  taskCreated?: any;
  hasTaskContext: boolean;
  taskAction?: 'list' | 'create' | 'update' | 'complete';
  pendingTaskCreation?: {
    description: string;
    waitingForAssignment: boolean;
  };
}

export class TaskAgent {
  private supabase: any;

  constructor(supabase: any) {
    this.supabase = supabase;
  }

  // Fonction pour normaliser les noms et am√©liorer la correspondance
  private normalizeParticipantName(name: string): string {
    return name
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Supprime les accents
      .trim();
  }

  // Fonction pour trouver le meilleur participant correspondant dans TOUS les participants
  private async findBestParticipantMatch(searchName: string): Promise<any | null> {
    if (!searchName) return null;

    console.log(`[TASKS] üîç Recherche correspondance pour: "${searchName}"`);
    
    // R√©cup√©rer TOUS les participants de la base de donn√©es
    const { data: allParticipants, error } = await this.supabase
      .from('participants')
      .select('id, name, email')
      .order('name');

    if (error || !allParticipants?.length) {
      console.error('[TASKS] ‚ùå Erreur r√©cup√©ration participants:', error);
      return null;
    }

    console.log(`[TASKS] üë• Total participants disponibles: ${allParticipants.length}`);
    
    const normalizedSearch = this.normalizeParticipantName(searchName);
    
    // Variantes de noms connues
    const nameVariants: Record<string, string[]> = {
      'leila': ['le√Øla', 'leila'],
      'emilie': ['√©milie', 'emilie'],
      'david': ['david', 'david tabibian'],
      'parmice': ['parmice', 'parmis'],
      'sybil': ['sybil'],
      'tabibian': ['tabibian', 'dr tabibian']
    };
    
    // 1. Correspondance exacte avec variantes
    for (const participant of allParticipants) {
      const normalizedParticipantName = this.normalizeParticipantName(participant.name);
      const normalizedEmail = this.normalizeParticipantName(participant.email?.split('@')[0] || '');
      
      // Test direct
      if (normalizedParticipantName === normalizedSearch || normalizedEmail === normalizedSearch) {
        console.log(`[TASKS] ‚úÖ Correspondance exacte: ${participant.name}`);
        return participant;
      }
      
      // Test avec variantes
      for (const [key, variants] of Object.entries(nameVariants)) {
        if (variants.some(variant => this.normalizeParticipantName(variant) === normalizedSearch)) {
          if (variants.some(variant => this.normalizeParticipantName(variant) === normalizedParticipantName)) {
            console.log(`[TASKS] ‚úÖ Correspondance variante: ${participant.name}`);
            return participant;
          }
        }
      }
    }
    
    // 2. Correspondance partielle
    for (const participant of allParticipants) {
      const normalizedParticipantName = this.normalizeParticipantName(participant.name);
      if (normalizedParticipantName.includes(normalizedSearch) || normalizedSearch.includes(normalizedParticipantName)) {
        console.log(`[TASKS] ‚úÖ Correspondance partielle: ${participant.name}`);
        return participant;
      }
    }
    
    console.log(`[TASKS] ‚ö†Ô∏è Aucune correspondance trouv√©e pour: "${searchName}"`);
    return null;
  }

  async handleTaskRequest(message: string, analysis: any, conversationHistory: any[] = []): Promise<TaskContext> {
    console.log('[TASKS] üìã Gestion sp√©cialis√©e des t√¢ches');
    
    const context: TaskContext = {
      currentTasks: [],
      hasTaskContext: false,
      taskAction: this.detectTaskAction(message, conversationHistory)
    };

    // D√©tecter les requ√™tes sur les t√¢ches r√©currentes ou planifi√©es
    const isRecurrentQuery = this.isRecurrentTaskQuery(message);
    const isParticipantQuery = this.extractParticipantFromQuery(message);
    
    if (isRecurrentQuery || isParticipantQuery) {
      console.log('[TASKS] üîÑ Requ√™te t√¢ches r√©currentes/participant d√©tect√©e');
      
      // Recherche √©largie incluant les t√¢ches compl√©t√©es et l'historique
      const { data: allTasks } = await this.supabase
        .from('todos')
        .select(`
          id, description, status, due_date, created_at, meeting_id,
          participants:todo_participants(
            participant:participants(id, name, email)
          )
        `)
        .order('created_at', { ascending: false })
        .limit(50); // Plus de r√©sultats pour l'analyse

      if (allTasks && allTasks.length > 0) {
        // Filtrer par participant si sp√©cifi√©
        let filteredTasks = allTasks;
        if (isParticipantQuery) {
          filteredTasks = this.filterTasksByParticipant(allTasks, isParticipantQuery);
          console.log(`[TASKS] üë§ Filtrage par participant "${isParticipantQuery}": ${filteredTasks.length} t√¢ches trouv√©es`);
        }

        // Analyser les patterns r√©currents
        if (isRecurrentQuery) {
          const recurringTasks = this.analyzeRecurringPatterns(filteredTasks, message);
          console.log(`[TASKS] üîÑ Analyse r√©currence: ${recurringTasks.length} patterns trouv√©s`);
          context.currentTasks = recurringTasks;
        } else {
          context.currentTasks = filteredTasks;
        }
        
        context.hasTaskContext = true;
        context.taskAction = 'list';
        console.log(`[TASKS] ‚úÖ ${context.currentTasks.length} t√¢ches contextuelles trouv√©es`);
      }
    } else {
      // Logique existante pour les autres types de requ√™tes
      const { data: allTasks } = await this.supabase
        .from('todos')
        .select(`
          id, description, status, due_date, created_at, meeting_id,
          participants:todo_participants(
            participant:participants(id, name, email)
          )
        `)
        .in('status', ['pending', 'confirmed'])
        .order('created_at', { ascending: false })
        .limit(20);

      if (allTasks && allTasks.length > 0) {
        context.currentTasks = allTasks;
        context.hasTaskContext = true;
        console.log(`[TASKS] ‚úÖ ${allTasks.length} t√¢ches en cours trouv√©es`);
      }
    }

    // V√©rifier si c'est une r√©ponse √† une demande d'assignation pr√©c√©dente
    const isAssignmentResponse = this.checkForAssignmentResponse(message, conversationHistory);
    
    if (isAssignmentResponse) {
      const previousTaskRequest = this.findPreviousTaskRequest(conversationHistory);
      if (previousTaskRequest) {
        console.log('[TASKS] ‚ûï Cr√©ation t√¢che avec assignation depuis r√©ponse utilisateur');
        
        const taskDescription = this.extractTaskDescription(previousTaskRequest);
        const participant = await this.findBestParticipantMatch(message.trim());
        
        if (taskDescription) {
          const shortDescription = this.makeDescriptionConcise(taskDescription);
          
          const { data: newTask, error } = await this.supabase
            .from('todos')
            .insert([{
              description: shortDescription,
              status: 'confirmed',
              assigned_to: participant?.id || null,
              meeting_id: null
            }])
            .select()
            .single();

          if (!error && newTask) {
            // Cr√©er la relation todo_participants si participant trouv√©
            if (participant) {
              await this.supabase.from('todo_participants').insert({
                todo_id: newTask.id,
                participant_id: participant.id
              });
              console.log('[TASKS] ‚úÖ Participant assign√©:', participant.name);
            }
            
            context.taskCreated = newTask;
            context.currentTasks.unshift(newTask);
            context.taskAction = 'create';
            console.log('[TASKS] ‚úÖ T√¢che cr√©√©e:', newTask.id);
          } else {
            console.log('[TASKS] ‚ùå Erreur cr√©ation t√¢che:', error);
          }
        }
      }
    }
    // Si demande de cr√©ation de t√¢che directe
    else if (context.taskAction === 'create') {
      const taskDescription = this.extractTaskDescription(message);
      if (taskDescription) {
        console.log('[TASKS] ‚ûï Cr√©ation d\'une nouvelle t√¢che:', taskDescription);
        
        const shortDescription = this.makeDescriptionConcise(taskDescription);
        const participantName = this.extractAssignedToFromMessage(message);
        
        let participant = null;
        if (participantName) {
          participant = await this.findBestParticipantMatch(participantName);
        }
        
        if (participant) {
          // Cr√©ation directe avec assignation
          const { data: newTask, error } = await this.supabase
            .from('todos')
            .insert([{
              description: shortDescription,
              status: 'confirmed',
              assigned_to: participant.id,
              meeting_id: null
            }])
            .select()
            .single();

          if (!error && newTask) {
            // Cr√©er la relation todo_participants
            await this.supabase.from('todo_participants').insert({
              todo_id: newTask.id,
              participant_id: participant.id
            });
            
            context.taskCreated = newTask;
            context.currentTasks.unshift(newTask);
            console.log('[TASKS] ‚úÖ Nouvelle t√¢che cr√©√©e:', newTask.id, 'assign√©e √†:', participant.name);
          } else {
            console.log('[TASKS] ‚ùå Erreur cr√©ation t√¢che:', error);
          }
        } else {
          // Pas d'assignation trouv√©e - demander √† qui assigner
          context.pendingTaskCreation = {
            description: shortDescription,
            waitingForAssignment: true
          };
          console.log('[TASKS] ‚è≥ T√¢che en attente d\'assignation');
        }
      }
    }

    return context;
  }

  private isRecurrentTaskQuery(message: string): boolean {
    const recurringKeywords = [
      'tous les', 'chaque', 'toutes les', 'r√©current', 'r√©gulier',
      'hebdomadaire', 'quotidien', 'mensuel', 'habituel', 'planifi√©'
    ];
    
    const lowerMessage = message.toLowerCase();
    return recurringKeywords.some(keyword => lowerMessage.includes(keyword));
  }

  private extractParticipantFromQuery(message: string): string | null {
    const participantNames = ['emilie', 'david', 'leila', 'parmice', 'sybil', 'tabibian'];
    const lowerMessage = message.toLowerCase();
    
    for (const name of participantNames) {
      if (lowerMessage.includes(name)) {
        console.log(`[TASKS] üë§ Participant d√©tect√©: ${name}`);
        return name;
      }
    }
    return null;
  }

  private filterTasksByParticipant(tasks: any[], participantName: string): any[] {
    return tasks.filter(task => {
      if (!task.participants || !Array.isArray(task.participants)) return false;
      
      return task.participants.some((p: any) => {
        const participant = p.participant;
        if (!participant) return false;
        
        const name = participant.name?.toLowerCase() || '';
        const email = participant.email?.toLowerCase() || '';
        
        return name.includes(participantName.toLowerCase()) || 
               email.includes(participantName.toLowerCase());
      });
    });
  }

  private analyzeRecurringPatterns(tasks: any[], query: string): any[] {
    // Analyser les jours de la semaine mentionn√©s
    const dayKeywords = {
      'lundi': 'monday',
      'mardi': 'tuesday', 
      'mercredi': 'wednesday',
      'jeudi': 'thursday',
      'vendredi': 'friday',
      'samedi': 'saturday',
      'dimanche': 'sunday'
    };

    const lowerQuery = query.toLowerCase();
    let targetDay = null;
    
    for (const [frenchDay, englishDay] of Object.entries(dayKeywords)) {
      if (lowerQuery.includes(frenchDay)) {
        targetDay = englishDay;
        break;
      }
    }

    if (targetDay) {
      console.log(`[TASKS] üìÖ Jour cible d√©tect√©: ${targetDay}`);
      
      // Filtrer les t√¢ches par jour de la semaine (bas√© sur due_date ou created_at)
      return tasks.filter(task => {
        const date = new Date(task.due_date || task.created_at);
        const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
        return dayOfWeek === targetDay;
      });
    }

    // Si pas de jour sp√©cifique, retourner toutes les t√¢ches avec pattern r√©current
    return tasks.filter(task => {
      const description = task.description?.toLowerCase() || '';
      return description.includes('chaque') || 
             description.includes('tous les') || 
             description.includes('hebdomadaire') ||
             description.includes('r√©gulier');
    });
  }

  private checkForAssignmentResponse(message: string, conversationHistory: any[]): boolean {
    if (conversationHistory.length === 0) return false;
    
    // Chercher dans les 3 derniers messages de l'assistant
    const recentAssistantMessages = conversationHistory
      .filter(msg => !msg.isUser)
      .slice(-3);
    
    const assignmentQuestion = recentAssistantMessages.some(msg => 
      msg.content && (
        msg.content.includes('qui devrais-je assigner') ||
        msg.content.includes('√Ä qui devrais-je assigner') ||
        msg.content.includes('assigner cette t√¢che') ||
        msg.content.includes('choisir parmi les participants')
      )
    );
    
    if (assignmentQuestion) {
      // V√©rifier si le message actuel ressemble √† un nom de personne
      const lowerMessage = message.toLowerCase().trim();
      const commonNames = ['emilie', 'david', 'leila', 'parmice', 'sybil', 'tabibian'];
      const isLikelyName = commonNames.some(name => lowerMessage.includes(name)) || 
                          (lowerMessage.length < 50 && /^[a-z√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ø√ß\s-]+$/i.test(lowerMessage));
      
      console.log('[TASKS] üîç V√©rification r√©ponse assignation:', { assignmentQuestion, isLikelyName, message });
      return isLikelyName;
    }
    
    return false;
  }

  private findPreviousTaskRequest(conversationHistory: any[]): string | null {
    // Chercher le dernier message utilisateur qui demandait de cr√©er une t√¢che
    const userMessages = conversationHistory.filter(msg => msg.isUser);
    
    for (let i = userMessages.length - 1; i >= 0; i--) {
      const msg = userMessages[i];
      if (this.detectTaskAction(msg.content, []) === 'create') {
        console.log('[TASKS] üîç Trouv√© demande t√¢che pr√©c√©dente:', msg.content);
        return msg.content;
      }
    }
    
    return null;
  }

  private extractAssignedToFromMessage(message: string): string | null {
    // Chercher des patterns comme "pour David", "√† Emilie", etc.
    const patterns = [
      /(?:pour|√†|assigner?\s+√†)\s+([a-zA-Z√Ä-√ø\s]+)/i,
      /([a-zA-Z√Ä-√ø]+)\s+(?:doit|va|peut)\s+/i
    ];
    
    for (const pattern of patterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    return null;
  }

  private makeDescriptionConcise(description: string): string {
    let cleaned = description.replace(/CONTEXT_PARTICIPANTS:.*$/gi, '').trim();
    cleaned = cleaned.replace(/\n+/g, ' ').trim();
    
    if (cleaned.length > 150) {
      const firstSentence = cleaned.split('.')[0];
      if (firstSentence.length > 0 && firstSentence.length < 150) {
        return firstSentence.trim();
      }
      return cleaned.substring(0, 147).trim() + '...';
    }
    return cleaned;
  }

  private detectTaskAction(message: string, conversationHistory: any[] = []): 'list' | 'create' | 'update' | 'complete' | undefined {
    const lowerMessage = message.toLowerCase();
    
    // D√©tection cr√©ation - patterns plus sp√©cifiques
    const createPatterns = [
      'cr√©√© une t√¢che', 'cr√©er une t√¢che', 'nouvelle t√¢che', 'ajouter une t√¢che', 
      'cr√©e une t√¢che', 'faire une t√¢che', 'cr√©√© une action', 'cr√©er une action',
      'nouvelle action', 'ajouter une action', 'cr√©e une action', 'action pour',
      't√¢che pour', 'fais une t√¢che', 'fais une action', 'assigne', 'assign√©'
    ];
    
    if (createPatterns.some(pattern => lowerMessage.includes(pattern))) {
      console.log('[TASKS] üéØ D√©tection CREATE d√©tect√©e');
      return 'create';
    }

    // D√©tection listing/consultation
    const listPatterns = [
      't√¢ches en cours', 'mes t√¢ches', 'voir les t√¢ches', 'liste des t√¢ches',
      't√¢ches √† faire', 'que dois-je faire', 'quelles sont les t√¢ches'
    ];
    
    if (listPatterns.some(pattern => lowerMessage.includes(pattern))) {
      console.log('[TASKS] üìã D√©tection LIST d√©tect√©e');
      return 'list';
    }

    return undefined;
  }

  private extractTaskDescription(message: string): string | null {
    const lowerMessage = message.toLowerCase();
    
    // Patterns pour extraire la description - plus flexibles
    const patterns = [
      /cr√©√© une t√¢che[:\s]*(.+?)(?:pour\s+[A-Za-z√Ä-√ø\s]+)?(?:\s*CONTEXT_PARTICIPANTS|$)/i,
      /cr√©er une t√¢che[:\s]*(.+?)(?:pour\s+[A-Za-z√Ä-√ø\s]+)?(?:\s*CONTEXT_PARTICIPANTS|$)/i,
      /nouvelle t√¢che[:\s]*(.+?)(?:pour\s+[A-Za-z√Ä-√ø\s]+)?(?:\s*CONTEXT_PARTICIPANTS|$)/i,
      /cr√©e une t√¢che[:\s]*(.+?)(?:pour\s+[A-Za-z√Ä-√ø\s]+)?(?:\s*CONTEXT_PARTICIPANTS|$)/i,
      /cr√©√© une action[:\s]*(.+?)(?:pour\s+[A-Za-z√Ä-√ø\s]+)?(?:\s*CONTEXT_PARTICIPANTS|$)/i,
      /cr√©er une action[:\s]*(.+?)(?:pour\s+[A-Za-z√Ä-√ø\s]+)?(?:\s*CONTEXT_PARTICIPANTS|$)/i,
      /cr√©e une action[:\s]*(.+?)(?:pour\s+[A-Za-z√Ä-√ø\s]+)?(?:\s*CONTEXT_PARTICIPANTS|$)/i
    ];

    for (const pattern of patterns) {
      const match = message.match(pattern);
      if (match && match[1] && match[1].trim().length > 3) {
        console.log('[TASKS] üéØ Description extraite:', match[1].trim());
        return match[1].trim();
      }
    }

    // Si pas de pattern trouv√©, extraire apr√®s mots-cl√©s
    const keywords = ['cr√©√©', 'cr√©er', 'cr√©e', 'faire', 'ajouter', 'nouvelle', 'action', 't√¢che'];
    for (const keyword of keywords) {
      const index = lowerMessage.indexOf(keyword);
      if (index !== -1) {
        const afterKeyword = message.substring(index + keyword.length).trim();
        if (afterKeyword.length > 5) {
          const cleaned = afterKeyword.replace(/^[:\s]*/, '').split(/(?:pour\s+[A-Za-z√Ä-√ø\s]+|CONTEXT_PARTICIPANTS)/i)[0].trim();
          if (cleaned.length > 3) {
            console.log('[TASKS] üéØ Description extraite (fallback):', cleaned);
            return cleaned;
          }
        }
      }
    }

    return null;
  }

  isTaskRelated(message: string): boolean {
    const taskKeywords = [
      't√¢che', 'taches', 'task', 'todo', '√† faire', 'action',
      'cr√©er', 'cr√©√©', 'cr√©e', 'nouvelle', 'ajouter', 'faire', 'terminer',
      'compl√©ter', 'finir', 'en cours', 'pending', 'confirmed', 'assigne', 'assign√©'
    ];

    const lowerMessage = message.toLowerCase();
    return taskKeywords.some(keyword => lowerMessage.includes(keyword));
  }
}
