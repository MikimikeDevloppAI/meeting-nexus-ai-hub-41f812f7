
export async function retryMissingRecommendations(supabaseClient: any, meetingId?: string) {
  console.log('üîÑ Recherche des t√¢ches sans recommandations...');
  
  let query = supabaseClient
    .from('todos')
    .select('*')
    .eq('ai_recommendation_generated', false);
    
  if (meetingId) {
    query = query.eq('meeting_id', meetingId);
  }
  
  const { data: tasksWithoutRec, error } = await query;
  
  if (error) {
    console.error('‚ùå Erreur lors de la recherche des t√¢ches:', error);
    return;
  }
  
  if (!tasksWithoutRec || tasksWithoutRec.length === 0) {
    console.log('‚úÖ Toutes les t√¢ches ont d√©j√† des recommandations');
    return;
  }
  
  console.log(`üéØ ${tasksWithoutRec.length} t√¢ches trouv√©es sans recommandations`);
  
  // Obtenir TOUS les participants pour le contexte
  const { data: participants } = await supabaseClient
    .from('participants')
    .select('*')
    .order('name');
  
  // Traiter chaque t√¢che individuellement avec la nouvelle logique
  for (const task of tasksWithoutRec) {
    try {
      console.log(`‚ö° G√©n√©ration recommandation pour t√¢che: ${task.description.substring(0, 50)}...`);
      
      const { data: recommendationResult, error: recError } = await supabaseClient.functions.invoke('task-recommendation-agent', {
        body: {
          task: { description: task.description },
          transcript: '', // Pas de transcript disponible pour retry
          meetingContext: {
            title: 'Retry Recommendations',
            date: new Date().toISOString(),
            participants: participants?.map(p => p.name).join(', ') || ''
          },
          participants: participants || []
        }
      });

      if (recError) {
        console.error('‚ùå Erreur recommandation pour t√¢che:', task.id, recError);
        continue; // Ne pas marquer comme trait√©
      }

      const rec = recommendationResult?.recommendation;
      
      if (rec && rec.hasRecommendation) {
        try {
          // Sauvegarder la recommandation
          const { error: saveError } = await supabaseClient
            .from('todo_ai_recommendations')
            .insert({
              todo_id: task.id,
              recommendation_text: rec.recommendation,
              email_draft: rec.emailDraft || null
            });
          
          if (saveError) {
            console.error('‚ùå Erreur sauvegarde recommandation pour t√¢che:', task.id, saveError);
            continue; // Ne pas marquer comme trait√© si erreur de sauvegarde
          }
          
          console.log(`‚úÖ Recommandation sauvegard√©e pour t√¢che ${task.id}`);
          
          // MARQUER COMME TRAIT√â SEULEMENT SI SAUVEGARDE R√âUSSIE
          const { error: updateError } = await supabaseClient
            .from('todos')
            .update({ ai_recommendation_generated: true })
            .eq('id', task.id);
            
          if (updateError) {
            console.error('‚ùå Erreur marquage t√¢che:', task.id, updateError);
          } else {
            console.log(`‚úÖ T√¢che ${task.id} marqu√©e comme trait√©e`);
          }
          
        } catch (saveError) {
          console.error(`‚ùå Erreur lors de la sauvegarde pour t√¢che ${task.id}:`, saveError);
        }
      } else {
        console.log(`‚ö†Ô∏è Pas de recommandation g√©n√©r√©e pour t√¢che ${task.id}`);
        // Ne pas marquer comme trait√© si pas de recommandation
      }
        
    } catch (error) {
      console.error(`‚ùå Erreur lors du retry pour t√¢che ${task.id}:`, error);
      // Ne pas marquer comme trait√© si erreur globale
    }
  }
  
  console.log('üèÅ Retry des recommandations termin√©');
}
