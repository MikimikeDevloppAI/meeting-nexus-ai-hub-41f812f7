import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { meetingId, userMessage } = await req.json();
    
    console.log('[TODOS-CHAT] üìù Message re√ßu:', userMessage);
    console.log('[TODOS-CHAT] üÜî Meeting ID:', meetingId);
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // R√©cup√©rer le transcript de la r√©union
    const { data: meeting, error: meetingError } = await supabase
      .from('meetings')
      .select('transcript')
      .eq('id', meetingId)
      .single();

    if (meetingError) {
      throw meetingError;
    }

    const transcript = meeting?.transcript || 'Pas de transcript disponible.';

    // Construire le prompt pour OpenAI
    const systemPrompt = `Tu es un assistant sp√©cialis√© dans la gestion des t√¢ches (todos) pour les r√©unions.

TRANSCRIPT DE LA R√âUNION :
${transcript}

INSTRUCTIONS :
1. Analyse le message de l'utilisateur pour comprendre la demande concernant les t√¢ches.
2. Extraire les informations pertinentes pour cr√©er, modifier ou supprimer des t√¢ches.
3. Retourne une r√©ponse claire et concise sur les actions √† effectuer.

R√©ponds UNIQUEMENT en JSON avec cette structure :
{
  "action": "create | update | delete",
  "description": "description de la t√¢che",
  "taskId": "uuid de la t√¢che √† modifier ou supprimer (si applicable)"
}`;

    console.log('[TODOS-CHAT] üß† Appel OpenAI...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: systemPrompt }],
        temperature: 0.3,
        max_tokens: 16384,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log('[TODOS-CHAT] ü§ñ R√©ponse OpenAI:', aiResponse);

    let parsedResponse;
    try {
      parsedResponse = JSON.parse(aiResponse);
    } catch (error) {
      console.error('[TODOS-CHAT] ‚ùå Erreur parsing JSON:', error);
      throw new Error('Erreur lors de l\'analyse de la r√©ponse JSON.');
    }

    // Ex√©cuter les actions en base de donn√©es
    let executedActions = [];
    let finalResponse = "Action effectu√©e";

    try {
      if (parsedResponse.action === 'create') {
        const { data: newTask, error: createError } = await supabase
          .from('todos')
          .insert({ meeting_id: meetingId, description: parsedResponse.description })
          .select()
          .single();

        if (createError) {
          throw createError;
        }

        executedActions.push({ type: 'create', taskId: newTask.id, description: newTask.description });
        finalResponse = `T√¢che cr√©√©e: ${newTask.description}`;
      } else if (parsedResponse.action === 'update') {
        const { data: updatedTask, error: updateError } = await supabase
          .from('todos')
          .update({ description: parsedResponse.description })
          .eq('id', parsedResponse.taskId)
          .select()
          .single();

        if (updateError) {
          throw updateError;
        }

        executedActions.push({ type: 'update', taskId: updatedTask.id, description: updatedTask.description });
        finalResponse = `T√¢che modifi√©e: ${updatedTask.description}`;
      } else if (parsedResponse.action === 'delete') {
        const { error: deleteError } = await supabase
          .from('todos')
          .delete()
          .eq('id', parsedResponse.taskId);

        if (deleteError) {
          throw deleteError;
        }

        executedActions.push({ type: 'delete', taskId: parsedResponse.taskId });
        finalResponse = `T√¢che supprim√©e`;
      }
    } catch (dbError) {
      console.error('[TODOS-CHAT] ‚ùå Erreur DB:', dbError);
      throw new Error('Erreur lors de la modification de la base de donn√©es.');
    }

    return new Response(JSON.stringify({
      success: true,
      response: finalResponse,
      explanation: `Actions effectu√©es avec succ√®s`,
      actionsExecuted: executedActions.length
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[TODOS-CHAT] ‚ùå Erreur:', error);
    
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      response: "Une erreur s'est produite lors du traitement de votre demande."
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
